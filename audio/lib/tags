!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/c/Users/Sumanth/Downloads/wind_river/audio/audio/lib/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20240421.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
ABOX_MACHINE_NAME	vxTest/src/tmMachineDrv.h	/^#define ABOX_MACHINE_NAME /;"	d
ARRAY_SIZE	vxTest/src/tmAudio.c	/^#define     ARRAY_SIZE(/;"	d	file:
ARRAY_SIZE	vxTest/src/tmAudioNew.h	/^#define ARRAY_SIZE(/;"	d
AT_INFO	vxTest/src/tmAudio.c	/^    } AT_INFO;$/;"	t	typeref:struct:atInfo	file:
AT_PATHLENGTH	vxTest/src/tmAudio.c	/^#define AT_PATHLENGTH /;"	d	file:
AT_PAUSE	vxTest/src/tmAudio.c	/^#define     AT_PAUSE /;"	d	file:
AT_PLAY	vxTest/src/tmAudio.c	/^#define     AT_PLAY /;"	d	file:
AT_START	vxTest/src/tmAudio.c	/^#define     AT_START /;"	d	file:
AT_STOP	vxTest/src/tmAudio.c	/^#define     AT_STOP /;"	d	file:
AUDIOERROR	vxTest/src/tmAudio.c	/^#define     AUDIOERROR /;"	d	file:
AUDIOERROR_CLOSE	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_CLOSE /;"	d	file:
AUDIOERROR_CLOSEDEV	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_CLOSEDEV /;"	d	file:
AUDIOERROR_CREATE	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_CREATE /;"	d	file:
AUDIOERROR_DEV_DISABLE	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_DEV_DISABLE /;"	d	file:
AUDIOERROR_DEV_ENABLE	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_DEV_ENABLE /;"	d	file:
AUDIOERROR_GET_BUFTIME	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_GET_BUFTIME /;"	d	file:
AUDIOERROR_GET_DATA_INFO	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_GET_DATA_INFO /;"	d	file:
AUDIOERROR_GET_DEV_INFO	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_GET_DEV_INFO /;"	d	file:
AUDIOERROR_GET_PATH	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_GET_PATH /;"	d	file:
AUDIOERROR_GET_VOLUME	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_GET_VOLUME /;"	d	file:
AUDIOERROR_MEMORY	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_MEMORY /;"	d	file:
AUDIOERROR_OPEN	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_OPEN /;"	d	file:
AUDIOERROR_OPENDEV	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_OPENDEV /;"	d	file:
AUDIOERROR_OPENMANY	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_OPENMANY /;"	d	file:
AUDIOERROR_SET_BUFTIME	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_SET_BUFTIME /;"	d	file:
AUDIOERROR_SET_DATA_INFO	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_SET_DATA_INFO /;"	d	file:
AUDIOERROR_SET_PATH	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_SET_PATH /;"	d	file:
AUDIOERROR_SET_VOLUME	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_SET_VOLUME /;"	d	file:
AUDIOERROR_START	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_START /;"	d	file:
AUDIOERROR_STOP	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_STOP /;"	d	file:
AUDIOERROR_WAVHEADERREAD	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_WAVHEADERREAD /;"	d	file:
AUDIOERROR_WAVHEADERWRITE	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_WAVHEADERWRITE /;"	d	file:
AUDIOERROR_WRITE	vxTest/src/tmAudio.c	/^#define     AUDIOERROR_WRITE /;"	d	file:
AUDIOOK	vxTest/src/tmAudio.c	/^#define     AUDIOOK /;"	d	file:
AUDIO_BUFFER_INFO	src/audioLibCore.c	/^    } AUDIO_BUFFER_INFO;$/;"	t	typeref:struct:audioBufferInfo	file:
AUDIO_BUFTIME	vxTest/src/tmAudio.c	/^#define     AUDIO_BUFTIME /;"	d	file:
AUDIO_CHAN_INFO	src/audioLibCore.c	/^    } AUDIO_CHAN_INFO;$/;"	t	typeref:struct:audioChanInfo	file:
AUDIO_CORE_DBG_MSG	src/audioLibCore.c	/^#       define AUDIO_CORE_DBG_MSG(/;"	d	file:
AUDIO_CORE_DBG_MSG	src/audioLibCore.c	/^#   define AUDIO_CORE_DBG_MSG(/;"	d	file:
AUDIO_DATA	src/audioLibCore.c	/^    } AUDIO_DATA;$/;"	t	typeref:struct:audioData	file:
AUDIO_DATA_INFO	h/audioLibCore.h	/^    } AUDIO_DATA_INFO;$/;"	t	typeref:struct:audioDataInfo
AUDIO_DEFAULT_BUFFER_NUM	src/audioLibCore.c	/^#define AUDIO_DEFAULT_BUFFER_NUM /;"	d	file:
AUDIO_DEFAULT_BUFFER_TIME	src/audioLibCore.c	/^#define AUDIO_DEFAULT_BUFFER_TIME /;"	d	file:
AUDIO_DEFAULT_DEV	h/audioLibCore.h	/^#define AUDIO_DEFAULT_DEV /;"	d
AUDIO_DEV	h/audioLibCore.h	/^    } AUDIO_DEV;$/;"	t	typeref:struct:audioDev
AUDIO_DEV_DISABLE	h/audioLibCore.h	/^#define AUDIO_DEV_DISABLE /;"	d
AUDIO_DEV_ENABLE	h/audioLibCore.h	/^#define AUDIO_DEV_ENABLE /;"	d
AUDIO_DEV_INFO	h/audioLibCore.h	/^    } AUDIO_DEV_INFO;$/;"	t	typeref:struct:audioDevInfo
AUDIO_DEV_INIT_TASK_PRIO	h/audioLibCore.h	/^#define AUDIO_DEV_INIT_TASK_PRIO /;"	d
AUDIO_DEV_INIT_TASK_STACK_SIZE	h/audioLibCore.h	/^#define AUDIO_DEV_INIT_TASK_STACK_SIZE /;"	d
AUDIO_DEV_MAX	h/audioLibCore.h	/^#define AUDIO_DEV_MAX /;"	d
AUDIO_DEV_NAME_LEN	h/audioLibCore.h	/^#define AUDIO_DEV_NAME_LEN /;"	d
AUDIO_DEV_PREFIX	h/audioLibCore.h	/^#define AUDIO_DEV_PREFIX /;"	d
AUDIO_FIONFREE	h/audioLibCore.h	/^#define AUDIO_FIONFREE /;"	d
AUDIO_FIONREAD	h/audioLibCore.h	/^#define AUDIO_FIONREAD /;"	d
AUDIO_FLAG	src/audioLibCore.c	/^    } AUDIO_FLAG;$/;"	t	typeref:enum:audioFlag	file:
AUDIO_FLAG_BLOCK	src/audioLibCore.c	/^    AUDIO_FLAG_BLOCK$/;"	e	enum:audioFlag	file:
AUDIO_FLAG_NONBLOCK	src/audioLibCore.c	/^    AUDIO_FLAG_NONBLOCK = 0,$/;"	e	enum:audioFlag	file:
AUDIO_GET_BUFTIME	h/audioLibCore.h	/^#define AUDIO_GET_BUFTIME /;"	d
AUDIO_GET_DATA_INFO	h/audioLibCore.h	/^#define AUDIO_GET_DATA_INFO /;"	d
AUDIO_GET_DEV_INFO	h/audioLibCore.h	/^#define AUDIO_GET_DEV_INFO /;"	d
AUDIO_GET_PATH	h/audioLibCore.h	/^#define AUDIO_GET_PATH /;"	d
AUDIO_GET_VOLUME	h/audioLibCore.h	/^#define AUDIO_GET_VOLUME /;"	d
AUDIO_HP_OUT	h/audioLibCore.h	/^#define AUDIO_HP_OUT /;"	d
AUDIO_IN_MASK	h/audioLibCore.h	/^#define AUDIO_IN_MASK /;"	d
AUDIO_IN_MASK_BITS	vxTest/src/tmAudio.c	/^#define     AUDIO_IN_MASK_BITS /;"	d	file:
AUDIO_IN_TYPES	vxTest/src/tmAudio.c	/^#define     AUDIO_IN_TYPES /;"	d	file:
AUDIO_IOCTL_ARG	h/audioLibCore.h	/^    } AUDIO_IOCTL_ARG;$/;"	t	typeref:union:audioIoctlArg
AUDIO_IO_CTRL	h/audioLibCore.h	/^typedef int AUDIO_IO_CTRL;$/;"	t	typeref:typename:int
AUDIO_LIB_CORE_DATA	src/audioLibCore.c	/^    }AUDIO_LIB_CORE_DATA;$/;"	t	typeref:struct:audioLibCoreData	file:
AUDIO_LINE_IN	h/audioLibCore.h	/^#define AUDIO_LINE_IN /;"	d
AUDIO_LINE_OUT	h/audioLibCore.h	/^#define AUDIO_LINE_OUT /;"	d
AUDIO_MIC_IN	h/audioLibCore.h	/^#define AUDIO_MIC_IN /;"	d
AUDIO_OPTION	vxTest/src/tmAudio.c	/^enum AUDIO_OPTION$/;"	g	file:
AUDIO_OUT_MASK	h/audioLibCore.h	/^#define AUDIO_OUT_MASK /;"	d
AUDIO_OUT_TYPES	vxTest/src/tmAudio.c	/^#define     AUDIO_OUT_TYPES /;"	d	file:
AUDIO_SET_BUFTIME	h/audioLibCore.h	/^#define AUDIO_SET_BUFTIME /;"	d
AUDIO_SET_DATA_INFO	h/audioLibCore.h	/^#define AUDIO_SET_DATA_INFO /;"	d
AUDIO_SET_PATH	h/audioLibCore.h	/^#define AUDIO_SET_PATH /;"	d
AUDIO_SET_VOLUME	h/audioLibCore.h	/^#define AUDIO_SET_VOLUME /;"	d
AUDIO_SPEAKER_OUT	h/audioLibCore.h	/^#define AUDIO_SPEAKER_OUT /;"	d
AUDIO_START	h/audioLibCore.h	/^#define AUDIO_START /;"	d
AUDIO_STATE	src/audioLibCore.c	/^    } AUDIO_STATE;$/;"	t	typeref:enum:audioState	file:
AUDIO_STATE_ACTIVE	src/audioLibCore.c	/^    AUDIO_STATE_ACTIVE$/;"	e	enum:audioState	file:
AUDIO_STATE_IDLE	src/audioLibCore.c	/^    AUDIO_STATE_IDLE = 0,$/;"	e	enum:audioState	file:
AUDIO_STOP	h/audioLibCore.h	/^#define AUDIO_STOP /;"	d
AUDIO_TASK_PRIORITY	src/audioLibCore.c	/^#define AUDIO_TASK_PRIORITY /;"	d	file:
AUDIO_TASK_STACK_SIZE	src/audioLibCore.c	/^#define AUDIO_TASK_STACK_SIZE /;"	d	file:
AUDIO_TEST_CARD_NAME	vxTest/src/tmAudioNew.h	/^#define AUDIO_TEST_CARD_NAME /;"	d
AUDIO_TEST_PCM_C_NAME	vxTest/src/tmAudioNew.c	/^#define AUDIO_TEST_PCM_C_NAME /;"	d	file:
AUDIO_TEST_PCM_C_NAME	vxTest/src/tmAudioNewLib.c	/^#define AUDIO_TEST_PCM_C_NAME /;"	d	file:
AUDIO_TEST_PCM_P_NAME	vxTest/src/tmAudioNew.c	/^#define AUDIO_TEST_PCM_P_NAME /;"	d	file:
AUDIO_TEST_PCM_P_NAME	vxTest/src/tmAudioNewLib.c	/^#define AUDIO_TEST_PCM_P_NAME /;"	d	file:
AUDIO_TIMEOUT	src/audioLibCore.c	/^#define AUDIO_TIMEOUT /;"	d	file:
AUDIO_VOLUME	h/audioLibCore.h	/^    } AUDIO_VOLUME;$/;"	t	typeref:struct:audioVolume
AUD_TEST_AUD_DMA_BUFF_SIZE	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_AUD_DMA_BUFF_SIZE /;"	d
AUD_TEST_CTRL_INFO_NUM	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_CTRL_INFO_NUM /;"	d
AUD_TEST_CTRL_MAX_NUM	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_CTRL_MAX_NUM /;"	d
AUD_TEST_DEV_NUM	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_DEV_NUM /;"	d
AUD_TEST_FORMAT	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_FORMAT /;"	d
AUD_TEST_F_HEAD	vxTest/src/tmAudioNew.h	/^    }AUD_TEST_F_HEAD;$/;"	t	typeref:enum:__anon75eec52c0103
AUD_TEST_PARA_UNKNOW	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_PARA_UNKNOW /;"	d
AUD_TEST_RECORD_CHANNEL	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_RECORD_CHANNEL /;"	d
AUD_TEST_RECORD_FACTOR	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_RECORD_FACTOR /;"	d
AUD_TEST_RECORD_SAMPLE_BIT	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_RECORD_SAMPLE_BIT /;"	d
AUD_TEST_RECORD_SAMPLE_RATE	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_RECORD_SAMPLE_RATE /;"	d
AUD_TEST_RECORD_SECOND	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_RECORD_SECOND /;"	d
AUD_TEST_RECORED_FILE	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_RECORED_FILE /;"	d
AUD_TEST_TLV_BUF_LEN	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_TLV_BUF_LEN /;"	d
AUD_TEST_WAV_FILE	vxTest/src/tmAudioNew.h	/^#define AUD_TEST_WAV_FILE /;"	d
AUTIO_TEST_CONTROL_NAME	vxTest/src/tmAudioNew.c	/^#define AUTIO_TEST_CONTROL_NAME /;"	d	file:
AUTIO_TEST_CONTROL_NAME	vxTest/src/tmAudioNewLib.c	/^#define AUTIO_TEST_CONTROL_NAME /;"	d	file:
BLOCKSIZE	vxTest/src/tmAudio.c	/^#define BLOCKSIZE /;"	d	file:
BUFFERSIZE	src/audioLibWav.c	/^#define BUFFERSIZE /;"	d	file:
BYTES_TO_FRAMES	src/pcm.c	/^#define BYTES_TO_FRAMES(/;"	d	file:
CONTAINER_OF	h/soc.h	/^#define CONTAINER_OF(/;"	d
C_EXCLUDE	vxTest/src/Makefile	/^C_EXCLUDE = $/;"	m
C_SOURCE	src/Makefile	/^C_SOURCE = audioLibCore.c audioLibWav.c$/;"	m
C_SOURCE	src/Makefile	/^C_SOURCE = audioLibWav.c$/;"	m
C_SOURCE	src/Makefile	/^C_SOURCE = vxSoundCore.c pcm.c soc.c control.c audioLibWav.c card.c vxSoundUtils.c$/;"	m
C_SOURCE	vxTest/src/Makefile	/^C_SOURCE = $(filter-out $(C_EXCLUDE),$(wildcard *.c))$/;"	m
DATA_CONVERT	src/audioLibCore.c	/^#define DATA_CONVERT(/;"	d	file:
DBG_ALL	vxTest/src/tmMachineDrv.c	/^#define DBG_ALL /;"	d	file:
DBG_ERR	vxTest/src/tmMachineDrv.c	/^#define DBG_ERR /;"	d	file:
DBG_INFO	vxTest/src/tmMachineDrv.c	/^#define DBG_INFO /;"	d	file:
DBG_IRQ	vxTest/src/tmMachineDrv.c	/^#define DBG_IRQ /;"	d	file:
DBG_OFF	vxTest/src/tmMachineDrv.c	/^#define DBG_OFF /;"	d	file:
DBG_VERB	vxTest/src/tmMachineDrv.c	/^#define DBG_VERB /;"	d	file:
DBG_WARN	vxTest/src/tmMachineDrv.c	/^#define DBG_WARN /;"	d	file:
DEBUG_VX_SND_PCM	src/pcm.c	/^#define DEBUG_VX_SND_PCM$/;"	d	file:
DEBUG_VX_SND_TEST	vxTest/src/tmAudioNew.h	/^#define DEBUG_VX_SND_TEST /;"	d
DECLARE_TLV_DB_SCALE	h/soc.h	/^#define DECLARE_TLV_DB_SCALE(/;"	d
DIRENT	vxTest/src/tmAudio.c	/^typedef struct dirent DIRENT;$/;"	t	typeref:struct:dirent	file:
DISKSIZE	vxTest/src/tmAudio.c	/^#define DISKSIZE /;"	d	file:
ELEMENTS	vxTest/src/tmMachineDrv.c	/^#define ELEMENTS(/;"	d	file:
EXCLUDE_DIRS	vxTest/src/Makefile	/^EXCLUDE_DIRS = tmp$/;"	m
EXT_FILE_HEADER	src/audioLibWav.c	/^    } EXT_FILE_HEADER;$/;"	t	typeref:struct:extFileHeader	file:
EXT_WAVE_FORMAT	src/audioLibWav.c	/^    } EXT_WAVE_FORMAT;$/;"	t	typeref:struct:extWaveFormat	file:
FILE_HEAD_BOTT	vxTest/src/tmAudioNew.h	/^    FILE_HEAD_BOTT$/;"	e	enum:__anon75eec52c0103
FILE_HEAD_OPT0	vxTest/src/tmAudioNew.h	/^    FILE_HEAD_OPT0 = 0,$/;"	e	enum:__anon75eec52c0103
FILE_HEAD_OPT1	vxTest/src/tmAudioNew.h	/^    FILE_HEAD_OPT1,$/;"	e	enum:__anon75eec52c0103
FILE_HEAD_OPT2	vxTest/src/tmAudioNew.h	/^    FILE_HEAD_OPT2,$/;"	e	enum:__anon75eec52c0103
FILE_HEAD_OPT3	vxTest/src/tmAudioNew.h	/^    FILE_HEAD_OPT3,$/;"	e	enum:__anon75eec52c0103
FOR_EACH_CARD_COMPONENTS	h/soc.h	/^#define FOR_EACH_CARD_COMPONENTS(/;"	d
FOR_EACH_CARD_CTRLS	h/control.h	/^#define FOR_EACH_CARD_CTRLS(/;"	d
FOR_EACH_CARD_PRELINKS	h/soc.h	/^#define FOR_EACH_CARD_PRELINKS(/;"	d
FOR_EACH_COMPONENT	src/card.c	/^#define FOR_EACH_COMPONENT(/;"	d	file:
FOR_EACH_COMPONENT_DAIS	src/card.c	/^#define FOR_EACH_COMPONENT_DAIS(/;"	d	file:
FOR_EACH_PCM_STREAMS	h/soc.h	/^#define FOR_EACH_PCM_STREAMS(/;"	d
FOR_EACH_RUNTIME_CODEC_DAIS	h/soc.h	/^#define FOR_EACH_RUNTIME_CODEC_DAIS(/;"	d
FOR_EACH_RUNTIME_COMPONENTS	h/soc.h	/^#define FOR_EACH_RUNTIME_COMPONENTS(/;"	d
FOR_EACH_RUNTIME_CPU_DAIS	h/soc.h	/^#define FOR_EACH_RUNTIME_CPU_DAIS(/;"	d
FOR_EACH_RUNTIME_DAIS	h/soc.h	/^#define FOR_EACH_RUNTIME_DAIS(/;"	d
FOR_EACH_SOC_BE_RTD	h/soc.h	/^#define FOR_EACH_SOC_BE_RTD(/;"	d
FOR_EACH_SOC_CARD_RUNTIME	h/soc.h	/^#define FOR_EACH_SOC_CARD_RUNTIME(/;"	d
FRAMES_TO_BYTES	src/pcm.c	/^#define FRAMES_TO_BYTES(/;"	d	file:
HW_PARAM_INTERVAL_IDX	h/vxSoundCore.h	/^    } HW_PARAM_INTERVAL_IDX;$/;"	t	typeref:enum:hwParamIntervalIdx
INVALID_CTL_NUMID	h/control.h	/^#define INVALID_CTL_NUMID /;"	d
IS_FRAME_ALIGNED	src/pcm.c	/^#define IS_FRAME_ALIGNED(/;"	d	file:
KERNEL_TEST_OBJS	vxTest/src/Makefile	/^KERNEL_TEST_OBJS = $(C_SOURCE:.c=.o)$/;"	m
LIB_BASE_NAME	src/Makefile	/^LIB_BASE_NAME = audioLib$/;"	m
LIB_BASE_NAME	src/Makefile	/^LIB_BASE_NAME = vxSoundLib$/;"	m
LIB_BASE_NAME	vxTest/src/Makefile	/^LIB_BASE_NAME = vxTest_UI_LIB$/;"	m
LIB_FORMAT	src/Makefile	/^LIB_FORMAT = both$/;"	m
MAD_AD	vxTest/src/tmAudio.c	/^#define MAD_AD /;"	d	file:
MEMLFBYTE	src/audioLibWav.c	/^#define MEMLFBYTE(/;"	d	file:
MEMLFBYTE	vxTest/src/tmAudioNew.h	/^#define MEMLFBYTE(/;"	d
MEMLNBYTE	src/audioLibWav.c	/^#define MEMLNBYTE(/;"	d	file:
MEMLNBYTE	vxTest/src/tmAudioNew.h	/^#define MEMLNBYTE(/;"	d
MEMLSBYTE	src/audioLibWav.c	/^#define MEMLSBYTE(/;"	d	file:
MEMLSBYTE	vxTest/src/tmAudioNew.h	/^#define MEMLSBYTE(/;"	d
MEMLTBYTE	src/audioLibWav.c	/^#define MEMLTBYTE(/;"	d	file:
MEMLTBYTE	vxTest/src/tmAudioNew.h	/^#define MEMLTBYTE(/;"	d
MEMLWORD	src/audioLibWav.c	/^#define MEMLWORD(/;"	d	file:
MEMLWORD	vxTest/src/tmAudioNew.h	/^#define MEMLWORD(/;"	d
MEMMWORD	src/audioLibWav.c	/^#define MEMMWORD(/;"	d	file:
MEMMWORD	vxTest/src/tmAudioNew.h	/^#define MEMMWORD(/;"	d
MEM_SWAP_LONG	src/audioLibWav.c	/^#define MEM_SWAP_LONG(/;"	d	file:
MEM_SWAP_LONG	vxTest/src/tmAudioNew.h	/^#define MEM_SWAP_LONG(/;"	d
MEM_SWAP_WORD	src/audioLibWav.c	/^#define MEM_SWAP_WORD(/;"	d	file:
MEM_SWAP_WORD	vxTest/src/tmAudioNew.h	/^#define MEM_SWAP_WORD(/;"	d
MIN	vxTest/src/tmAudio.c	/^#define     MIN(/;"	d	file:
MIXER_CTRL_IS_STEREO	h/soc.h	/^#define MIXER_CTRL_IS_STEREO(/;"	d
OBJS	vxTest/src/Makefile	/^OBJS = $(C_SOURCE:.c=.o)$/;"	m
OPTION_BLOCK	vxTest/src/tmAudio.c	/^    OPTION_BLOCK = 1,$/;"	e	enum:AUDIO_OPTION	file:
OPTION_SAMPLEBITS	vxTest/src/tmAudio.c	/^    OPTION_SAMPLEBITS$/;"	e	enum:AUDIO_OPTION	file:
OPTION_SAMPLERATE	vxTest/src/tmAudio.c	/^    OPTION_SAMPLERATE,$/;"	e	enum:AUDIO_OPTION	file:
PAGE_SIZE	src/vxSoundUtils.c	/^#define PAGE_SIZE /;"	d	file:
PARAMS_ACCESS	h/pcm.h	/^#define PARAMS_ACCESS(/;"	d
PARAMS_BUFFER_BYTES	h/pcm.h	/^#define PARAMS_BUFFER_BYTES(/;"	d
PARAMS_CHANNELS	h/pcm.h	/^#define PARAMS_CHANNELS(/;"	d
PARAMS_FORMAT	h/pcm.h	/^#define PARAMS_FORMAT(/;"	d
PARAMS_PERIODS	h/pcm.h	/^#define PARAMS_PERIODS(/;"	d
PARAMS_PERIOD_BYTES	h/pcm.h	/^#define PARAMS_PERIOD_BYTES(/;"	d
PARAMS_RATE	h/pcm.h	/^#define PARAMS_RATE(/;"	d
PARAMS_WIDTH	h/pcm.h	/^#define PARAMS_WIDTH(/;"	d
PCM_BUF_DIV_FACTOR	src/pcm.c	/^#define PCM_BUF_DIV_FACTOR /;"	d	file:
PCM_FILE_HEADER	src/audioLibWav.c	/^    } PCM_FILE_HEADER;$/;"	t	typeref:struct:pcmFileHeader	file:
PCM_WAVE_FORMAT	src/audioLibWav.c	/^    } PCM_WAVE_FORMAT;$/;"	t	typeref:struct:pcmWaveFormat	file:
RAMDIR	vxTest/src/tmAudio.c	/^#define RAMDIR /;"	d	file:
RTP_TEST_OBJS	vxTest/src/Makefile	/^RTP_TEST_OBJS = $(C_SOURCE:.c=.o)$/;"	m
SDA_DISABLE	vxTest/src/Makefile	/^SDA_DISABLE = TRUE$/;"	m
SEPARATOR	vxTest/src/tmAudio.c	/^#define SEPARATOR /;"	d	file:
SNDRV_CTL_DATA_TYPE_MAX	h/control.h	/^    SNDRV_CTL_DATA_TYPE_MAX,$/;"	e	enum:vxSndCtrlDataType
SNDRV_CTL_ELEM_ACCESS_VOLATILE	h/control.h	/^#define SNDRV_CTL_ELEM_ACCESS_VOLATILE /;"	d
SNDRV_CTL_TLVT_CONTAINER	h/soc.h	/^#define SNDRV_CTL_TLVT_CONTAINER /;"	d
SNDRV_CTL_TLVT_DB_LINEAR	h/soc.h	/^#define SNDRV_CTL_TLVT_DB_LINEAR /;"	d
SNDRV_CTL_TLVT_DB_MINMAX	h/soc.h	/^#define SNDRV_CTL_TLVT_DB_MINMAX /;"	d
SNDRV_CTL_TLVT_DB_MINMAX_MUTE	h/soc.h	/^#define SNDRV_CTL_TLVT_DB_MINMAX_MUTE /;"	d
SNDRV_CTL_TLVT_DB_RANGE	h/soc.h	/^#define SNDRV_CTL_TLVT_DB_RANGE /;"	d
SNDRV_CTL_TLVT_DB_SCALE	h/soc.h	/^#define SNDRV_CTL_TLVT_DB_SCALE /;"	d
SNDRV_CTL_TLV_CONTAINER	h/control.h	/^#define SNDRV_CTL_TLV_CONTAINER /;"	d
SNDRV_CTL_TLV_DB_LINEAR	h/control.h	/^#define SNDRV_CTL_TLV_DB_LINEAR /;"	d
SNDRV_CTL_TLV_DB_MINMAX	h/control.h	/^#define SNDRV_CTL_TLV_DB_MINMAX /;"	d
SNDRV_CTL_TLV_DB_MINMAX_MUTE	h/control.h	/^#define SNDRV_CTL_TLV_DB_MINMAX_MUTE /;"	d
SNDRV_CTL_TLV_DB_RANGE	h/control.h	/^#define SNDRV_CTL_TLV_DB_RANGE /;"	d
SNDRV_CTL_TLV_DB_SCALE	h/control.h	/^#define SNDRV_CTL_TLV_DB_SCALE /;"	d
SNDRV_CTL_TYPE_CARD	h/control.h	/^    SNDRV_CTL_TYPE_CARD = 0,$/;"	e	enum:vxSndCtrlType
SNDRV_CTL_TYPE_HWDEP	h/control.h	/^    SNDRV_CTL_TYPE_HWDEP,$/;"	e	enum:vxSndCtrlType
SNDRV_CTL_TYPE_MIXER	h/control.h	/^    SNDRV_CTL_TYPE_MIXER,$/;"	e	enum:vxSndCtrlType
SNDRV_CTL_TYPE_PCM	h/control.h	/^    SNDRV_CTL_TYPE_PCM,$/;"	e	enum:vxSndCtrlType
SNDRV_CTL_TYPE_TYPE_MAX	h/control.h	/^    SNDRV_CTL_TYPE_TYPE_MAX,$/;"	e	enum:vxSndCtrlType
SNDRV_DEFAULT_IDX1	src/card.c	/^#define SNDRV_DEFAULT_IDX1 /;"	d	file:
SNDRV_DEFAULT_STR1	src/card.c	/^#define SNDRV_DEFAULT_STR1 /;"	d	file:
SNDRV_PCM_ACCESS_INTERLEAVED	h/vxSoundCore.h	/^#define SNDRV_PCM_ACCESS_INTERLEAVED /;"	d
SNDRV_PCM_ACCESS_MMAP	h/vxSoundCore.h	/^#define SNDRV_PCM_ACCESS_MMAP /;"	d
SNDRV_PCM_ACCESS_MMAP_VALID	h/vxSoundCore.h	/^#define SNDRV_PCM_ACCESS_MMAP_VALID /;"	d
SNDRV_PCM_ACCESS_NONINTERLEAVED	h/vxSoundCore.h	/^#define SNDRV_PCM_ACCESS_NONINTERLEAVED /;"	d
SNDRV_PCM_ALL_RATES_MASK	h/pcm.h	/^#define SNDRV_PCM_ALL_RATES_MASK /;"	d
SNDRV_PCM_IOCTL1_CHANNEL_INFO	h/vxSoundCore.h	/^    SNDRV_PCM_IOCTL1_CHANNEL_INFO,$/;"	e	enum:sndPcmSubstreamIoctlCmd
SNDRV_PCM_IOCTL1_FIFO_SIZE	h/vxSoundCore.h	/^    SNDRV_PCM_IOCTL1_FIFO_SIZE,$/;"	e	enum:sndPcmSubstreamIoctlCmd
SNDRV_PCM_IOCTL1_RESERVED_1	h/vxSoundCore.h	/^    SNDRV_PCM_IOCTL1_RESERVED_1,$/;"	e	enum:sndPcmSubstreamIoctlCmd
SNDRV_PCM_IOCTL1_RESERVED_2	h/vxSoundCore.h	/^    SNDRV_PCM_IOCTL1_RESERVED_2,$/;"	e	enum:sndPcmSubstreamIoctlCmd
SNDRV_PCM_IOCTL1_RESET	h/vxSoundCore.h	/^    SNDRV_PCM_IOCTL1_RESET= 0,$/;"	e	enum:sndPcmSubstreamIoctlCmd
SNDRV_PCM_PTR_XRUN	h/vxSoundCore.h	/^#define SNDRV_PCM_PTR_XRUN /;"	d
SNDRV_PCM_RATE_11025	h/pcm.h	/^#define SNDRV_PCM_RATE_11025 /;"	d
SNDRV_PCM_RATE_16000	h/pcm.h	/^#define SNDRV_PCM_RATE_16000 /;"	d
SNDRV_PCM_RATE_176400	h/pcm.h	/^#define SNDRV_PCM_RATE_176400 /;"	d
SNDRV_PCM_RATE_192000	h/pcm.h	/^#define SNDRV_PCM_RATE_192000 /;"	d
SNDRV_PCM_RATE_22050	h/pcm.h	/^#define SNDRV_PCM_RATE_22050 /;"	d
SNDRV_PCM_RATE_32000	h/pcm.h	/^#define SNDRV_PCM_RATE_32000 /;"	d
SNDRV_PCM_RATE_352800	h/pcm.h	/^#define SNDRV_PCM_RATE_352800 /;"	d
SNDRV_PCM_RATE_384000	h/pcm.h	/^#define SNDRV_PCM_RATE_384000 /;"	d
SNDRV_PCM_RATE_44100	h/pcm.h	/^#define SNDRV_PCM_RATE_44100 /;"	d
SNDRV_PCM_RATE_48000	h/pcm.h	/^#define SNDRV_PCM_RATE_48000 /;"	d
SNDRV_PCM_RATE_5512	h/pcm.h	/^#define SNDRV_PCM_RATE_5512 /;"	d
SNDRV_PCM_RATE_64000	h/pcm.h	/^#define SNDRV_PCM_RATE_64000 /;"	d
SNDRV_PCM_RATE_8000	h/pcm.h	/^#define SNDRV_PCM_RATE_8000 /;"	d
SNDRV_PCM_RATE_8000_192000	h/pcm.h	/^#define SNDRV_PCM_RATE_8000_192000 /;"	d
SNDRV_PCM_RATE_8000_384000	h/pcm.h	/^#define SNDRV_PCM_RATE_8000_384000 /;"	d
SNDRV_PCM_RATE_8000_44100	h/pcm.h	/^#define SNDRV_PCM_RATE_8000_44100 /;"	d
SNDRV_PCM_RATE_8000_48000	h/pcm.h	/^#define SNDRV_PCM_RATE_8000_48000 /;"	d
SNDRV_PCM_RATE_8000_96000	h/pcm.h	/^#define SNDRV_PCM_RATE_8000_96000 /;"	d
SNDRV_PCM_RATE_88200	h/pcm.h	/^#define SNDRV_PCM_RATE_88200 /;"	d
SNDRV_PCM_RATE_96000	h/pcm.h	/^#define SNDRV_PCM_RATE_96000 /;"	d
SNDRV_PCM_RATE_CONTINUOUS	h/pcm.h	/^#define SNDRV_PCM_RATE_CONTINUOUS /;"	d
SNDRV_PCM_RATE_KNOT	h/pcm.h	/^#define SNDRV_PCM_RATE_KNOT /;"	d
SNDRV_PCM_STREAM_CAPTURE	h/vxSoundCore.h	/^    SNDRV_PCM_STREAM_CAPTURE,$/;"	e	enum:streamDirect
SNDRV_PCM_STREAM_MAX	h/vxSoundCore.h	/^    SNDRV_PCM_STREAM_MAX,$/;"	e	enum:streamDirect
SNDRV_PCM_STREAM_PLAYBACK	h/vxSoundCore.h	/^    SNDRV_PCM_STREAM_PLAYBACK = 0,$/;"	e	enum:streamDirect
SNDRV_PCM_SUBSTREAM_DISCONNECTED	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_DISCONNECTED,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_SUBSTREAM_DRAINING	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_DRAINING,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_SUBSTREAM_LAST	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_LAST,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_SUBSTREAM_OPEN	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_OPEN = 0,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_SUBSTREAM_PAUSED	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_PAUSED,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_SUBSTREAM_PREPARED	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_PREPARED,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_SUBSTREAM_RUNNING	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_RUNNING,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_SUBSTREAM_SETUP	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_SETUP,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_SUBSTREAM_SUSPENDED	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_SUSPENDED,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_SUBSTREAM_XRUN	h/vxSoundCore.h	/^    SNDRV_PCM_SUBSTREAM_XRUN,$/;"	e	enum:sndPcmSubstreamState
SNDRV_PCM_TRIGGER_DRAIN	h/vxSoundCore.h	/^    SNDRV_PCM_TRIGGER_DRAIN,$/;"	e	enum:sndPcmTriggerState
SNDRV_PCM_TRIGGER_PAUSE_PUSH	h/vxSoundCore.h	/^    SNDRV_PCM_TRIGGER_PAUSE_PUSH,$/;"	e	enum:sndPcmTriggerState
SNDRV_PCM_TRIGGER_PAUSE_RELEASE	h/vxSoundCore.h	/^    SNDRV_PCM_TRIGGER_PAUSE_RELEASE,$/;"	e	enum:sndPcmTriggerState
SNDRV_PCM_TRIGGER_START	h/vxSoundCore.h	/^    SNDRV_PCM_TRIGGER_START,$/;"	e	enum:sndPcmTriggerState
SNDRV_PCM_TRIGGER_STOP	h/vxSoundCore.h	/^    SNDRV_PCM_TRIGGER_STOP = 0,$/;"	e	enum:sndPcmTriggerState
SND_CARD	h/vxSoundCore.h	/^    } SND_CARD;$/;"	t	typeref:struct:vxSoundCard
SND_CONTROL_DEV	h/vxSoundCore.h	/^    } SND_CONTROL_DEV;$/;"	t	typeref:struct:vxSndCtrlDev
SND_CORE_DBG	src/vxSoundCore.c	/^#define SND_CORE_DBG(/;"	d	file:
SND_CORE_ERR	src/vxSoundCore.c	/^#define SND_CORE_ERR(/;"	d	file:
SND_CORE_INFO	src/vxSoundCore.c	/^#define SND_CORE_INFO(/;"	d	file:
SND_CORE_MODE_INFO	src/vxSoundCore.c	/^#define SND_CORE_MODE_INFO(/;"	d	file:
SND_CTRL_DBG	src/control.c	/^#define SND_CTRL_DBG(/;"	d	file:
SND_CTRL_ERR	src/control.c	/^#define SND_CTRL_ERR(/;"	d	file:
SND_CTRL_INFO	src/control.c	/^#define SND_CTRL_INFO(/;"	d	file:
SND_CTRL_MODE_INFO	src/control.c	/^#define SND_CTRL_MODE_INFO(/;"	d	file:
SND_DEVICE	h/vxSoundCore.h	/^    } SND_DEVICE;$/;"	t	typeref:struct:vxSndDevice
SND_DEV_NAME_LEN	h/vxSoundCore.h	/^#define SND_DEV_NAME_LEN /;"	d
SND_DEV_PREFIX	h/vxSoundCore.h	/^#define SND_DEV_PREFIX /;"	d
SND_DEV_REG_PTR	h/vxSoundCore.h	/^typedef STATUS (*SND_DEV_REG_PTR) (struct vxSndDevice * sndDev);$/;"	t	typeref:typename:STATUS (*)(struct vxSndDevice * sndDev)
SND_FRAMES_S_T	h/vxSoundCore.h	/^typedef signed long SND_FRAMES_S_T;$/;"	t	typeref:typename:signed long
SND_FRAMES_T	h/vxSoundCore.h	/^typedef signed long SND_FRAMES_T;$/;"	t	typeref:typename:signed long
SND_FRAMES_U_T	h/vxSoundCore.h	/^typedef unsigned long SND_FRAMES_U_T;$/;"	t	typeref:typename:unsigned long
SND_INTERVAL_EMPTY	src/pcm.c	/^#define SND_INTERVAL_EMPTY(/;"	d	file:
SND_PCM_DBG	src/pcm.c	/^#define SND_PCM_DBG(/;"	d	file:
SND_PCM_ERR	src/pcm.c	/^#define SND_PCM_ERR(/;"	d	file:
SND_PCM_INFO	src/pcm.c	/^#define SND_PCM_INFO(/;"	d	file:
SND_PCM_MODE_INFO	src/pcm.c	/^#define SND_PCM_MODE_INFO(/;"	d	file:
SND_PCM_STREAM	h/vxSoundCore.h	/^    } SND_PCM_STREAM;$/;"	t	typeref:struct:vxSndPcmStream
SND_PCM_SUBSTREAM	h/vxSoundCore.h	/^    } SND_PCM_SUBSTREAM;$/;"	t	typeref:struct:vxSndPcmSubStream
SND_PCM_SUBSTREAM_IOCTL_CMD	h/vxSoundCore.h	/^    } SND_PCM_SUBSTREAM_IOCTL_CMD;$/;"	t	typeref:enum:sndPcmSubstreamIoctlCmd
SND_PCM_SUBSTREAM_STATE	h/vxSoundCore.h	/^    } SND_PCM_SUBSTREAM_STATE;$/;"	t	typeref:enum:sndPcmSubstreamState
SND_PCM_TIMEOUT	src/pcm.c	/^#define SND_PCM_TIMEOUT /;"	d	file:
SND_PCM_TRIGGER_STATE	h/vxSoundCore.h	/^    } SND_PCM_TRIGGER_STATE;$/;"	t	typeref:enum:sndPcmTriggerState
SND_SOC_BIAS_OFF	h/soc.h	/^    SND_SOC_BIAS_OFF = 0,$/;"	e	enum:vxSndSocBiasLevel
SND_SOC_BIAS_ON	h/soc.h	/^    SND_SOC_BIAS_ON,$/;"	e	enum:vxSndSocBiasLevel
SND_SOC_BIAS_PREPARE	h/soc.h	/^    SND_SOC_BIAS_PREPARE,$/;"	e	enum:vxSndSocBiasLevel
SND_SOC_BIAS_STANDBY	h/soc.h	/^    SND_SOC_BIAS_STANDBY,$/;"	e	enum:vxSndSocBiasLevel
SND_SOC_COMP_ORDER_EARLY	h/soc.h	/^#define SND_SOC_COMP_ORDER_EARLY /;"	d
SND_SOC_COMP_ORDER_FIRST	h/soc.h	/^#define SND_SOC_COMP_ORDER_FIRST /;"	d
SND_SOC_COMP_ORDER_LAST	h/soc.h	/^#define SND_SOC_COMP_ORDER_LAST /;"	d
SND_SOC_COMP_ORDER_LATE	h/soc.h	/^#define SND_SOC_COMP_ORDER_LATE /;"	d
SND_SOC_COMP_ORDER_NORMAL	h/soc.h	/^#define SND_SOC_COMP_ORDER_NORMAL /;"	d
SND_SOC_DAIFMT_AC97	h/soc.h	/^#define SND_SOC_DAIFMT_AC97 /;"	d
SND_SOC_DAIFMT_CBC_CFC	h/soc.h	/^#define SND_SOC_DAIFMT_CBC_CFC /;"	d
SND_SOC_DAIFMT_CBC_CFP	h/soc.h	/^#define SND_SOC_DAIFMT_CBC_CFP /;"	d
SND_SOC_DAIFMT_CBM_CFM	h/soc.h	/^#define SND_SOC_DAIFMT_CBM_CFM /;"	d
SND_SOC_DAIFMT_CBM_CFS	h/soc.h	/^#define SND_SOC_DAIFMT_CBM_CFS /;"	d
SND_SOC_DAIFMT_CBP_CFC	h/soc.h	/^#define SND_SOC_DAIFMT_CBP_CFC /;"	d
SND_SOC_DAIFMT_CBP_CFP	h/soc.h	/^#define SND_SOC_DAIFMT_CBP_CFP /;"	d
SND_SOC_DAIFMT_CBS_CFM	h/soc.h	/^#define SND_SOC_DAIFMT_CBS_CFM /;"	d
SND_SOC_DAIFMT_CBS_CFS	h/soc.h	/^#define SND_SOC_DAIFMT_CBS_CFS /;"	d
SND_SOC_DAIFMT_CLOCK_MASK	h/soc.h	/^#define SND_SOC_DAIFMT_CLOCK_MASK /;"	d
SND_SOC_DAIFMT_CLOCK_PROVIDER_MASK	h/soc.h	/^#define SND_SOC_DAIFMT_CLOCK_PROVIDER_MASK /;"	d
SND_SOC_DAIFMT_DSP_A	h/soc.h	/^#define SND_SOC_DAIFMT_DSP_A /;"	d
SND_SOC_DAIFMT_DSP_B	h/soc.h	/^#define SND_SOC_DAIFMT_DSP_B /;"	d
SND_SOC_DAIFMT_FORMAT_MASK	h/soc.h	/^#define SND_SOC_DAIFMT_FORMAT_MASK /;"	d
SND_SOC_DAIFMT_I2S	h/soc.h	/^#define SND_SOC_DAIFMT_I2S /;"	d
SND_SOC_DAIFMT_IB_IF	h/soc.h	/^#define SND_SOC_DAIFMT_IB_IF /;"	d
SND_SOC_DAIFMT_IB_NF	h/soc.h	/^#define SND_SOC_DAIFMT_IB_NF /;"	d
SND_SOC_DAIFMT_INV_MASK	h/soc.h	/^#define SND_SOC_DAIFMT_INV_MASK /;"	d
SND_SOC_DAIFMT_LEFT_J	h/soc.h	/^#define SND_SOC_DAIFMT_LEFT_J /;"	d
SND_SOC_DAIFMT_MASTER_MASK	h/soc.h	/^#define SND_SOC_DAIFMT_MASTER_MASK /;"	d
SND_SOC_DAIFMT_NB_IF	h/soc.h	/^#define SND_SOC_DAIFMT_NB_IF /;"	d
SND_SOC_DAIFMT_NB_NF	h/soc.h	/^#define SND_SOC_DAIFMT_NB_NF /;"	d
SND_SOC_DAIFMT_PDM	h/soc.h	/^#define SND_SOC_DAIFMT_PDM /;"	d
SND_SOC_DAIFMT_RIGHT_J	h/soc.h	/^#define SND_SOC_DAIFMT_RIGHT_J /;"	d
SND_SOC_DAI_INITC	vxTest/src/tmMachineDrv.c	/^#define SND_SOC_DAI_INITC(/;"	d	file:
SND_SOC_DAI_INITL	vxTest/src/tmMachineDrv.c	/^#define SND_SOC_DAI_INITL(/;"	d	file:
SND_SOC_DAI_INITP	vxTest/src/tmMachineDrv.c	/^#define SND_SOC_DAI_INITP(/;"	d	file:
SND_SOC_DAI_INITR	vxTest/src/tmMachineDrv.c	/^#define SND_SOC_DAI_INITR(/;"	d	file:
SND_SOC_DAI_INITU	vxTest/src/tmMachineDrv.c	/^#define SND_SOC_DAI_INITU(/;"	d	file:
SND_SOC_DAI_INITW	vxTest/src/tmMachineDrv.c	/^#define SND_SOC_DAI_INITW(/;"	d	file:
SND_SOC_DBG	src/card.c	/^#define SND_SOC_DBG(/;"	d	file:
SND_SOC_DBG	src/soc.c	/^#define SND_SOC_DBG(/;"	d	file:
SND_SOC_DPCM_STATE_CLOSE	h/soc.h	/^    SND_SOC_DPCM_STATE_CLOSE,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_STATE_HW_FREE	h/soc.h	/^    SND_SOC_DPCM_STATE_HW_FREE,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_STATE_HW_PARAMS	h/soc.h	/^    SND_SOC_DPCM_STATE_HW_PARAMS,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_STATE_NEW	h/soc.h	/^    SND_SOC_DPCM_STATE_NEW = 0,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_STATE_OPEN	h/soc.h	/^    SND_SOC_DPCM_STATE_OPEN,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_STATE_PAUSED	h/soc.h	/^    SND_SOC_DPCM_STATE_PAUSED,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_STATE_PREPARE	h/soc.h	/^    SND_SOC_DPCM_STATE_PREPARE,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_STATE_START	h/soc.h	/^    SND_SOC_DPCM_STATE_START,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_STATE_STOP	h/soc.h	/^    SND_SOC_DPCM_STATE_STOP,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_STATE_SUSPEND	h/soc.h	/^    SND_SOC_DPCM_STATE_SUSPEND,$/;"	e	enum:snd_soc_dpcm_state
SND_SOC_DPCM_TRIGGER_BESPOKE	h/soc.h	/^    SND_SOC_DPCM_TRIGGER_BESPOKE,$/;"	e	enum:snd_soc_dpcm_trigger
SND_SOC_DPCM_TRIGGER_POST	h/soc.h	/^    SND_SOC_DPCM_TRIGGER_POST,$/;"	e	enum:snd_soc_dpcm_trigger
SND_SOC_DPCM_TRIGGER_PRE	h/soc.h	/^    SND_SOC_DPCM_TRIGGER_PRE = 0,$/;"	e	enum:snd_soc_dpcm_trigger
SND_SOC_DPCM_UPDATE_BE	h/soc.h	/^    SND_SOC_DPCM_UPDATE_BE,$/;"	e	enum:snd_soc_dpcm_update
SND_SOC_DPCM_UPDATE_FE	h/soc.h	/^    SND_SOC_DPCM_UPDATE_FE,$/;"	e	enum:snd_soc_dpcm_update
SND_SOC_DPCM_UPDATE_NO	h/soc.h	/^    SND_SOC_DPCM_UPDATE_NO = 0,$/;"	e	enum:snd_soc_dpcm_update
SND_SOC_DUMMY_CODEC_COMPT_NAME	h/soc.h	/^#define SND_SOC_DUMMY_CODEC_COMPT_NAME /;"	d
SND_SOC_DUMMY_CODEC_DAI_DRV_NAME	h/soc.h	/^#define SND_SOC_DUMMY_CODEC_DAI_DRV_NAME /;"	d
SND_SOC_ERR	src/card.c	/^#define SND_SOC_ERR(/;"	d	file:
SND_SOC_ERR	src/soc.c	/^#define SND_SOC_ERR(/;"	d	file:
SND_SOC_INFO	src/card.c	/^#define SND_SOC_INFO(/;"	d	file:
SND_SOC_INFO	src/soc.c	/^#define SND_SOC_INFO(/;"	d	file:
SND_SOC_MODE_INFO	src/card.c	/^#define SND_SOC_MODE_INFO(/;"	d	file:
SND_SOC_MODE_INFO	src/soc.c	/^#define SND_SOC_MODE_INFO(/;"	d	file:
SND_SOC_NOPM	h/soc.h	/^#define SND_SOC_NOPM /;"	d
SOC_DOUBLE_VALUE	h/soc.h	/^#define SOC_DOUBLE_VALUE(/;"	d
SOC_ENUM	h/soc.h	/^#define SOC_ENUM(/;"	d
SOC_ENUM_DOUBLE	h/soc.h	/^#define SOC_ENUM_DOUBLE(/;"	d
SOC_ENUM_DOUBLE_DECL	h/soc.h	/^#define SOC_ENUM_DOUBLE_DECL(/;"	d
SOC_ENUM_EXT	h/soc.h	/^#define SOC_ENUM_EXT(/;"	d
SOC_ENUM_SINGLE	h/soc.h	/^#define SOC_ENUM_SINGLE(/;"	d
SOC_ENUM_SINGLE_DECL	h/soc.h	/^#define SOC_ENUM_SINGLE_DECL(/;"	d
SOC_ENUM_SINGLE_EXT	h/soc.h	/^#define SOC_ENUM_SINGLE_EXT(/;"	d
SOC_ENUM_SINGLE_EXT_DECL	h/soc.h	/^#define SOC_ENUM_SINGLE_EXT_DECL(/;"	d
SOC_GET_SUBSTREAM_FROM_RTD	h/soc.h	/^#define SOC_GET_SUBSTREAM_FROM_RTD(/;"	d
SOC_RTD_TO_CODEC	h/soc.h	/^#define SOC_RTD_TO_CODEC(/;"	d
SOC_RTD_TO_CPU	h/soc.h	/^#define SOC_RTD_TO_CPU(/;"	d
SOC_SINGLE	h/soc.h	/^#define SOC_SINGLE(/;"	d
SOC_SINGLE_TLV	h/soc.h	/^#define SOC_SINGLE_TLV(/;"	d
SOC_SINGLE_VALUE	h/soc.h	/^#define SOC_SINGLE_VALUE(/;"	d
SOC_VALUE_ENUM_DOUBLE	h/soc.h	/^#define SOC_VALUE_ENUM_DOUBLE(/;"	d
SOC_VALUE_ENUM_EXT	h/soc.h	/^#define SOC_VALUE_ENUM_EXT(/;"	d
SOC_VALUE_ENUM_SINGLE	h/soc.h	/^#define SOC_VALUE_ENUM_SINGLE(/;"	d
STREAM_DIRECT	h/vxSoundCore.h	/^    } STREAM_DIRECT;$/;"	t	typeref:enum:streamDirect
STREAM_DIRECTION	src/pcm.c	/^#define STREAM_DIRECTION(/;"	d	file:
STUB_FORMATS	src/vxSoundUtils.c	/^#define STUB_FORMATS	/;"	d	file:
STUB_RATES	src/vxSoundUtils.c	/^#define STUB_RATES	/;"	d	file:
SUBDIRS	vxTest/src/Makefile	/^SUBDIRS = $(filter-out $(EXCLUDE_DIRS),$(basename $(patsubst .\/%,%,$(shell find . -maxdepth 1 -/;"	m
SUBSTREAM_IS_RUNNING	src/pcm.c	/^#define SUBSTREAM_IS_RUNNING(/;"	d	file:
SUBSTREAM_RUNTIME_CHECK	src/pcm.c	/^#define SUBSTREAM_RUNTIME_CHECK(/;"	d	file:
SetBitCountGet	src/soc.c	/^LOCAL uint32_t SetBitCountGet$/;"	f	typeref:typename:LOCAL uint32_t
SndDummyMethodList	src/vxSoundUtils.c	/^LOCAL VXB_DRV_METHOD SndDummyMethodList[] =$/;"	v	typeref:typename:LOCAL VXB_DRV_METHOD[]
TEST_AUDIO_INFO	vxTest/src/tmAudioNew.h	/^    }TEST_AUDIO_INFO;$/;"	t	typeref:struct:audioInfo
TEST_AUD_DATA_INFO	vxTest/src/tmAudioNew.h	/^    } TEST_AUD_DATA_INFO;$/;"	t	typeref:struct:tmAudioDataInfo
TEST_AUD_DBG	vxTest/src/tmAudioNew.h	/^#define TEST_AUD_DBG(/;"	d
TEST_AUD_ERR	vxTest/src/tmAudioNew.h	/^#define TEST_AUD_ERR(/;"	d
TEST_AUD_INFO	vxTest/src/tmAudioNew.h	/^#define TEST_AUD_INFO(/;"	d
TEST_AUD_MODE_INFO	vxTest/src/tmAudioNew.h	/^#define TEST_AUD_MODE_INFO(/;"	d
TEST_CH1_VOL_CTRL	vxTest/src/tmAudioNewLib.c	/^#define TEST_CH1_VOL_CTRL /;"	d	file:
TEST_CH2_VOL_CTRL	vxTest/src/tmAudioNewLib.c	/^#define TEST_CH2_VOL_CTRL /;"	d	file:
TEST_CH3_VOL_CTRL	vxTest/src/tmAudioNewLib.c	/^#define TEST_CH3_VOL_CTRL /;"	d	file:
TEST_CH4_VOL_CTRL	vxTest/src/tmAudioNewLib.c	/^#define TEST_CH4_VOL_CTRL /;"	d	file:
TEST_CTRL_CONFIG_ENUM	vxTest/src/tmAudioNew.h	/^#define TEST_CTRL_CONFIG_ENUM(/;"	d
TEST_CTRL_CONFIG_INFO	vxTest/src/tmAudioNew.h	/^    }TEST_CTRL_CONFIG_INFO;$/;"	t	typeref:struct:ctrlConfigInfo
TEST_CTRL_CONFIG_INT	vxTest/src/tmAudioNew.h	/^#define TEST_CTRL_CONFIG_INT(/;"	d
TEST_CTRL_INFO_ALL	vxTest/src/tmAudioNew.h	/^    }TEST_CTRL_INFO_ALL;$/;"	t	typeref:struct:ctrlInfoAll
TEST_DBG_MSG	vxTest/src/tmMachineDrv.c	/^#define TEST_DBG_MSG(/;"	d	file:
TEST_DOUBLE_VALUE	vxTest/src/tmAudioNew.h	/^#define TEST_DOUBLE_VALUE(/;"	d
TEST_ENUM_DOUBLE	vxTest/src/tmAudioNew.h	/^#define TEST_ENUM_DOUBLE(/;"	d
TEST_FILE_HEADER_PARA	vxTest/src/tmAudioNew.h	/^    }TEST_FILE_HEADER_PARA;$/;"	t	typeref:struct:fileHeader
TEST_MACHINE_DEBUG	vxTest/src/tmMachineDrv.c	/^#define TEST_MACHINE_DEBUG$/;"	d	file:
TEST_PCM_WAVE_FORMAT	vxTest/src/tmAudioNew.h	/^    } TEST_PCM_WAVE_FORMAT;$/;"	t	typeref:struct:tmPcmWaveFormat
TEST_SINGLE_VALUE	vxTest/src/tmAudioNew.h	/^#define TEST_SINGLE_VALUE(/;"	d
TEST_SND_AUD_DBG_ALL	vxTest/src/tmAudioNew.h	/^#define TEST_SND_AUD_DBG_ALL /;"	d
TEST_SND_AUD_DBG_ERR	vxTest/src/tmAudioNew.h	/^#define TEST_SND_AUD_DBG_ERR /;"	d
TEST_SND_AUD_DBG_INFO	vxTest/src/tmAudioNew.h	/^#define TEST_SND_AUD_DBG_INFO /;"	d
TEST_SND_AUD_DBG_OFF	vxTest/src/tmAudioNew.h	/^#define TEST_SND_AUD_DBG_OFF /;"	d
TEST_SND_AUD_DBG_VERBOSE	vxTest/src/tmAudioNew.h	/^#define TEST_SND_AUD_DBG_VERBOSE /;"	d
TEST_SND_DEG_MSG	vxTest/src/tmAudioNew.h	/^#define TEST_SND_DEG_MSG(/;"	d
TEST_SOC_ENUM_EXT_MULTI	vxTest/src/tmAudioNew.h	/^#define TEST_SOC_ENUM_EXT_MULTI(/;"	d
TEST_SOC_SINGLE_TLV	vxTest/src/tmAudioNew.h	/^#define TEST_SOC_SINGLE_TLV(/;"	d
TM_DAI_CODEC_NAME	vxTest/src/tmAudioNew.h	/^#define TM_DAI_CODEC_NAME /;"	d
TM_DAI_CPU_NAME	vxTest/src/tmAudioNew.h	/^#define TM_DAI_CPU_NAME /;"	d
TM_DAI_PLAT_NAME	vxTest/src/tmAudioNew.h	/^#define TM_DAI_PLAT_NAME /;"	d
VXB_ABOX_MACHINE_DRV_CTRL	vxTest/src/tmMachineDrv.h	/^    }VXB_ABOX_MACHINE_DRV_CTRL;$/;"	t	typeref:struct:vxbAboxMachineDrvCtrl
VXB_DEV	vxTest/src/tmAudioNew.h	/^    } VXB_DEV;$/;"	t	typeref:struct:vxbDev
VX_IOCG_AUDIO	h/audioLibCore.h	/^#define VX_IOCG_AUDIO /;"	d
VX_IOCG_AUDIO_CTL	h/control.h	/^#define VX_IOCG_AUDIO_CTL /;"	d
VX_IOCG_AUDIO_PCM	h/pcm.h	/^#define VX_IOCG_AUDIO_PCM /;"	d
VX_SND_CMD_CARD_INFO	h/control.h	/^#define VX_SND_CMD_CARD_INFO /;"	d
VX_SND_CMD_CTRL_APP_VER	h/control.h	/^#define VX_SND_CMD_CTRL_APP_VER /;"	d
VX_SND_CMD_CTRL_CORE_VER	h/control.h	/^#define VX_SND_CMD_CTRL_CORE_VER /;"	d
VX_SND_CMD_CTRL_GET	h/control.h	/^#define VX_SND_CMD_CTRL_GET /;"	d
VX_SND_CMD_CTRL_INFO_GET	h/control.h	/^#define VX_SND_CMD_CTRL_INFO_GET /;"	d
VX_SND_CMD_CTRL_LIST_GET	h/control.h	/^#define VX_SND_CMD_CTRL_LIST_GET /;"	d
VX_SND_CMD_CTRL_LOCK	h/control.h	/^#define VX_SND_CMD_CTRL_LOCK /;"	d
VX_SND_CMD_CTRL_PUT	h/control.h	/^#define VX_SND_CMD_CTRL_PUT /;"	d
VX_SND_CMD_CTRL_UNLOCK	h/control.h	/^#define VX_SND_CMD_CTRL_UNLOCK /;"	d
VX_SND_CMD_DELAY	h/pcm.h	/^#define VX_SND_CMD_DELAY /;"	d
VX_SND_CMD_DRAIN	h/pcm.h	/^#define VX_SND_CMD_DRAIN /;"	d
VX_SND_CMD_DROP	h/pcm.h	/^#define VX_SND_CMD_DROP /;"	d
VX_SND_CMD_FORWARD	h/pcm.h	/^#define VX_SND_CMD_FORWARD /;"	d
VX_SND_CMD_HWSYNC	h/pcm.h	/^#define VX_SND_CMD_HWSYNC /;"	d
VX_SND_CMD_HW_FREE	h/pcm.h	/^#define VX_SND_CMD_HW_FREE /;"	d
VX_SND_CMD_HW_PARAMS	h/pcm.h	/^#define VX_SND_CMD_HW_PARAMS /;"	d
VX_SND_CMD_HW_REFINE	h/pcm.h	/^#define VX_SND_CMD_HW_REFINE /;"	d
VX_SND_CMD_PAUSE	h/pcm.h	/^#define VX_SND_CMD_PAUSE /;"	d
VX_SND_CMD_PCM_APP_VER	h/pcm.h	/^#define VX_SND_CMD_PCM_APP_VER /;"	d
VX_SND_CMD_PCM_CORE_VER	h/pcm.h	/^#define VX_SND_CMD_PCM_CORE_VER /;"	d
VX_SND_CMD_PREPARE	h/pcm.h	/^#define VX_SND_CMD_PREPARE /;"	d
VX_SND_CMD_RESET	h/pcm.h	/^#define VX_SND_CMD_RESET /;"	d
VX_SND_CMD_REWIND	h/pcm.h	/^#define VX_SND_CMD_REWIND /;"	d
VX_SND_CMD_START	h/pcm.h	/^#define VX_SND_CMD_START /;"	d
VX_SND_CMD_STATUS	h/pcm.h	/^#define VX_SND_CMD_STATUS /;"	d
VX_SND_CMD_SUBSCRIBE_EVENTS	h/control.h	/^#define VX_SND_CMD_SUBSCRIBE_EVENTS /;"	d
VX_SND_CMD_SW_PARAMS	h/pcm.h	/^#define VX_SND_CMD_SW_PARAMS /;"	d
VX_SND_CMD_SYNC_PTR64	h/pcm.h	/^#define VX_SND_CMD_SYNC_PTR64 /;"	d
VX_SND_CMD_TLV_READ	h/control.h	/^#define VX_SND_CMD_TLV_READ /;"	d
VX_SND_CMD_XRUN	h/pcm.h	/^#define VX_SND_CMD_XRUN /;"	d
VX_SND_CONTROL	h/control.h	/^    } VX_SND_CONTROL;$/;"	t	typeref:struct:vxSndControl
VX_SND_CORE_DBG_ALL	src/vxSoundCore.c	/^#define VX_SND_CORE_DBG_ALL /;"	d	file:
VX_SND_CORE_DBG_ERR	src/vxSoundCore.c	/^#define VX_SND_CORE_DBG_ERR /;"	d	file:
VX_SND_CORE_DBG_INFO	src/vxSoundCore.c	/^#define VX_SND_CORE_DBG_INFO /;"	d	file:
VX_SND_CORE_DBG_OFF	src/vxSoundCore.c	/^#define VX_SND_CORE_DBG_OFF /;"	d	file:
VX_SND_CORE_DBG_VERBOSE	src/vxSoundCore.c	/^#define VX_SND_CORE_DBG_VERBOSE /;"	d	file:
VX_SND_CORE_MSG	src/vxSoundCore.c	/^#define VX_SND_CORE_MSG(/;"	d	file:
VX_SND_CTL_DATA_TYPE_BOOLEAN	h/control.h	/^    VX_SND_CTL_DATA_TYPE_BOOLEAN = 0,$/;"	e	enum:vxSndCtrlDataType
VX_SND_CTL_DATA_TYPE_BYTES_ARRAY	h/control.h	/^    VX_SND_CTL_DATA_TYPE_BYTES_ARRAY,$/;"	e	enum:vxSndCtrlDataType
VX_SND_CTL_DATA_TYPE_ENUMERATED	h/control.h	/^    VX_SND_CTL_DATA_TYPE_ENUMERATED,$/;"	e	enum:vxSndCtrlDataType
VX_SND_CTL_DATA_TYPE_INTEGER	h/control.h	/^    VX_SND_CTL_DATA_TYPE_INTEGER,$/;"	e	enum:vxSndCtrlDataType
VX_SND_CTL_DATA_TYPE_INTEGER64	h/control.h	/^    VX_SND_CTL_DATA_TYPE_INTEGER64,$/;"	e	enum:vxSndCtrlDataType
VX_SND_CTL_GET_PTR	h/control.h	/^typedef STATUS (*VX_SND_CTL_GET_PTR) (struct vxSndControl * kcontrol, struct vxSndCtrlDataValue /;"	t	typeref:typename:STATUS (*)(struct vxSndControl * kcontrol,struct vxSndCtrlDataValue * ucontrol)
VX_SND_CTL_INFO_PTR	h/control.h	/^typedef STATUS (*VX_SND_CTL_INFO_PTR) (struct vxSndControl * kcontrol, struct vxSndCtrlInfo * ui/;"	t	typeref:typename:STATUS (*)(struct vxSndControl * kcontrol,struct vxSndCtrlInfo * uinfo)
VX_SND_CTL_PUT_PTR	h/control.h	/^typedef STATUS (*VX_SND_CTL_PUT_PTR) (struct vxSndControl * kcontrol, struct vxSndCtrlDataValue /;"	t	typeref:typename:STATUS (*)(struct vxSndControl * kcontrol,struct vxSndCtrlDataValue * ucontrol)
VX_SND_CTL_REG_RW_PTR	h/control.h	/^typedef STATUS (*VX_SND_CTL_REG_RW_PTR)(struct vxSndControl *kcontrol, int op_flag, uint32_t siz/;"	t	typeref:typename:STATUS (*)(struct vxSndControl * kcontrol,int op_flag,uint32_t size,uint32_t * tlv)
VX_SND_CTRL_ACCESS_LOCK	h/control.h	/^#define VX_SND_CTRL_ACCESS_LOCK /;"	d
VX_SND_CTRL_ACCESS_OWNER	h/control.h	/^#define VX_SND_CTRL_ACCESS_OWNER /;"	d
VX_SND_CTRL_ACCESS_READ	h/control.h	/^#define VX_SND_CTRL_ACCESS_READ /;"	d
VX_SND_CTRL_ACCESS_READWRITE	h/control.h	/^#define VX_SND_CTRL_ACCESS_READWRITE /;"	d
VX_SND_CTRL_ACCESS_TLV_READ	h/control.h	/^#define VX_SND_CTRL_ACCESS_TLV_READ /;"	d
VX_SND_CTRL_ACCESS_WRITE	h/control.h	/^#define VX_SND_CTRL_ACCESS_WRITE /;"	d
VX_SND_CTRL_CARD_INFO	h/control.h	/^    } VX_SND_CTRL_CARD_INFO;$/;"	t	typeref:struct:vxSndCtrlCardInfo
VX_SND_CTRL_CORE_VERSION	h/control.h	/^#define VX_SND_CTRL_CORE_VERSION /;"	d
VX_SND_CTRL_DATA_TYPE	h/control.h	/^    } VX_SND_CTRL_DATA_TYPE;$/;"	t	typeref:enum:vxSndCtrlDataType
VX_SND_CTRL_DATA_VAL	h/control.h	/^    } VX_SND_CTRL_DATA_VAL;$/;"	t	typeref:struct:vxSndCtrlDataValue
VX_SND_CTRL_DBG_ALL	src/control.c	/^#define VX_SND_CTRL_DBG_ALL /;"	d	file:
VX_SND_CTRL_DBG_ERR	src/control.c	/^#define VX_SND_CTRL_DBG_ERR /;"	d	file:
VX_SND_CTRL_DBG_INFO	src/control.c	/^#define VX_SND_CTRL_DBG_INFO /;"	d	file:
VX_SND_CTRL_DBG_OFF	src/control.c	/^#define VX_SND_CTRL_DBG_OFF /;"	d	file:
VX_SND_CTRL_DBG_VERBOSE	src/control.c	/^#define VX_SND_CTRL_DBG_VERBOSE /;"	d	file:
VX_SND_CTRL_ID	h/control.h	/^    } VX_SND_CTRL_ID;$/;"	t	typeref:struct:vxSndCtrlId
VX_SND_CTRL_INFO	h/control.h	/^    } VX_SND_CTRL_INFO;$/;"	t	typeref:struct:vxSndCtrlInfo
VX_SND_CTRL_LIST	h/control.h	/^    } VX_SND_CTRL_LIST;$/;"	t	typeref:struct:vxSndCtrlList
VX_SND_CTRL_MSG	src/control.c	/^#define VX_SND_CTRL_MSG(/;"	d	file:
VX_SND_CTRL_TLV	h/control.h	/^    } VX_SND_CTRL_TLV;$/;"	t	typeref:struct:vxSndCtlTlv
VX_SND_CTRL_TYPE	h/control.h	/^    } VX_SND_CTRL_TYPE;$/;"	t	typeref:enum:vxSndCtrlType
VX_SND_DAI_FORMAT_AC97	h/soc.h	/^#define VX_SND_DAI_FORMAT_AC97 /;"	d
VX_SND_DAI_FORMAT_DSP_A	h/soc.h	/^#define VX_SND_DAI_FORMAT_DSP_A /;"	d
VX_SND_DAI_FORMAT_DSP_B	h/soc.h	/^#define VX_SND_DAI_FORMAT_DSP_B /;"	d
VX_SND_DAI_FORMAT_I2S	h/soc.h	/^#define VX_SND_DAI_FORMAT_I2S /;"	d
VX_SND_DAI_FORMAT_LEFT_J	h/soc.h	/^#define VX_SND_DAI_FORMAT_LEFT_J /;"	d
VX_SND_DAI_FORMAT_PDM	h/soc.h	/^#define VX_SND_DAI_FORMAT_PDM /;"	d
VX_SND_DAI_FORMAT_RIGHT_J	h/soc.h	/^#define VX_SND_DAI_FORMAT_RIGHT_J /;"	d
VX_SND_DEV_CODEC	h/vxSoundCore.h	/^    VX_SND_DEV_CODEC,$/;"	e	enum:vxSndDevType
VX_SND_DEV_CONTROL	h/vxSoundCore.h	/^    VX_SND_DEV_CONTROL,$/;"	e	enum:vxSndDevType
VX_SND_DEV_HWDEP	h/vxSoundCore.h	/^    VX_SND_DEV_HWDEP,$/;"	e	enum:vxSndDevType
VX_SND_DEV_JACK	h/vxSoundCore.h	/^    VX_SND_DEV_JACK,$/;"	e	enum:vxSndDevType
VX_SND_DEV_MAX	h/vxSoundCore.h	/^    VX_SND_DEV_MAX,$/;"	e	enum:vxSndDevType
VX_SND_DEV_PCM	h/vxSoundCore.h	/^    VX_SND_DEV_PCM,$/;"	e	enum:vxSndDevType
VX_SND_DEV_TYPE	h/vxSoundCore.h	/^    } VX_SND_DEV_TYPE;$/;"	t	typeref:enum:vxSndDevType
VX_SND_DEV_UNKNOWN	h/vxSoundCore.h	/^    VX_SND_DEV_UNKNOWN = 0,$/;"	e	enum:vxSndDevType
VX_SND_ENUM	h/control.h	/^    } VX_SND_ENUM;$/;"	t	typeref:struct:vxSndEnum
VX_SND_FMTBIT_S16_BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S16_BE /;"	d
VX_SND_FMTBIT_S16_LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S16_LE /;"	d
VX_SND_FMTBIT_S18_3BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S18_3BE /;"	d
VX_SND_FMTBIT_S18_3LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S18_3LE /;"	d
VX_SND_FMTBIT_S20_3BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S20_3BE /;"	d
VX_SND_FMTBIT_S20_3LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S20_3LE /;"	d
VX_SND_FMTBIT_S20_BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S20_BE /;"	d
VX_SND_FMTBIT_S20_LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S20_LE /;"	d
VX_SND_FMTBIT_S24_3BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S24_3BE /;"	d
VX_SND_FMTBIT_S24_3LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S24_3LE /;"	d
VX_SND_FMTBIT_S24_BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S24_BE /;"	d
VX_SND_FMTBIT_S24_LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S24_LE /;"	d
VX_SND_FMTBIT_S32_BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S32_BE /;"	d
VX_SND_FMTBIT_S32_LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S32_LE /;"	d
VX_SND_FMTBIT_S8	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_S8 /;"	d
VX_SND_FMTBIT_U16_BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U16_BE /;"	d
VX_SND_FMTBIT_U16_LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U16_LE /;"	d
VX_SND_FMTBIT_U18_3BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U18_3BE /;"	d
VX_SND_FMTBIT_U18_3LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U18_3LE /;"	d
VX_SND_FMTBIT_U20_3BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U20_3BE /;"	d
VX_SND_FMTBIT_U20_3LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U20_3LE /;"	d
VX_SND_FMTBIT_U20_BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U20_BE /;"	d
VX_SND_FMTBIT_U20_LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U20_LE /;"	d
VX_SND_FMTBIT_U24_3BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U24_3BE /;"	d
VX_SND_FMTBIT_U24_3LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U24_3LE /;"	d
VX_SND_FMTBIT_U24_BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U24_BE /;"	d
VX_SND_FMTBIT_U24_LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U24_LE /;"	d
VX_SND_FMTBIT_U32_BE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U32_BE /;"	d
VX_SND_FMTBIT_U32_LE	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U32_LE /;"	d
VX_SND_FMTBIT_U8	h/vxSoundCore.h	/^#define VX_SND_FMTBIT_U8 /;"	d
VX_SND_FMT_MAX	h/vxSoundCore.h	/^    VX_SND_FMT_MAX,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S16_BE	h/vxSoundCore.h	/^    VX_SND_FMT_S16_BE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S16_LE	h/vxSoundCore.h	/^    VX_SND_FMT_S16_LE,    \/* in two bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S18_3BE	h/vxSoundCore.h	/^    VX_SND_FMT_S18_3BE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S18_3LE	h/vxSoundCore.h	/^    VX_SND_FMT_S18_3LE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S20_3BE	h/vxSoundCore.h	/^    VX_SND_FMT_S20_3BE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S20_3LE	h/vxSoundCore.h	/^    VX_SND_FMT_S20_3LE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S20_BE	h/vxSoundCore.h	/^    VX_SND_FMT_S20_BE,    \/* in four bytes, LSB justified *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S20_LE	h/vxSoundCore.h	/^    VX_SND_FMT_S20_LE,    \/* in four bytes, LSB justified *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S24_3BE	h/vxSoundCore.h	/^    VX_SND_FMT_S24_3BE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S24_3LE	h/vxSoundCore.h	/^    VX_SND_FMT_S24_3LE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S24_BE	h/vxSoundCore.h	/^    VX_SND_FMT_S24_BE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S24_LE	h/vxSoundCore.h	/^    VX_SND_FMT_S24_LE,    \/* in four bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S32_BE	h/vxSoundCore.h	/^    VX_SND_FMT_S32_BE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S32_LE	h/vxSoundCore.h	/^    VX_SND_FMT_S32_LE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_S8	h/vxSoundCore.h	/^    VX_SND_FMT_S8 = 0,    \/* in one byte *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U16_BE	h/vxSoundCore.h	/^    VX_SND_FMT_U16_BE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U16_LE	h/vxSoundCore.h	/^    VX_SND_FMT_U16_LE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U18_3BE	h/vxSoundCore.h	/^    VX_SND_FMT_U18_3BE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U18_3LE	h/vxSoundCore.h	/^    VX_SND_FMT_U18_3LE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U20_3BE	h/vxSoundCore.h	/^    VX_SND_FMT_U20_3BE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U20_3LE	h/vxSoundCore.h	/^    VX_SND_FMT_U20_3LE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U20_BE	h/vxSoundCore.h	/^    VX_SND_FMT_U20_BE,    \/* in four bytes, LSB justified *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U20_LE	h/vxSoundCore.h	/^    VX_SND_FMT_U20_LE,    \/* in four bytes, LSB justified *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U24_3BE	h/vxSoundCore.h	/^    VX_SND_FMT_U24_3BE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U24_3LE	h/vxSoundCore.h	/^    VX_SND_FMT_U24_3LE,   \/* in three bytes *\/$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U24_BE	h/vxSoundCore.h	/^    VX_SND_FMT_U24_BE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U24_LE	h/vxSoundCore.h	/^    VX_SND_FMT_U24_LE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U32_BE	h/vxSoundCore.h	/^    VX_SND_FMT_U32_BE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U32_LE	h/vxSoundCore.h	/^    VX_SND_FMT_U32_LE,$/;"	e	enum:vxSndFormatIndex
VX_SND_FMT_U8	h/vxSoundCore.h	/^    VX_SND_FMT_U8,$/;"	e	enum:vxSndFormatIndex
VX_SND_FORMAT_IDX	h/vxSoundCore.h	/^    } VX_SND_FORMAT_IDX;$/;"	t	typeref:enum:vxSndFormatIndex
VX_SND_HW_PARAM_BUFFER_BYTES	h/vxSoundCore.h	/^    VX_SND_HW_PARAM_BUFFER_BYTES,    \/* Size of buffer in bytes *\/$/;"	e	enum:hwParamIntervalIdx
VX_SND_HW_PARAM_CHANNELS	h/vxSoundCore.h	/^    VX_SND_HW_PARAM_CHANNELS,        \/* Channels *\/$/;"	e	enum:hwParamIntervalIdx
VX_SND_HW_PARAM_IDX_MAX	h/vxSoundCore.h	/^    VX_SND_HW_PARAM_IDX_MAX,$/;"	e	enum:hwParamIntervalIdx
VX_SND_HW_PARAM_PERIODS	h/vxSoundCore.h	/^    VX_SND_HW_PARAM_PERIODS,         \/* Approx interrupts per buffer *\/$/;"	e	enum:hwParamIntervalIdx
VX_SND_HW_PARAM_PERIOD_BYTES	h/vxSoundCore.h	/^    VX_SND_HW_PARAM_PERIOD_BYTES,    \/* Approx bytes between interrupts *\/$/;"	e	enum:hwParamIntervalIdx
VX_SND_INTERVAL	h/vxSoundCore.h	/^    } VX_SND_INTERVAL;$/;"	t	typeref:struct:vxSndInterval
VX_SND_MIXER_CTRL	h/control.h	/^    } VX_SND_MIXER_CTRL;$/;"	t	typeref:struct:vxSndMixerControl
VX_SND_MODULE_VERSION	h/vxSoundCore.h	/^#define VX_SND_MODULE_VERSION(/;"	d
VX_SND_PCM	h/vxSoundCore.h	/^    } VX_SND_PCM;$/;"	t	typeref:struct:vxSndPcm
VX_SND_PCM_CHIP	h/soc.h	/^#define VX_SND_PCM_CHIP(/;"	d
VX_SND_PCM_CORE_VERSION	h/pcm.h	/^#define VX_SND_PCM_CORE_VERSION /;"	d
VX_SND_PCM_DBG_ALL	src/pcm.c	/^#define VX_SND_PCM_DBG_ALL /;"	d	file:
VX_SND_PCM_DBG_ERR	src/pcm.c	/^#define VX_SND_PCM_DBG_ERR /;"	d	file:
VX_SND_PCM_DBG_INFO	src/pcm.c	/^#define VX_SND_PCM_DBG_INFO /;"	d	file:
VX_SND_PCM_DBG_OFF	src/pcm.c	/^#define VX_SND_PCM_DBG_OFF /;"	d	file:
VX_SND_PCM_DBG_VERBOSE	src/pcm.c	/^#define VX_SND_PCM_DBG_VERBOSE /;"	d	file:
VX_SND_PCM_FMT_INFO	h/pcm.h	/^    } VX_SND_PCM_FMT_INFO;$/;"	t	typeref:struct:vxSndPcmFormatInfo
VX_SND_PCM_HARDWARE	h/vxSoundCore.h	/^    } VX_SND_PCM_HARDWARE;$/;"	t	typeref:struct:vxSndPcmHardware
VX_SND_PCM_HW_PARAMS	h/vxSoundCore.h	/^    } VX_SND_PCM_HW_PARAMS;$/;"	t	typeref:struct:vxSndPcmHwParams
VX_SND_PCM_MMAP_CTRL	h/vxSoundCore.h	/^    } VX_SND_PCM_MMAP_CTRL;$/;"	t	typeref:struct:vxSndPcmMmapControl
VX_SND_PCM_MMAP_STATUS	h/vxSoundCore.h	/^    } VX_SND_PCM_MMAP_STATUS;$/;"	t	typeref:struct:vxSndPcmMmapStaus
VX_SND_PCM_MSG	src/pcm.c	/^#define VX_SND_PCM_MSG(/;"	d	file:
VX_SND_PCM_RUNTIME	h/vxSoundCore.h	/^    } VX_SND_PCM_RUNTIME;$/;"	t	typeref:struct:vxSndPcmRuntime
VX_SND_PCM_STREAM_OPS	h/vxSoundCore.h	/^    } VX_SND_PCM_STREAM_OPS;$/;"	t	typeref:struct:vxSndPcmStreamOps
VX_SND_PCM_SUPPORT_HW_PARAMS	h/vxSoundCore.h	/^    } VX_SND_PCM_SUPPORT_HW_PARAMS;$/;"	t	typeref:struct:vxSndPcmSupportHwParams
VX_SND_PCM_SW_PARAMS	h/vxSoundCore.h	/^    } VX_SND_PCM_SW_PARAMS;$/;"	t	typeref:struct:vxSndPcmSwParams
VX_SND_SOC_BIAS_LEVEL	h/soc.h	/^    } VX_SND_SOC_BIAS_LEVEL;$/;"	t	typeref:enum:vxSndSocBiasLevel
VX_SND_SOC_CARD	h/soc.h	/^    } VX_SND_SOC_CARD;$/;"	t	typeref:struct:vxSndSocCard
VX_SND_SOC_CEDEC_CONF	h/soc.h	/^    } VX_SND_SOC_CEDEC_CONF;$/;"	t	typeref:struct:snd_soc_codec_conf
VX_SND_SOC_CMPT_DRV	h/soc.h	/^    } VX_SND_SOC_CMPT_DRV;$/;"	t	typeref:struct:vxSndSocComponentDriver
VX_SND_SOC_COMPONENT	h/soc.h	/^    } VX_SND_SOC_COMPONENT;$/;"	t	typeref:struct:vxSndSocComponent
VX_SND_SOC_DAI	h/soc.h	/^    } VX_SND_SOC_DAI;$/;"	t	typeref:struct:vxSndSocDai
VX_SND_SOC_DAI_DRIVER	h/soc.h	/^    } VX_SND_SOC_DAI_DRIVER;$/;"	t	typeref:struct:vxSndSocDaiDriver
VX_SND_SOC_DAI_LINK	h/soc.h	/^    } VX_SND_SOC_DAI_LINK;$/;"	t	typeref:struct:vxSndSocDaiLink
VX_SND_SOC_DAI_LINK_COMPONENT	h/soc.h	/^    } VX_SND_SOC_DAI_LINK_COMPONENT;$/;"	t	typeref:struct:vxSndSocDaiLinkComponent
VX_SND_SOC_DAI_OPS	h/soc.h	/^    } VX_SND_SOC_DAI_OPS;$/;"	t	typeref:struct:vxSndSocDaiOps
VX_SND_SOC_DBG_ALL	src/card.c	/^#define VX_SND_SOC_DBG_ALL /;"	d	file:
VX_SND_SOC_DBG_ALL	src/soc.c	/^#define VX_SND_SOC_DBG_ALL /;"	d	file:
VX_SND_SOC_DBG_ERR	src/card.c	/^#define VX_SND_SOC_DBG_ERR /;"	d	file:
VX_SND_SOC_DBG_ERR	src/soc.c	/^#define VX_SND_SOC_DBG_ERR /;"	d	file:
VX_SND_SOC_DBG_INFO	src/card.c	/^#define VX_SND_SOC_DBG_INFO /;"	d	file:
VX_SND_SOC_DBG_INFO	src/soc.c	/^#define VX_SND_SOC_DBG_INFO /;"	d	file:
VX_SND_SOC_DBG_OFF	src/card.c	/^#define VX_SND_SOC_DBG_OFF /;"	d	file:
VX_SND_SOC_DBG_OFF	src/soc.c	/^#define VX_SND_SOC_DBG_OFF /;"	d	file:
VX_SND_SOC_DBG_VERBOSE	src/card.c	/^#define VX_SND_SOC_DBG_VERBOSE /;"	d	file:
VX_SND_SOC_DBG_VERBOSE	src/soc.c	/^#define VX_SND_SOC_DBG_VERBOSE /;"	d	file:
VX_SND_SOC_DPCM_STATE	h/soc.h	/^    } VX_SND_SOC_DPCM_STATE;$/;"	t	typeref:enum:snd_soc_dpcm_state
VX_SND_SOC_DPCM_TRIGGER	h/soc.h	/^    } VX_SND_SOC_DPCM_TRIGGER;$/;"	t	typeref:enum:snd_soc_dpcm_trigger
VX_SND_SOC_MSG	src/card.c	/^#define VX_SND_SOC_MSG(/;"	d	file:
VX_SND_SOC_MSG	src/soc.c	/^#define VX_SND_SOC_MSG(/;"	d	file:
VX_SND_SOC_OPS	h/soc.h	/^    } VX_SND_SOC_OPS;$/;"	t	typeref:struct:vxSndSocOps
VX_SND_SOC_PCM_RUNTIME	h/soc.h	/^    } VX_SND_SOC_PCM_RUNTIME;$/;"	t	typeref:struct:vxSndSocPcmRuntime
VX_SND_SOC_PCM_STREAM	h/soc.h	/^    } VX_SND_SOC_PCM_STREAM;$/;"	t	typeref:struct:vxSndSocPcmStream
VX_SND_SOC_POSSIBLE_DAIFMT_AC97	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_AC97 /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_CLOCK_MASK	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_CLOCK_MASK /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_CLOCK_SHIFT	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_CLOCK_SHIFT /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_CONT	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_CONT /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_DSP_A	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_DSP_A /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_DSP_B	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_DSP_B /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_FORMAT_MASK	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_FORMAT_MASK /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_FORMAT_SHIFT	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_FORMAT_SHIFT /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_GATED	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_GATED /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_I2S	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_I2S /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_IB_IF	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_IB_IF /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_IB_NF	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_IB_NF /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_INV_MASK	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_INV_MASK /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_INV_SHIFT	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_INV_SHIFT /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_LEFT_J	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_LEFT_J /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_NB_IF	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_NB_IF /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_NB_NF	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_NB_NF /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_PDM	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_PDM /;"	d
VX_SND_SOC_POSSIBLE_DAIFMT_RIGHT_J	h/soc.h	/^#define VX_SND_SOC_POSSIBLE_DAIFMT_RIGHT_J /;"	d
VX_SND_SUBSTREAM_CHIP	h/soc.h	/^#define VX_SND_SUBSTREAM_CHIP(/;"	d
VX_SND_SUBSTREAM_DMA_BUF	h/vxSoundCore.h	/^    } VX_SND_SUBSTREAM_DMA_BUF;$/;"	t	typeref:struct:vxSndSubstreamDmaBuf
VX_SND_SUBSTREAM_STATUS	h/vxSoundCore.h	/^    } VX_SND_SUBSTREAM_STATUS;$/;"	t	typeref:struct:vxSndSubstreamStatus
VX_SND_SUBSTREAM_SYNC_PTR	h/vxSoundCore.h	/^} VX_SND_SUBSTREAM_SYNC_PTR;$/;"	t	typeref:struct:vxSndSubstreamSyncPtr
VX_SOC_SUBSTREAM_TO_RUNTIME	h/soc.h	/^#define VX_SOC_SUBSTREAM_TO_RUNTIME(/;"	d
WAVE_FORMAT_EXTENSIBLE	src/audioLibWav.c	/^#define WAVE_FORMAT_EXTENSIBLE /;"	d	file:
WAVE_FORMAT_PCM	src/audioLibWav.c	/^#define WAVE_FORMAT_PCM /;"	d	file:
WAV_FILE_HEADER	vxTest/src/tmAudioNew.h	/^    } WAV_FILE_HEADER;$/;"	t	typeref:struct:wavFileHeader
__INCaudioLibCoreh	h/audioLibCore.h	/^#define __INCaudioLibCoreh$/;"	d
__INCaudioLibWaveh	h/audioLibWav.h	/^#define __INCaudioLibWaveh$/;"	d
__INCsoundControlh	h/control.h	/^#define __INCsoundControlh$/;"	d
__INCsoundPcmh	h/pcm.h	/^#define __INCsoundPcmh$/;"	d
__INCtestAudioNewh	vxTest/src/tmAudioNew.h	/^#define __INCtestAudioNewh$/;"	d
__INCtestMachineh	vxTest/src/tmMachineDrv.h	/^#define __INCtestMachineh$/;"	d
__INCvxSndSoch	h/soc.h	/^#define __INCvxSndSoch$/;"	d
__INCvxSoundCoreh	h/vxSoundCore.h	/^#define __INCvxSoundCoreh$/;"	d
__anon75eec52c0103	vxTest/src/tmAudioNew.h	/^    {$/;"	g
__anon75eec52c020a	vxTest/src/tmAudioNew.h	/^        {$/;"	u	struct:ctrlConfigInfo
__anon75eec52c0308	vxTest/src/tmAudioNew.h	/^            {$/;"	s	union:ctrlConfigInfo::__anon75eec52c020a
__anon75eec52c0408	vxTest/src/tmAudioNew.h	/^            {$/;"	s	union:ctrlConfigInfo::__anon75eec52c020a
__anon75eec52c0508	vxTest/src/tmAudioNew.h	/^            {$/;"	s	union:ctrlConfigInfo::__anon75eec52c020a
__anon7e192d73010a	h/control.h	/^        {$/;"	u	struct:vxSndCtrlInfo
__anon7e192d730208	h/control.h	/^            {$/;"	s	union:vxSndCtrlInfo::__anon7e192d73010a
__anon7e192d730308	h/control.h	/^            {$/;"	s	union:vxSndCtrlInfo::__anon7e192d73010a
__anon7e192d730408	h/control.h	/^            {$/;"	s	union:vxSndCtrlInfo::__anon7e192d73010a
__anon7e192d73050a	h/control.h	/^        {$/;"	u	struct:vxSndCtrlDataValue
__anon7e192d73060a	h/control.h	/^            {$/;"	u	union:vxSndCtrlDataValue::__anon7e192d73050a
__anon7e192d73070a	h/control.h	/^            {$/;"	u	union:vxSndCtrlDataValue::__anon7e192d73050a
__anon7e192d73080a	h/control.h	/^            {$/;"	u	union:vxSndCtrlDataValue::__anon7e192d73050a
__anon7e192d73090a	h/control.h	/^            {$/;"	u	union:vxSndCtrlDataValue::__anon7e192d73050a
__anon7e192d730a0a	h/control.h	/^        {$/;"	u	struct:vxSndControl
__anoncbc58872010a	h/vxSoundCore.h	/^        {$/;"	u	struct:vxSndSubstreamSyncPtr
__anoncbc58872020a	h/vxSoundCore.h	/^        {$/;"	u	struct:vxSndSubstreamSyncPtr
access	h/control.h	/^    uint32_t access;                \/* R: value access (bitmask) - SNDRV_CTL_ELEM_ACCESS_* *\/$/;"	m	struct:vxSndCtrlInfo	typeref:typename:uint32_t
access	h/control.h	/^    uint32_t access;$/;"	m	struct:vxSndCtrlId	typeref:typename:uint32_t
access	h/vxSoundCore.h	/^    uint32_t access;    \/* access mode *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
accessTypeBits	h/vxSoundCore.h	/^    uint32_t        accessTypeBits;$/;"	m	struct:vxSndPcmHwParams	typeref:typename:uint32_t
accessTypeBits	h/vxSoundCore.h	/^    uint32_t        accessTypeBits;$/;"	m	struct:vxSndPcmSupportHwParams	typeref:typename:uint32_t
ack	h/soc.h	/^    STATUS (*ack)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream)
ack	h/vxSoundCore.h	/^    STATUS (*ack) (SND_PCM_SUBSTREAM * substream);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream)
activeCnt	h/soc.h	/^    uint32_t activeCnt;$/;"	m	struct:vxSndSocComponent	typeref:typename:uint32_t
ad	vxTest/src/tmAudio.c	/^    int             ad;$/;"	m	struct:atInfo	typeref:typename:int	file:
add_dai_link	h/soc.h	/^    int (*add_dai_link)(struct vxSndSocCard *,$/;"	m	struct:vxSndSocCard	typeref:typename:int (*)(struct vxSndSocCard *,struct vxSndSocDaiLink * link)
appPtr	h/vxSoundCore.h	/^    SND_FRAMES_T appPtr;$/;"	m	struct:vxSndPcmMmapControl	typeref:typename:SND_FRAMES_T
appVersion	h/vxSoundCore.h	/^    uint32_t                   appVersion;$/;"	m	struct:vxSndPcmStream	typeref:typename:uint32_t
appVersion	h/vxSoundCore.h	/^    uint32_t             appVersion;$/;"	m	struct:vxSndCtrlDev	typeref:typename:uint32_t
area	h/vxSoundCore.h	/^    unsigned char * area;$/;"	m	struct:vxSndSubstreamDmaBuf	typeref:typename:unsigned char *
atCloseDir	vxTest/src/tmAudio.c	/^LOCAL INT32 atCloseDir(DIR *dirptr)$/;"	f	typeref:typename:LOCAL INT32
atCreateDisk	vxTest/src/tmAudio.c	/^LOCAL STATUS atCreateDisk(UINT32 size)$/;"	f	typeref:typename:LOCAL STATUS
atDeviceInfoShow	vxTest/src/tmAudio.c	/^LOCAL void atDeviceInfoShow(AUDIO_DEV_INFO *pDevInfo)$/;"	f	typeref:typename:LOCAL void
atDeviceIoctl	vxTest/src/tmAudio.c	/^LOCAL STATUS atDeviceIoctl(void)$/;"	f	typeref:typename:LOCAL STATUS
atDeviceOpenClose	vxTest/src/tmAudio.c	/^LOCAL STATUS atDeviceOpenClose(UINT32 num)$/;"	f	typeref:typename:LOCAL STATUS
atDeviceOpenClose2	vxTest/src/tmAudio.c	/^LOCAL STATUS atDeviceOpenClose2(void)$/;"	f	typeref:typename:LOCAL STATUS
atFileListPlay	vxTest/src/tmAudio.c	/^LOCAL STATUS atFileListPlay(char *path, UINT32 circle, BOOL block)$/;"	f	typeref:typename:LOCAL STATUS
atFileListRead	vxTest/src/tmAudio.c	/^LOCAL STATUS atFileListRead(char *path)$/;"	f	typeref:typename:LOCAL STATUS
atFileListRec	vxTest/src/tmAudio.c	/^LOCAL STATUS atFileListRec(UINT32 recPeriod, UINT8 volume, BOOL block)$/;"	f	typeref:typename:LOCAL STATUS
atFileListWrite	vxTest/src/tmAudio.c	/^LOCAL STATUS atFileListWrite(void)$/;"	f	typeref:typename:LOCAL STATUS
atFindAudioFile	vxTest/src/tmAudio.c	/^LOCAL DIRENT* atFindAudioFile(DIR *dirptr)$/;"	f	typeref:typename:LOCAL DIRENT *
atGetDir	vxTest/src/tmAudio.c	/^#define atGetDir(/;"	d	file:
atInfo	vxTest/src/tmAudio.c	/^typedef struct atInfo$/;"	s	file:
atInit	vxTest/src/tmAudio.c	/^void atInit()$/;"	f	typeref:typename:void
atIsPlayCircle	vxTest/src/tmAudio.c	/^LOCAL UINT32  atIsPlayCircle()$/;"	f	typeref:typename:LOCAL UINT32
atLswd	vxTest/src/tmAudio.c	/^LOCAL void atLswd(char *dir)$/;"	f	typeref:typename:LOCAL void
atOpenDir	vxTest/src/tmAudio.c	/^LOCAL INT32 atOpenDir(char *dir, DIR **dirptr)$/;"	f	typeref:typename:LOCAL INT32
atOpenFile	vxTest/src/tmAudio.c	/^LOCAL STATUS atOpenFile$/;"	f	typeref:typename:LOCAL STATUS
atOptionCheck	vxTest/src/tmAudio.c	/^LOCAL BOOL atOptionCheck$/;"	f	typeref:typename:LOCAL BOOL
atPlayWav	vxTest/src/tmAudio.c	/^LOCAL STATUS atPlayWav$/;"	f	typeref:typename:LOCAL STATUS
atRecWav	vxTest/src/tmAudio.c	/^LOCAL STATUS atRecWav$/;"	f	typeref:typename:LOCAL STATUS
atRewindDir	vxTest/src/tmAudio.c	/^LOCAL INT32 atRewindDir(char * path)$/;"	f	typeref:typename:LOCAL INT32
atSetDir	vxTest/src/tmAudio.c	/^LOCAL STATUS atSetDir(char* dir)$/;"	f	typeref:typename:LOCAL STATUS
atSetPlayCircle	vxTest/src/tmAudio.c	/^LOCAL void atSetPlayCircle(UINT32 circle)$/;"	f	typeref:typename:LOCAL void
atWriteFile	vxTest/src/tmAudio.c	/^LOCAL STATUS atWriteFile$/;"	f	typeref:typename:LOCAL STATUS
atprintf	vxTest/src/tmAudio.c	/^#define     atprintf /;"	d	file:
attTransUnit	h/audioLibCore.h	/^    UINT32          attTransUnit;   \/* the transceiver which codec device attached to *\/$/;"	m	struct:audioDev	typeref:typename:UINT32
audiTestInit	vxTest/src/tmAudioNew.c	/^void audiTestInit()$/;"	f	typeref:typename:void
audioBufferInfo	src/audioLibCore.c	/^typedef struct audioBufferInfo$/;"	s	file:
audioChanInfo	src/audioLibCore.c	/^typedef struct audioChanInfo$/;"	s	file:
audioCodecList	src/audioLibCore.c	/^LOCAL DL_LIST               audioCodecList = {NULL, NULL};$/;"	v	typeref:typename:LOCAL DL_LIST
audioCoreAllocBuffer	src/audioLibCore.c	/^LOCAL STATUS audioCoreAllocBuffer$/;"	f	typeref:typename:LOCAL STATUS
audioCoreChanStart	src/audioLibCore.c	/^LOCAL STATUS audioCoreChanStart$/;"	f	typeref:typename:LOCAL STATUS
audioCoreChanStop	src/audioLibCore.c	/^LOCAL void audioCoreChanStop$/;"	f	typeref:typename:LOCAL void
audioCoreClose	src/audioLibCore.c	/^LOCAL int audioCoreClose$/;"	f	typeref:typename:LOCAL int
audioCoreClrMsgQ	src/audioLibCore.c	/^LOCAL void audioCoreClrMsgQ$/;"	f	typeref:typename:LOCAL void
audioCoreConvert	src/audioLibCore.c	/^LOCAL void audioCoreConvert$/;"	f	typeref:typename:LOCAL void
audioCoreConvert24to24	src/audioLibCore.c	/^LOCAL void audioCoreConvert24to24$/;"	f	typeref:typename:LOCAL void
audioCoreConvert24to32	src/audioLibCore.c	/^LOCAL void audioCoreConvert24to32$/;"	f	typeref:typename:LOCAL void
audioCoreConvert32to24	src/audioLibCore.c	/^LOCAL void audioCoreConvert32to24$/;"	f	typeref:typename:LOCAL void
audioCoreDebugLevel	src/audioLibCore.c	/^LOCAL int audioCoreDebugLevel = 500;$/;"	v	typeref:typename:LOCAL int
audioCoreDevIdxAlloc	src/audioLibCore.c	/^LOCAL STATUS audioCoreDevIdxAlloc$/;"	f	typeref:typename:LOCAL STATUS
audioCoreDevIdxFree	src/audioLibCore.c	/^LOCAL void audioCoreDevIdxFree$/;"	f	typeref:typename:LOCAL void
audioCoreFreeBuffer	src/audioLibCore.c	/^LOCAL void audioCoreFreeBuffer$/;"	f	typeref:typename:LOCAL void
audioCoreInit	src/audioLibCore.c	/^void audioCoreInit$/;"	f	typeref:typename:void
audioCoreInitMsgQ	src/audioLibCore.c	/^LOCAL void audioCoreInitMsgQ$/;"	f	typeref:typename:LOCAL void
audioCoreIoctl	src/audioLibCore.c	/^LOCAL STATUS audioCoreIoctl$/;"	f	typeref:typename:LOCAL STATUS
audioCoreIoctlChan	src/audioLibCore.c	/^LOCAL STATUS audioCoreIoctlChan$/;"	f	typeref:typename:LOCAL STATUS
audioCoreIoctlDev	src/audioLibCore.c	/^LOCAL STATUS audioCoreIoctlDev$/;"	f	typeref:typename:LOCAL STATUS
audioCoreOpen	src/audioLibCore.c	/^LOCAL void * audioCoreOpen$/;"	f	typeref:typename:LOCAL void *
audioCoreRead	src/audioLibCore.c	/^LOCAL ssize_t audioCoreRead$/;"	f	typeref:typename:LOCAL ssize_t
audioCoreRecvTask	src/audioLibCore.c	/^LOCAL void audioCoreRecvTask$/;"	f	typeref:typename:LOCAL void
audioCoreRegCodec	src/audioLibCore.c	/^STATUS audioCoreRegCodec$/;"	f	typeref:typename:STATUS
audioCoreRegTransceiver	src/audioLibCore.c	/^STATUS audioCoreRegTransceiver$/;"	f	typeref:typename:STATUS
audioCoreSendTask	src/audioLibCore.c	/^LOCAL void audioCoreSendTask$/;"	f	typeref:typename:LOCAL void
audioCoreShow	src/audioLibCore.c	/^void audioCoreShow (void)$/;"	f	typeref:typename:void
audioCoreUnregCodec	src/audioLibCore.c	/^STATUS audioCoreUnregCodec$/;"	f	typeref:typename:STATUS
audioCoreUnregTransceiver	src/audioLibCore.c	/^STATUS audioCoreUnregTransceiver$/;"	f	typeref:typename:STATUS
audioCoreWrite	src/audioLibCore.c	/^LOCAL ssize_t audioCoreWrite$/;"	f	typeref:typename:LOCAL ssize_t
audioCreateWriteFile	vxTest/src/tmAudioNew.c	/^LOCAL STATUS audioCreateWriteFile(TEST_AUDIO_INFO * pAudInfo)$/;"	f	typeref:typename:LOCAL STATUS
audioData	src/audioLibCore.c	/^typedef struct audioData$/;"	s	file:
audioData	vxTest/src/tmAudioNew.h	/^    TEST_AUD_DATA_INFO audioData;$/;"	m	struct:audioInfo	typeref:typename:TEST_AUD_DATA_INFO
audioDataInfo	h/audioLibCore.h	/^typedef struct audioDataInfo$/;"	s
audioDev	h/audioLibCore.h	/^typedef struct audioDev$/;"	s
audioDevIdx	src/audioLibCore.c	/^LOCAL UINT32                audioDevIdx = 0;$/;"	v	typeref:typename:LOCAL UINT32
audioDevInfo	h/audioLibCore.h	/^typedef struct audioDevInfo$/;"	s
audioFlag	src/audioLibCore.c	/^typedef enum audioFlag$/;"	g	file:
audioInfo	vxTest/src/tmAudioNew.h	/^typedef struct audioInfo$/;"	s
audioIoctl	src/audioLibCore.c	/^LOCAL STATUS audioIoctl$/;"	f	typeref:typename:LOCAL STATUS
audioIoctlArg	h/audioLibCore.h	/^typedef union audioIoctlArg$/;"	u
audioLibCoreData	src/audioLibCore.c	/^typedef struct audioLibCoreData$/;"	s	file:
audioLibTestInit	vxTest/src/tmAudioNewLib.c	/^void audioLibTestInit()$/;"	f	typeref:typename:void
audioOpenReadFile	vxTest/src/tmAudioNew.c	/^LOCAL STATUS audioOpenReadFile$/;"	f	typeref:typename:LOCAL STATUS
audioScInit	src/audioLibCore.c	/^LOCAL STATUS audioScInit (void)$/;"	f	typeref:typename:LOCAL STATUS
audioScIoctl	src/audioLibCore.c	/^LOCAL STATUS audioScIoctl$/;"	f	typeref:typename:LOCAL STATUS
audioScMemValidate	src/audioLibCore.c	/^LOCAL STATUS audioScMemValidate$/;"	f	typeref:typename:LOCAL STATUS
audioState	src/audioLibCore.c	/^typedef enum audioState$/;"	g	file:
audioVolume	h/audioLibCore.h	/^typedef struct audioVolume$/;"	s
audioWavHeaderRead	src/audioLibWav.c	/^STATUS audioWavHeaderRead$/;"	f	typeref:typename:STATUS
audioWavHeaderReadBuf	src/audioLibWav.c	/^STATUS audioWavHeaderReadBuf$/;"	f	typeref:typename:STATUS
audioWavHeaderWrite	src/audioLibWav.c	/^STATUS audioWavHeaderWrite$/;"	f	typeref:typename:STATUS
audioWavHeaderWriteBuf	src/audioLibWav.c	/^STATUS audioWavHeaderWriteBuf$/;"	f	typeref:typename:STATUS
auto_selectable_formats	h/soc.h	/^    uint64_t *auto_selectable_formats;$/;"	m	struct:vxSndSocDaiOps	typeref:typename:uint64_t *
autodisable	h/control.h	/^    uint32_t autodisable:1;$/;"	m	struct:vxSndEnum	typeref:typename:uint32_t:1
autodisable	h/control.h	/^    uint32_t autodisable:1;$/;"	m	struct:vxSndMixerControl	typeref:typename:uint32_t:1
availMin	h/vxSoundCore.h	/^    SND_FRAMES_T            availMin;$/;"	m	struct:vxSndPcmMmapStaus	typeref:typename:SND_FRAMES_T
availPaths	h/audioLibCore.h	/^    UINT32  availPaths;     \/* available audio paths *\/$/;"	m	struct:audioDevInfo	typeref:typename:UINT32
avail_min	h/vxSoundCore.h	/^    SND_FRAMES_T avail_min;      \/* min avail frames for wakeup *\/$/;"	m	struct:vxSndPcmSwParams	typeref:typename:SND_FRAMES_T
avgBytesPerSec	src/audioLibWav.c	/^    UINT32  avgBytesPerSec;     \/* average transfer rate *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT32	file:
avgBytesPerSec	src/audioLibWav.c	/^    UINT32  avgBytesPerSec;     \/* average transfer rate *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT32	file:
avgBytesPerSec	vxTest/src/tmAudioNew.h	/^    UINT32  avgBytesPerSec;     \/* average transfer rate *\/$/;"	m	struct:tmPcmWaveFormat	typeref:typename:UINT32
be_hw_params_fixup	h/soc.h	/^    STATUS (*be_hw_params_fixup)(struct vxSndSocPcmRuntime * rtd,$/;"	m	struct:vxSndSocDaiLink	typeref:typename:STATUS (*)(struct vxSndSocPcmRuntime * rtd,VX_SND_PCM_HW_PARAMS * params)
be_hw_params_fixup	h/soc.h	/^    int (*be_hw_params_fixup)(VX_SND_SOC_PCM_RUNTIME *rtd,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:int (*)(VX_SND_SOC_PCM_RUNTIME * rtd,VX_SND_PCM_HW_PARAMS * params)
be_pcm_base	h/soc.h	/^    int be_pcm_base;    \/* base device ID for all BE PCMs *\/$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:int
bespoke_trigger	h/soc.h	/^    int (*bespoke_trigger)(SND_PCM_SUBSTREAM *, int,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:int (*)(SND_PCM_SUBSTREAM *,int,struct vxSndSocDai *)
bitWidth	vxTest/src/tmMachineDrv.h	/^    uint32_t    bitWidth;$/;"	m	struct:vxbAboxMachineDrvCtrl	typeref:typename:uint32_t
bitsPerSample	src/audioLibWav.c	/^    UINT16  bitsPerSample;      \/* bits per sample *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
bitsPerSample	src/audioLibWav.c	/^    UINT16  bitsPerSample;      \/* bits per sample *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT16	file:
bitsPerSample	vxTest/src/tmAudioNew.h	/^    UINT16  bitsPerSample;      \/* bits per sample *\/$/;"	m	struct:tmPcmWaveFormat	typeref:typename:UINT16
blockAlign	src/audioLibWav.c	/^    UINT16  blockAlign;         \/* bytes required for a single sample *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
blockAlign	src/audioLibWav.c	/^    UINT16  blockAlign;         \/* bytes required for a single sample *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT16	file:
blockAlign	vxTest/src/tmAudioNew.h	/^    UINT16  blockAlign;         \/* bytes required for a single sample *\/$/;"	m	struct:tmPcmWaveFormat	typeref:typename:UINT16
bufNum	src/audioLibCore.c	/^    UINT32      bufNum;$/;"	m	struct:audioLibCoreData	typeref:typename:UINT32	file:
bufSize	h/audioLibCore.h	/^    ssize_t         bufSize;$/;"	m	union:audioIoctlArg	typeref:typename:ssize_t
bufTime	h/audioLibCore.h	/^    UINT32          bufTime;            \/* buffer time (ms) *\/$/;"	m	union:audioIoctlArg	typeref:typename:UINT32
bufTime	src/audioLibCore.c	/^    UINT32          bufTime;$/;"	m	struct:audioData	typeref:typename:UINT32	file:
bufTime	src/audioLibCore.c	/^    UINT32      bufTime;$/;"	m	struct:audioLibCoreData	typeref:typename:UINT32	file:
bufferBytesMax	h/vxSoundCore.h	/^    uint32_t bufferBytesMax;    \/* max buffer size *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
bufferSize	h/vxSoundCore.h	/^    SND_FRAMES_T bufferSize;    \/* buffer size (frames) *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:SND_FRAMES_T
buffer_changed	h/vxSoundCore.h	/^    uint32_t buffer_changed:1;  \/* buffer allocation changed; set only in managed mode *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t:1
byteAlign	h/vxSoundCore.h	/^    size_t byteAlign;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:size_t
bytes	h/control.h	/^            } bytes;$/;"	m	union:vxSndCtrlDataValue::__anon7e192d73050a	typeref:union:vxSndCtrlDataValue::__anon7e192d73050a::__anon7e192d73090a
bytes	h/vxSoundCore.h	/^    unsigned long   bytes;$/;"	m	struct:vxSndSubstreamDmaBuf	typeref:typename:unsigned long
bytesPerSample	h/audioLibCore.h	/^    UINT8   bytesPerSample; \/* size of sample in device buffer *\/$/;"	m	struct:audioDevInfo	typeref:typename:UINT8
c	h/control.h	/^        VX_SND_CTL_REG_RW_PTR *c;$/;"	m	union:vxSndControl::__anon7e192d730a0a	typeref:typename:VX_SND_CTL_REG_RW_PTR *
c	h/vxSoundCore.h	/^        } c;$/;"	m	struct:vxSndSubstreamSyncPtr	typeref:union:vxSndSubstreamSyncPtr::__anoncbc58872020a
capture	h/soc.h	/^    struct vxSndSocPcmStream capture;$/;"	m	struct:vxSndSocDaiDriver	typeref:struct:vxSndSocPcmStream
captureName	vxTest/src/tmAudioNew.h	/^    char  captureName[SND_DEV_NAME_LEN];$/;"	m	struct:audioInfo	typeref:typename:char[]
captureOnly	h/soc.h	/^    unsigned int captureOnly:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
capture_dma_data	h/soc.h	/^    void *capture_dma_data;$/;"	m	struct:vxSndSocDai	typeref:typename:void *
card	h/soc.h	/^    VX_SND_SOC_CARD * card;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:VX_SND_SOC_CARD *
card	h/soc.h	/^    VX_SND_SOC_CARD *card;$/;"	m	struct:vxSndSocComponent	typeref:typename:VX_SND_SOC_CARD *
card	h/vxSoundCore.h	/^    SND_CARD *           card;$/;"	m	struct:vxSndCtrlDev	typeref:typename:SND_CARD *
card	h/vxSoundCore.h	/^    SND_CARD *           card;$/;"	m	struct:vxSndPcm	typeref:typename:SND_CARD *
card	h/vxSoundCore.h	/^    SND_CARD *      card;$/;"	m	struct:vxSndDevice	typeref:typename:SND_CARD *
cardMutex	h/soc.h	/^    SEM_ID cardMutex;   \/\/mutex$/;"	m	struct:vxSndSocCard	typeref:typename:SEM_ID
cardMutex	h/vxSoundCore.h	/^    SEM_ID   cardMutex;$/;"	m	struct:vxSoundCard	typeref:typename:SEM_ID
cardNode	h/soc.h	/^    DL_NODE cardNode; \/* not need to be first *\/$/;"	m	struct:vxSndSocComponent	typeref:typename:DL_NODE
cardNum	h/control.h	/^    int cardNum;$/;"	m	struct:vxSndCtrlCardInfo	typeref:typename:int
cardNum	h/vxSoundCore.h	/^    int      cardNum;$/;"	m	struct:vxSoundCard	typeref:typename:int
chanState	src/audioLibCore.c	/^    AUDIO_STATE         chanState;$/;"	m	struct:audioChanInfo	typeref:typename:AUDIO_STATE	file:
channelMask	src/audioLibWav.c	/^    UINT32  channelMask;$/;"	m	struct:extWaveFormat	typeref:typename:UINT32	file:
channels	h/audioLibCore.h	/^    UINT8   channels;$/;"	m	struct:audioDataInfo	typeref:typename:UINT8
channels	h/soc.h	/^    uint32_t channels;$/;"	m	struct:vxSndSocDai	typeref:typename:uint32_t
channels	h/vxSoundCore.h	/^    uint32_t channels;      \/* channels *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
channels	src/audioLibWav.c	/^    UINT16  channels;           \/* number of audio channels *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
channels	src/audioLibWav.c	/^    UINT16  channels;           \/* number of audio channels *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT16	file:
channels	vxTest/src/tmAudioNew.h	/^    UINT16  channels;           \/* number of audio channels *\/$/;"	m	struct:tmPcmWaveFormat	typeref:typename:UINT16
channels	vxTest/src/tmAudioNew.h	/^    UINT32   channels;$/;"	m	struct:tmAudioDataInfo	typeref:typename:UINT32
channels	vxTest/src/tmAudioNew.h	/^    UINT32 channels;$/;"	m	struct:audioInfo	typeref:typename:UINT32
channels	vxTest/src/tmAudioNew.h	/^    UINT32 channels;$/;"	m	struct:fileHeader	typeref:typename:UINT32
channelsMax	h/soc.h	/^    uint32_t channelsMax;   \/* max channels *\/$/;"	m	struct:vxSndSocPcmStream	typeref:typename:uint32_t
channelsMax	h/vxSoundCore.h	/^    uint32_t channelsMax;       \/* max channels *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
channelsMin	h/soc.h	/^    uint32_t channelsMin;   \/* min channels *\/$/;"	m	struct:vxSndSocPcmStream	typeref:typename:uint32_t
channelsMin	h/vxSoundCore.h	/^    uint32_t channelsMin;       \/* min channels *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
cleanupAudioDev	vxTest/src/tmAudioNew.c	/^STATUS cleanupAudioDev(TEST_AUDIO_INFO *audioInfo)$/;"	f	typeref:typename:STATUS
cleanupAudioInfo	vxTest/src/tmAudioNew.c	/^STATUS cleanupAudioInfo(TEST_AUDIO_INFO *audioInfo)$/;"	f	typeref:typename:STATUS
clearBitsFromLsb32	src/pcm.c	/^LOCAL uint32_t clearBitsFromLsb32$/;"	f	typeref:typename:LOCAL uint32_t
clearBitsFromLsb64	src/pcm.c	/^LOCAL uint64_t clearBitsFromLsb64$/;"	f	typeref:typename:LOCAL uint64_t
client_mutex	src/card.c	/^LOCAL SEM_ID  client_mutex = SEM_ID_NULL;$/;"	v	typeref:typename:LOCAL SEM_ID
close	h/audioLibCore.h	/^    FUNCPTR         close;$/;"	m	struct:audioDev	typeref:typename:FUNCPTR
close	h/soc.h	/^    STATUS (*close)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream)
close	h/vxSoundCore.h	/^    STATUS (*close) (SND_PCM_SUBSTREAM * substream);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream)
cnt	vxTest/src/tmAudioNew.h	/^    UINT32 cnt;$/;"	m	struct:ctrlInfoAll	typeref:typename:UINT32
codecNum	h/soc.h	/^    unsigned int codecNum;  \/\/num_codecs$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int
codecNum	h/soc.h	/^    unsigned int codecNum;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:unsigned int
codec_conf	h/soc.h	/^    VX_SND_SOC_CEDEC_CONF *codec_conf;$/;"	m	struct:vxSndSocCard	typeref:typename:VX_SND_SOC_CEDEC_CONF *
codecs	h/soc.h	/^    VX_SND_SOC_DAI_LINK_COMPONENT * codecs;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:VX_SND_SOC_DAI_LINK_COMPONENT *
component	h/soc.h	/^    struct vxSndSocComponent *component;$/;"	m	struct:vxSndSocDai	typeref:struct:vxSndSocComponent *
componentNum	h/soc.h	/^    int componentNum;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:int
component_chaining	h/soc.h	/^    unsigned int component_chaining:1;$/;"	m	struct:vxSndSocCard	typeref:typename:unsigned int:1
component_dev_list	h/soc.h	/^    DL_LIST component_dev_list;$/;"	m	struct:vxSndSocCard	typeref:typename:DL_LIST
component_list	src/card.c	/^LOCAL DL_LIST component_list =$/;"	v	typeref:typename:LOCAL DL_LIST
components	h/soc.h	/^    const char * components;$/;"	m	struct:vxSndSocCard	typeref:typename:const char *
components	h/soc.h	/^    struct vxSndSocComponent *components[]; \/* CPU\/Codec\/Platform *\/$/;"	m	struct:vxSndSocPcmRuntime	typeref:struct:vxSndSocComponent * []
configCtrlDev	vxTest/src/tmAudioNew.c	/^LOCAL STATUS configCtrlDev$/;"	f	typeref:typename:LOCAL STATUS
control	h/vxSoundCore.h	/^        VX_SND_PCM_MMAP_CTRL control;$/;"	m	union:vxSndSubstreamSyncPtr::__anoncbc58872020a	typeref:typename:VX_SND_PCM_MMAP_CTRL
control	h/vxSoundCore.h	/^    VX_SND_PCM_MMAP_CTRL   control;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:VX_SND_PCM_MMAP_CTRL
controlCnt	h/vxSoundCore.h	/^    int      controlCnt;$/;"	m	struct:vxSoundCard	typeref:typename:int
controlList	h/vxSoundCore.h	/^    DL_LIST  controlList;$/;"	m	struct:vxSoundCard	typeref:typename:DL_LIST
controlListSem	h/vxSoundCore.h	/^    SEM_ID   controlListSem;$/;"	m	struct:vxSoundCard	typeref:typename:SEM_ID
controls	h/soc.h	/^    VX_SND_CONTROL * controls;$/;"	m	struct:vxSndSocCard	typeref:typename:VX_SND_CONTROL *
controls	h/soc.h	/^    const VX_SND_CONTROL * controls;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:const VX_SND_CONTROL *
copy	h/soc.h	/^    STATUS (*copy)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream,int channel,unsigned long pos,void * buf,unsigned long bytes)
copy	h/vxSoundCore.h	/^    STATUS (*copy) (SND_PCM_SUBSTREAM * substream, int channel,$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream,int channel,size_t pos,void * buf,size_t bytes)
count	h/control.h	/^    uint32_t count;                 \/* count of values *\/$/;"	m	struct:vxSndCtrlInfo	typeref:typename:uint32_t
count	h/control.h	/^    uint32_t count;     \/* R: count of all controls on the card *\/$/;"	m	struct:vxSndCtrlList	typeref:typename:uint32_t
cpuNum	h/soc.h	/^    unsigned int cpuNum;    \/\/num_cpus$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int
cpuNum	h/soc.h	/^    unsigned int cpuNum;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:unsigned int
cpus	h/soc.h	/^    VX_SND_SOC_DAI_LINK_COMPONENT * cpus;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:VX_SND_SOC_DAI_LINK_COMPONENT *
ctrlConfInfo	vxTest/src/tmAudioNew.h	/^    TEST_CTRL_CONFIG_INFO * ctrlConfInfo;$/;"	m	struct:audioInfo	typeref:typename:TEST_CTRL_CONFIG_INFO *
ctrlConfigInfo	vxTest/src/tmAudioNew.h	/^typedef struct ctrlConfigInfo$/;"	s
ctrlDrvNum	src/control.c	/^LOCAL int     ctrlDrvNum = -1;$/;"	v	typeref:typename:LOCAL int
ctrlFd	vxTest/src/tmAudioNew.h	/^    INT32 ctrlFd;$/;"	m	struct:audioInfo	typeref:typename:INT32
ctrlInfo	vxTest/src/tmAudioNew.h	/^    VX_SND_CTRL_INFO ctrlInfo[AUD_TEST_CTRL_INFO_NUM];$/;"	m	struct:ctrlInfoAll	typeref:typename:VX_SND_CTRL_INFO[]
ctrlInfoAll	vxTest/src/tmAudioNew.h	/^typedef struct ctrlInfoAll$/;"	s
ctrlName	vxTest/src/tmAudioNew.h	/^    char * ctrlName;$/;"	m	struct:ctrlConfigInfo	typeref:typename:char *
ctrlScInit	src/control.c	/^LOCAL STATUS ctrlScInit (void)$/;"	f	typeref:typename:LOCAL STATUS
ctrlScIoctl	src/control.c	/^LOCAL STATUS ctrlScIoctl$/;"	f	typeref:typename:LOCAL STATUS
ctrlTestGet	vxTest/src/tmAudioNewLib.c	/^LOCAL int ctrlTestGet$/;"	f	typeref:typename:LOCAL int
ctrlTestGet1	vxTest/src/tmAudioNewLib.c	/^LOCAL int ctrlTestGet1$/;"	f	typeref:typename:LOCAL int
ctrlTestGet2	vxTest/src/tmAudioNewLib.c	/^LOCAL int ctrlTestGet2$/;"	f	typeref:typename:LOCAL int
ctrlTestSet	vxTest/src/tmAudioNewLib.c	/^LOCAL int ctrlTestSet$/;"	f	typeref:typename:LOCAL int
ctrlTestSet1	vxTest/src/tmAudioNewLib.c	/^LOCAL int ctrlTestSet1$/;"	f	typeref:typename:LOCAL int
ctrlTestSet2	vxTest/src/tmAudioNewLib.c	/^LOCAL int ctrlTestSet2$/;"	f	typeref:typename:LOCAL int
curPaths	src/audioLibCore.c	/^    UINT32          curPaths;$/;"	m	struct:audioData	typeref:typename:UINT32	file:
dac_tlv	vxTest/src/tmAudioNewLib.c	/^LOCAL unsigned int dac_tlv[] = {SNDRV_CTL_TLVT_DB_SCALE, 8, -10350, 0|50};$/;"	v	typeref:typename:LOCAL unsigned int[]
daiLink	h/soc.h	/^    VX_SND_SOC_DAI_LINK * daiLink;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:VX_SND_SOC_DAI_LINK *
dai_fmt	h/soc.h	/^    unsigned int dai_fmt;           \/* format to set on init *\/$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int
dai_link	h/soc.h	/^    struct vxSndSocDaiLink * dai_link;  \/* predefined links only *\/$/;"	m	struct:vxSndSocCard	typeref:struct:vxSndSocDaiLink *
dai_list	h/soc.h	/^    DL_LIST dai_list;\/\/struct list_head dai_list;$/;"	m	struct:vxSndSocComponent	typeref:typename:DL_LIST
dai_name	h/soc.h	/^    const char *dai_name;$/;"	m	struct:vxSndSocDaiLinkComponent	typeref:typename:const char *
dais	h/soc.h	/^    struct vxSndSocDai **dais;$/;"	m	struct:vxSndSocPcmRuntime	typeref:struct:vxSndSocDai **
data	h/control.h	/^            unsigned char data[512];$/;"	m	union:vxSndCtrlDataValue::__anon7e192d73050a::__anon7e192d73090a	typeref:typename:unsigned char[512]
data	h/vxSoundCore.h	/^    void *          data;$/;"	m	struct:vxSndDevice	typeref:typename:void *
dataInfo	h/audioLibCore.h	/^    AUDIO_DATA_INFO dataInfo;$/;"	m	union:audioIoctlArg	typeref:typename:AUDIO_DATA_INFO
dataInfo	src/audioLibCore.c	/^    AUDIO_DATA_INFO dataInfo;$/;"	m	struct:audioBufferInfo	typeref:typename:AUDIO_DATA_INFO	file:
dataInfo	src/audioLibCore.c	/^    AUDIO_DATA_INFO dataInfo;$/;"	m	struct:audioData	typeref:typename:AUDIO_DATA_INFO	file:
dataInfo	vxTest/src/tmAudio.c	/^    AUDIO_DATA_INFO dataInfo;$/;"	m	struct:atInfo	typeref:typename:AUDIO_DATA_INFO	file:
dataSize	vxTest/src/tmAudio.c	/^    ssize_t         dataSize;$/;"	m	struct:atInfo	typeref:typename:ssize_t	file:
dataSize	vxTest/src/tmAudioNew.h	/^    UINT32 dataSize;$/;"	m	struct:audioInfo	typeref:typename:UINT32
dataStart	vxTest/src/tmAudio.c	/^    ssize_t         dataStart;$/;"	m	struct:atInfo	typeref:typename:ssize_t	file:
dataStart	vxTest/src/tmAudioNew.h	/^    UINT32  dataStart;$/;"	m	struct:audioInfo	typeref:typename:UINT32
dd	vxTest/src/tmAudio.c	/^    DIR *           dd;$/;"	m	struct:atInfo	typeref:typename:DIR *	file:
defPaths	h/audioLibCore.h	/^    UINT32  defPaths;       \/* default audio in and out paths *\/$/;"	m	struct:audioDevInfo	typeref:typename:UINT32
delay	h/soc.h	/^    VX_SND_PCM (*delay)(SND_PCM_SUBSTREAM *,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:VX_SND_PCM (*)(SND_PCM_SUBSTREAM *,struct vxSndSocDai *)
delay	h/vxSoundCore.h	/^    SND_FRAMES_T delay; \/* extra delay; typically FIFO size *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:SND_FRAMES_T
dev	h/soc.h	/^    VXB_DEV_ID dev;$/;"	m	struct:vxSndSocCard	typeref:typename:VXB_DEV_ID
devFd	vxTest/src/tmAudioNew.h	/^    INT32 devFd;               \/* for PCM p *\/$/;"	m	struct:audioInfo	typeref:typename:INT32
devFdCapture	vxTest/src/tmAudioNew.h	/^    INT32 devFdCapture;        \/* for PCM c *\/$/;"	m	struct:audioInfo	typeref:typename:INT32
devFlag	src/audioLibCore.c	/^    AUDIO_FLAG      devFlag;$/;"	m	struct:audioData	typeref:typename:AUDIO_FLAG	file:
devHdr	h/vxSoundCore.h	/^    DEV_HDR                    devHdr; \/* devHdr should be the first member *\/$/;"	m	struct:vxSndPcmStream	typeref:typename:DEV_HDR
devHdr	h/vxSoundCore.h	/^    DEV_HDR              devHdr; \/* devHdr should be the first member *\/$/;"	m	struct:vxSndCtrlDev	typeref:typename:DEV_HDR
devHdr	src/audioLibCore.c	/^    DEV_HDR         devHdr;$/;"	m	struct:audioData	typeref:typename:DEV_HDR	file:
devInfo	h/audioLibCore.h	/^    AUDIO_DEV_INFO  devInfo;$/;"	m	struct:audioDev	typeref:typename:AUDIO_DEV_INFO
devInfo	h/audioLibCore.h	/^    AUDIO_DEV_INFO  devInfo;$/;"	m	union:audioIoctlArg	typeref:typename:AUDIO_DEV_INFO
devState	src/audioLibCore.c	/^    AUDIO_STATE     devState;$/;"	m	struct:audioData	typeref:typename:AUDIO_STATE	file:
deviceList	h/vxSoundCore.h	/^    DL_LIST  deviceList;$/;"	m	struct:vxSoundCard	typeref:typename:DL_LIST
deviceNum	h/control.h	/^    uint32_t deviceNum;     \/* device\/client number *\/$/;"	m	struct:vxSndCtrlId	typeref:typename:uint32_t
direct	h/vxSoundCore.h	/^    STREAM_DIRECT              direct;$/;"	m	struct:vxSndPcmStream	typeref:typename:STREAM_DIRECT
disable_route_checks	h/soc.h	/^    unsigned int disable_route_checks:1;$/;"	m	struct:vxSndSocCard	typeref:typename:unsigned int:1
dlc	h/soc.h	/^    struct vxSndSocDaiLinkComponent dlc;$/;"	m	struct:snd_soc_codec_conf	typeref:struct:vxSndSocDaiLinkComponent
dmaArea	h/vxSoundCore.h	/^    uint8_t * dmaArea;    \/* DMA buffer address used in audio playback\/capture*\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint8_t *
dmaAreaBytes	h/vxSoundCore.h	/^    size_t dmaAreaBytes;  \/* size of DMA buffer *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:size_t
dmaBuf	h/vxSoundCore.h	/^    VX_SND_SUBSTREAM_DMA_BUF    dmaBuf;$/;"	m	struct:vxSndPcmSubStream	typeref:typename:VX_SND_SUBSTREAM_DMA_BUF
dmaBufPtr	h/vxSoundCore.h	/^    VX_SND_SUBSTREAM_DMA_BUF * dmaBufPtr;   \/* allocated buffer *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:VX_SND_SUBSTREAM_DMA_BUF *
dmaPhyAddr	h/vxSoundCore.h	/^    PHYS_ADDR dmaPhyAddr; \/* physical bus address (not accessible from main CPU) *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:PHYS_ADDR
dmi_longname	h/soc.h	/^    char dmi_longname[80];$/;"	m	struct:vxSndSocCard	typeref:typename:char[80]
downStreamMsg	src/audioLibCore.c	/^    MSG_Q_ID            downStreamMsg;  \/* empty buffer from IO to device *\/$/;"	m	struct:audioChanInfo	typeref:typename:MSG_Q_ID	file:
dpcmCapture	h/soc.h	/^    unsigned int dpcmCapture:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
dpcmPlayback	h/soc.h	/^    unsigned int dpcmPlayback:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
dpcmState	h/soc.h	/^    VX_SND_SOC_DPCM_STATE dpcmState[SNDRV_PCM_STREAM_MAX];$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:VX_SND_SOC_DPCM_STATE[]
dpcmUserParams	h/soc.h	/^    VX_SND_PCM_HW_PARAMS  dpcmUserParams;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:VX_SND_PCM_HW_PARAMS
dpcm_be_dai_hw_free	src/soc.c	/^LOCAL void dpcm_be_dai_hw_free$/;"	f	typeref:typename:LOCAL void
dpcm_be_dai_trigger	src/soc.c	/^LOCAL STATUS dpcm_be_dai_trigger$/;"	f	typeref:typename:LOCAL STATUS
dpcm_dai_trigger_fe_be	src/soc.c	/^LOCAL STATUS dpcm_dai_trigger_fe_be$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_close	src/soc.c	/^LOCAL STATUS dpcm_fe_dai_close$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_hw_free	src/soc.c	/^LOCAL STATUS dpcm_fe_dai_hw_free$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_hw_params	src/soc.c	/^LOCAL STATUS dpcm_fe_dai_hw_params$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_open	src/soc.c	/^LOCAL STATUS dpcm_fe_dai_open$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_prepare	src/soc.c	/^LOCAL STATUS dpcm_fe_dai_prepare$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_trigger	src/soc.c	/^LOCAL STATUS dpcm_fe_dai_trigger$/;"	f	typeref:typename:LOCAL STATUS
dpcm_merged_chan	h/soc.h	/^    unsigned int dpcm_merged_chan:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
dpcm_merged_format	h/soc.h	/^    unsigned int dpcm_merged_format:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
dpcm_merged_rate	h/soc.h	/^    unsigned int dpcm_merged_rate:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
driver	h/control.h	/^    uint8_t driver[16];         \/* Driver name *\/$/;"	m	struct:vxSndCtrlCardInfo	typeref:typename:uint8_t[16]
driver	h/soc.h	/^    VX_SND_SOC_DAI_DRIVER *driver;$/;"	m	struct:vxSndSocDai	typeref:typename:VX_SND_SOC_DAI_DRIVER *
driver	h/soc.h	/^    const VX_SND_SOC_CMPT_DRV *driver;$/;"	m	struct:vxSndSocComponent	typeref:typename:const VX_SND_SOC_CMPT_DRV *
driver_name	h/soc.h	/^    const char * driver_name;$/;"	m	struct:vxSndSocCard	typeref:typename:const char *
drvNum	src/audioLibCore.c	/^    int         drvNum;$/;"	m	struct:audioLibCoreData	typeref:typename:int	file:
drvdata	h/soc.h	/^    void *drvdata;$/;"	m	struct:vxSndSocCard	typeref:typename:void *
dummyCodec	src/vxSoundUtils.c	/^LOCAL const VX_SND_SOC_CMPT_DRV dummyCodec = {$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_CMPT_DRV
dummyDai	src/vxSoundUtils.c	/^LOCAL VX_SND_SOC_DAI_DRIVER dummyDai = {$/;"	v	typeref:typename:LOCAL VX_SND_SOC_DAI_DRIVER
dummyDaiFormats	src/vxSoundUtils.c	/^LOCAL UINT64 dummyDaiFormats =$/;"	v	typeref:typename:LOCAL UINT64
dummyDaiLinkCmpnt	vxTest/src/tmMachineDrv.c	/^LOCAL VX_SND_SOC_DAI_LINK_COMPONENT dummyDaiLinkCmpnt[] =$/;"	v	typeref:typename:LOCAL VX_SND_SOC_DAI_LINK_COMPONENT[]
dummyDaiOps	src/vxSoundUtils.c	/^LOCAL const VX_SND_SOC_DAI_OPS dummyDaiOps = {$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_DAI_OPS
dummyDmaHardware	src/vxSoundUtils.c	/^LOCAL const VX_SND_PCM_HARDWARE dummyDmaHardware = {$/;"	v	typeref:typename:LOCAL const VX_SND_PCM_HARDWARE
dummyDmaOpen	src/vxSoundUtils.c	/^LOCAL int dummyDmaOpen$/;"	f	typeref:typename:LOCAL int
dummyHwParams	vxTest/src/tmMachineDrv.c	/^LOCAL int32_t dummyHwParams$/;"	f	typeref:typename:LOCAL int32_t
dummyOps	vxTest/src/tmMachineDrv.c	/^LOCAL VX_SND_SOC_OPS dummyOps =$/;"	v	typeref:typename:LOCAL VX_SND_SOC_OPS
dummyPlatform	src/vxSoundUtils.c	/^LOCAL const VX_SND_SOC_CMPT_DRV dummyPlatform = {$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_CMPT_DRV
dynamic	h/soc.h	/^    unsigned int dynamic:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
empty	h/vxSoundCore.h	/^             empty:1;$/;"	m	struct:vxSndInterval	typeref:typename:uint32_t:1
endianness	h/soc.h	/^    uint32_t endianness:1;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:uint32_t:1
entry	vxTest/src/tmAudio.c	/^    DIRENT *        entry;$/;"	m	struct:atInfo	typeref:typename:DIRENT *	file:
enumerated	h/control.h	/^            } enumerated;$/;"	m	union:vxSndCtrlDataValue::__anon7e192d73050a	typeref:union:vxSndCtrlDataValue::__anon7e192d73050a::__anon7e192d73080a
enumerated	h/control.h	/^            } enumerated;$/;"	m	union:vxSndCtrlInfo::__anon7e192d73010a	typeref:struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730408
enumerated	vxTest/src/tmAudioNew.h	/^            } enumerated;$/;"	m	union:ctrlConfigInfo::__anon75eec52c020a	typeref:struct:ctrlConfigInfo::__anon75eec52c020a::__anon75eec52c0508
exit	h/soc.h	/^    void (*exit)(struct vxSndSocPcmRuntime * rtd);$/;"	m	struct:vxSndSocDaiLink	typeref:typename:void (*)(struct vxSndSocPcmRuntime * rtd)
extFileHeader	src/audioLibWav.c	/^typedef struct extFileHeader$/;"	s	file:
extFormat	src/audioLibWav.c	/^    EXT_WAVE_FORMAT extFormat;$/;"	m	struct:extFileHeader	typeref:typename:EXT_WAVE_FORMAT	file:
extSize	src/audioLibWav.c	/^    UINT16  extSize;$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
extWaveFormat	src/audioLibWav.c	/^typedef struct extWaveFormat$/;"	s	file:
extension	h/audioLibCore.h	/^    void *          extension;      \/* optional driver extensions *\/$/;"	m	struct:audioDev	typeref:typename:void *
fd	vxTest/src/tmAudio.c	/^    int             fd;$/;"	m	struct:atInfo	typeref:typename:int	file:
fileHeader	vxTest/src/tmAudioNew.h	/^typedef struct fileHeader$/;"	s
filesList	h/vxSoundCore.h	/^    DL_LIST  filesList;     \/* all files associated to this card *\/$/;"	m	struct:vxSoundCard	typeref:typename:DL_LIST
flags	h/vxSoundCore.h	/^    uint32_t flags;$/;"	m	struct:vxSndSubstreamSyncPtr	typeref:typename:uint32_t
for_each_comp_order	h/soc.h	/^#define for_each_comp_order(/;"	d
format	h/vxSoundCore.h	/^    uint32_t format;    \/* SNDRV_PCM_FORMAT_* *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
format	vxTest/src/tmAudioNew.h	/^    UINT32   format;$/;"	m	struct:tmAudioDataInfo	typeref:typename:UINT32
format	vxTest/src/tmAudioNew.h	/^    UINT32 format;$/;"	m	struct:fileHeader	typeref:typename:UINT32
formatBits	h/vxSoundCore.h	/^    uint64_t        formatBits;$/;"	m	struct:vxSndPcmHwParams	typeref:typename:uint64_t
formatBits	h/vxSoundCore.h	/^    uint64_t        formatBits;$/;"	m	struct:vxSndPcmSupportHwParams	typeref:typename:uint64_t
formatTag	src/audioLibWav.c	/^    UINT16  formatTag;          \/* type of wave form data *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
formatTag	src/audioLibWav.c	/^    UINT16  formatTag;          \/* type of wave form data *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT16	file:
formatTag	vxTest/src/tmAudioNew.h	/^    UINT16  formatTag;          \/* type of wave form data *\/$/;"	m	struct:tmPcmWaveFormat	typeref:typename:UINT16
formats	h/soc.h	/^    uint64_t formats;           \/* SNDRV_PCM_FMTBIT_* *\/$/;"	m	struct:vxSndSocPcmStream	typeref:typename:uint64_t
formats	h/vxSoundCore.h	/^    uint64_t formats;           \/* SNDRV_PCM_FMTBIT_* *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint64_t
frameBits	h/vxSoundCore.h	/^    uint32_t frameBits;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
fully_routed	h/soc.h	/^    unsigned int fully_routed:1;$/;"	m	struct:vxSndSocCard	typeref:typename:unsigned int:1
gCardNumber	src/vxSoundCore.c	/^LOCAL int gCardNumber = 0;$/;"	v	typeref:typename:LOCAL int
gDebugCard	src/card.c	/^LOCAL VX_SND_SOC_CARD * gDebugCard = NULL;$/;"	v	typeref:typename:LOCAL VX_SND_SOC_CARD *
g_buffer	vxTest/src/tmAudioNew.c	/^LOCAL unsigned char g_buffer[16*1024];   \/* some random data *\/$/;"	v	typeref:typename:LOCAL unsigned char[]
g_cardRegisted	vxTest/src/tmAudioNewLib.c	/^LOCAL BOOL g_cardRegisted = FALSE;$/;"	v	typeref:typename:LOCAL BOOL
g_testCmpDrv1	vxTest/src/tmAudioNewLib.c	/^LOCAL const VX_SND_SOC_CMPT_DRV g_testCmpDrv1 =$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_CMPT_DRV
g_testCmpDrv2	vxTest/src/tmAudioNewLib.c	/^LOCAL const VX_SND_SOC_CMPT_DRV g_testCmpDrv2 =$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_CMPT_DRV
g_testCmpDrv3	vxTest/src/tmAudioNewLib.c	/^LOCAL const VX_SND_SOC_CMPT_DRV g_testCmpDrv3 =$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_CMPT_DRV
g_testCodecVxb	vxTest/src/tmMachineDrv.c	/^struct vxbDev g_testCodecVxb;$/;"	v	typeref:struct:vxbDev
g_testControls_1	vxTest/src/tmAudioNewLib.c	/^LOCAL VX_SND_CONTROL g_testControls_1[] =$/;"	v	typeref:typename:LOCAL VX_SND_CONTROL[]
g_testControls_2	vxTest/src/tmAudioNewLib.c	/^LOCAL VX_SND_CONTROL g_testControls_2[] =$/;"	v	typeref:typename:LOCAL VX_SND_CONTROL[]
g_testControls_3	vxTest/src/tmAudioNewLib.c	/^LOCAL VX_SND_CONTROL g_testControls_3[] =$/;"	v	typeref:typename:LOCAL VX_SND_CONTROL[]
g_testCpuVxb	vxTest/src/tmMachineDrv.c	/^struct vxbDev g_testCpuVxb;$/;"	v	typeref:struct:vxbDev
g_testCtrl	vxTest/src/tmAudioNew.c	/^SND_CONTROL_DEV * g_testCtrl = NULL;$/;"	v	typeref:typename:SND_CONTROL_DEV *
g_testCtrlConf	vxTest/src/tmAudioNew.c	/^LOCAL TEST_CTRL_CONFIG_INFO g_testCtrlConf[] =$/;"	v	typeref:typename:LOCAL TEST_CTRL_CONFIG_INFO[]
g_testCtrlInfo	vxTest/src/tmAudioNew.c	/^LOCAL TEST_CTRL_INFO_ALL g_testCtrlInfo;$/;"	v	typeref:typename:LOCAL TEST_CTRL_INFO_ALL
g_testCtrlName	vxTest/src/tmAudioNew.c	/^LOCAL char * g_testCtrlName[AUD_TEST_CTRL_MAX_NUM] = {NULL};$/;"	v	typeref:typename:LOCAL char * []
g_testFilePara	vxTest/src/tmAudioNew.c	/^LOCAL TEST_FILE_HEADER_PARA g_testFilePara[FILE_HEAD_BOTT] =$/;"	v	typeref:typename:LOCAL TEST_FILE_HEADER_PARA[]
g_testInterval	vxTest/src/tmAudioNew.c	/^VX_SND_INTERVAL g_testInterval[VX_SND_HW_PARAM_IDX_MAX] =$/;"	v	typeref:typename:VX_SND_INTERVAL[]
g_testLibCtrlConf	vxTest/src/tmAudioNewLib.c	/^LOCAL TEST_CTRL_CONFIG_INFO g_testLibCtrlConf[] =$/;"	v	typeref:typename:LOCAL TEST_CTRL_CONFIG_INFO[]
g_testLibCtrlInfo	vxTest/src/tmAudioNewLib.c	/^LOCAL TEST_CTRL_INFO_ALL g_testLibCtrlInfo;$/;"	v	typeref:typename:LOCAL TEST_CTRL_INFO_ALL
g_testLibCtrlList	vxTest/src/tmAudioNewLib.c	/^LOCAL VX_SND_CTRL_LIST g_testLibCtrlList;$/;"	v	typeref:typename:LOCAL VX_SND_CTRL_LIST
g_testPlatVxb	vxTest/src/tmMachineDrv.c	/^struct vxbDev g_testPlatVxb;$/;"	v	typeref:struct:vxbDev
g_testSndPcmDbgMask	vxTest/src/tmAudioNew.c	/^UINT32 g_testSndPcmDbgMask = (TEST_SND_AUD_DBG_ERR);$/;"	v	typeref:typename:UINT32
g_testSocCardVxb	vxTest/src/tmMachineDrv.c	/^struct vxbDev g_testSocCardVxb;$/;"	v	typeref:struct:vxbDev
g_testctrlList	vxTest/src/tmAudioNew.c	/^LOCAL VX_SND_CTRL_LIST g_testctrlList;$/;"	v	typeref:typename:LOCAL VX_SND_CTRL_LIST
get	h/control.h	/^    VX_SND_CTL_GET_PTR     get;$/;"	m	struct:vxSndControl	typeref:typename:VX_SND_CTL_GET_PTR
getBuf	h/control.h	/^    struct vxSndCtrlId  * getBuf; \/* R: IDs *\/$/;"	m	struct:vxSndCtrlList	typeref:struct:vxSndCtrlId *
getCtrlInfo	vxTest/src/tmAudioNew.c	/^LOCAL STATUS getCtrlInfo$/;"	f	typeref:typename:LOCAL STATUS
getCtrlInfoEnum	vxTest/src/tmAudioNew.c	/^LOCAL STATUS getCtrlInfoEnum$/;"	f	typeref:typename:LOCAL STATUS
getWavData	vxTest/src/tmAudioNew.c	/^STATUS getWavData$/;"	f	typeref:typename:STATUS
get_channel_map	h/soc.h	/^    int (*get_channel_map)(struct vxSndSocDai *dai,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:int (*)(struct vxSndSocDai * dai,unsigned int * tx_num,unsigned int * tx_slot,unsigned int * rx_num,unsigned int * rx_slot)
get_sdw_stream	h/soc.h	/^    void *(*get_sdw_stream)(struct vxSndSocDai *dai, int direction);$/;"	m	struct:vxSndSocDaiOps	typeref:typename:void * (*)(struct vxSndSocDai * dai,int direction)
hw	h/vxSoundCore.h	/^    VX_SND_PCM_HARDWARE hw;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:VX_SND_PCM_HARDWARE
hwFree	h/soc.h	/^    STATUS (*hwFree)(SND_PCM_SUBSTREAM *,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM *,struct vxSndSocDai *)
hwFree	h/soc.h	/^    STATUS (*hwFree)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream)
hwFree	h/soc.h	/^    int  (*hwFree)  (SND_PCM_SUBSTREAM *);$/;"	m	struct:vxSndSocOps	typeref:typename:int (*)(SND_PCM_SUBSTREAM *)
hwFree	h/vxSoundCore.h	/^    STATUS (*hwFree) (SND_PCM_SUBSTREAM * substream);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream)
hwParamIntervalIdx	h/vxSoundCore.h	/^typedef enum hwParamIntervalIdx$/;"	g
hwParams	h/soc.h	/^    STATUS (*hwParams)(SND_PCM_SUBSTREAM *,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM *,VX_SND_PCM_HW_PARAMS *,struct vxSndSocDai *)
hwParams	h/soc.h	/^    STATUS (*hwParams)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream,VX_SND_PCM_HW_PARAMS * params)
hwParams	h/soc.h	/^    int  (*hwParams)(SND_PCM_SUBSTREAM *, VX_SND_PCM_HW_PARAMS *);$/;"	m	struct:vxSndSocOps	typeref:typename:int (*)(SND_PCM_SUBSTREAM *,VX_SND_PCM_HW_PARAMS *)
hwParams	h/vxSoundCore.h	/^    STATUS (*hwParams) (SND_PCM_SUBSTREAM *substream, VX_SND_PCM_HW_PARAMS * params);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream,VX_SND_PCM_HW_PARAMS * params)
hwPtr	h/vxSoundCore.h	/^    SND_FRAMES_T            hwPtr;$/;"	m	struct:vxSndPcmMmapStaus	typeref:typename:SND_FRAMES_T
hwPtrUpdateTimestamp	h/vxSoundCore.h	/^    unsigned long hwPtrUpdateTimestamp; \/* Time when hw_ptr is updated *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:unsigned long
id	h/control.h	/^    struct vxSndCtrlId     id;$/;"	m	struct:vxSndControl	typeref:struct:vxSndCtrlId
id	h/control.h	/^    struct vxSndCtrlId id;          \/* W: control ID *\/$/;"	m	struct:vxSndCtrlInfo	typeref:struct:vxSndCtrlId
id	h/control.h	/^    struct vxSndCtrlId id;  \/* W: control ID *\/$/;"	m	struct:vxSndCtrlDataValue	typeref:struct:vxSndCtrlId
id	h/control.h	/^    uint8_t id[16];$/;"	m	struct:vxSndCtrlCardInfo	typeref:typename:uint8_t[16]
id	h/soc.h	/^    int id; \/* optional ID for machine driver link identification *\/$/;"	m	struct:vxSndSocDaiLink	typeref:typename:int
id	h/soc.h	/^    int id;$/;"	m	struct:vxSndSocComponent	typeref:typename:int
id	h/soc.h	/^    int id;$/;"	m	struct:vxSndSocDai	typeref:typename:int
id	h/soc.h	/^    uint32_t id;$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:uint32_t
idlePinctrlId	vxTest/src/tmMachineDrv.h	/^    uint32_t    idlePinctrlId;$/;"	m	struct:vxbAboxMachineDrvCtrl	typeref:typename:uint32_t
idle_bias_on	h/soc.h	/^    uint32_t idle_bias_on:1;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:uint32_t:1
iface	h/control.h	/^    VX_SND_CTRL_TYPE iface; \/* interface identifier *\/$/;"	m	struct:vxSndCtrlId	typeref:typename:VX_SND_CTRL_TYPE
ignore	h/soc.h	/^    unsigned int ignore:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
ignore_machine	h/soc.h	/^    const char *ignore_machine;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:const char *
ignore_pmdown_time	h/soc.h	/^    unsigned int ignore_pmdown_time:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
ignore_suspend	h/soc.h	/^    unsigned int ignore_suspend:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
inChanInfo	src/audioLibCore.c	/^    AUDIO_CHAN_INFO inChanInfo;$/;"	m	struct:audioData	typeref:typename:AUDIO_CHAN_INFO	file:
info	h/control.h	/^    VX_SND_CTL_INFO_PTR    info;$/;"	m	struct:vxSndControl	typeref:typename:VX_SND_CTL_INFO_PTR
info	h/vxSoundCore.h	/^    uint32_t        info;$/;"	m	struct:vxSndPcmHwParams	typeref:typename:uint32_t
info	h/vxSoundCore.h	/^    uint32_t info;              \/* SNDRV_PCM_INFO_* *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
info	h/vxSoundCore.h	/^    uint32_t info;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
init	h/soc.h	/^    STATUS (*init)(struct vxSndSocComponent *component);$/;"	m	struct:vxSndSocComponent	typeref:typename:STATUS (*)(struct vxSndSocComponent * component)
init	h/soc.h	/^    STATUS (*init)(struct vxSndSocPcmRuntime * rtd);$/;"	m	struct:vxSndSocDaiLink	typeref:typename:STATUS (*)(struct vxSndSocPcmRuntime * rtd)
instantiated	h/soc.h	/^    unsigned int instantiated:1;$/;"	m	struct:vxSndSocCard	typeref:typename:unsigned int:1
instantiated	h/vxSoundCore.h	/^    BOOL     instantiated;$/;"	m	struct:vxSoundCard	typeref:typename:BOOL
integer	h/vxSoundCore.h	/^             integer:1,$/;"	m	struct:vxSndInterval	typeref:typename:uint32_t:1
integer32	h/control.h	/^            } integer32;$/;"	m	union:vxSndCtrlDataValue::__anon7e192d73050a	typeref:union:vxSndCtrlDataValue::__anon7e192d73050a::__anon7e192d73060a
integer32	h/control.h	/^            } integer32;$/;"	m	union:vxSndCtrlInfo::__anon7e192d73010a	typeref:struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730208
integer32	vxTest/src/tmAudioNew.h	/^            } integer32;$/;"	m	union:ctrlConfigInfo::__anon75eec52c020a	typeref:struct:ctrlConfigInfo::__anon75eec52c020a::__anon75eec52c0308
integer64	h/control.h	/^            } integer64;$/;"	m	union:vxSndCtrlDataValue::__anon7e192d73050a	typeref:union:vxSndCtrlDataValue::__anon7e192d73050a::__anon7e192d73070a
integer64	h/control.h	/^            } integer64;$/;"	m	union:vxSndCtrlInfo::__anon7e192d73010a	typeref:struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730308
integer64	vxTest/src/tmAudioNew.h	/^            } integer64;$/;"	m	union:ctrlConfigInfo::__anon75eec52c020a	typeref:struct:ctrlConfigInfo::__anon75eec52c020a::__anon75eec52c0408
internal	h/vxSoundCore.h	/^    BOOL                 internal;$/;"	m	struct:vxSndPcm	typeref:typename:BOOL
intervalOverlapCalculate	src/pcm.c	/^LOCAL BOOL intervalOverlapCalculate$/;"	f	typeref:typename:LOCAL BOOL
intervals	h/vxSoundCore.h	/^    VX_SND_INTERVAL intervals[VX_SND_HW_PARAM_IDX_MAX];$/;"	m	struct:vxSndPcmHwParams	typeref:typename:VX_SND_INTERVAL[]
intervals	h/vxSoundCore.h	/^    VX_SND_INTERVAL intervals[VX_SND_HW_PARAM_IDX_MAX];$/;"	m	struct:vxSndPcmSupportHwParams	typeref:typename:VX_SND_INTERVAL[]
invert	h/control.h	/^    uint32_t invert:1;$/;"	m	struct:vxSndMixerControl	typeref:typename:uint32_t:1
ioMutex	h/soc.h	/^    SEM_ID  ioMutex;$/;"	m	struct:vxSndSocComponent	typeref:typename:SEM_ID
ioSem	h/vxSoundCore.h	/^    SEM_ID                     ioSem;$/;"	m	struct:vxSndPcmStream	typeref:typename:SEM_ID
ioSem	h/vxSoundCore.h	/^    SEM_ID               ioSem;$/;"	m	struct:vxSndCtrlDev	typeref:typename:SEM_ID
ioSem	src/audioLibCore.c	/^    SEM_ID          ioSem;$/;"	m	struct:audioData	typeref:typename:SEM_ID	file:
ioSem	src/audioLibCore.c	/^    SEM_ID      ioSem;$/;"	m	struct:audioLibCoreData	typeref:typename:SEM_ID	file:
ioctl	h/audioLibCore.h	/^    FUNCPTR         ioctl;$/;"	m	struct:audioDev	typeref:typename:FUNCPTR
ioctl	h/soc.h	/^    STATUS (*ioctl)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream,uint32_t cmd,void * arg)
ioctl	h/vxSoundCore.h	/^    STATUS (*ioctl) (SND_PCM_SUBSTREAM * substream, uint32_t cmd, void * arg);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream,uint32_t cmd,void * arg)
ioctlAudioTbl	src/audioLibCore.c	/^LOCAL const SC_IOCTL_TBL_ENTRY  ioctlAudioTbl[] =$/;"	v	typeref:typename:LOCAL const SC_IOCTL_TBL_ENTRY[]
ioctlCtrlTbl	src/control.c	/^LOCAL const SC_IOCTL_TBL_ENTRY  ioctlCtrlTbl[] =$/;"	v	typeref:typename:LOCAL const SC_IOCTL_TBL_ENTRY[]
ioctlPcmTbl	src/pcm.c	/^LOCAL const SC_IOCTL_TBL_ENTRY  ioctlPcmTbl[] =$/;"	v	typeref:typename:LOCAL const SC_IOCTL_TBL_ENTRY[]
isDaiSupportStream	src/soc.c	/^LOCAL BOOL isDaiSupportStream$/;"	f	typeref:typename:LOCAL BOOL
isDaiSupportStream	vxTest/src/tmAudioNewLib.c	/^LOCAL BOOL isDaiSupportStream$/;"	f	typeref:typename:LOCAL BOOL
isOpened	h/vxSoundCore.h	/^    BOOL                        isOpened;$/;"	m	struct:vxSndPcmSubStream	typeref:typename:BOOL
isOpened	h/vxSoundCore.h	/^    BOOL                       isOpened;$/;"	m	struct:vxSndPcmStream	typeref:typename:BOOL
isOpened	h/vxSoundCore.h	/^    BOOL                 isOpened;$/;"	m	struct:vxSndCtrlDev	typeref:typename:BOOL
isOpened	src/audioLibCore.c	/^    BOOL            isOpened;$/;"	m	struct:audioData	typeref:typename:BOOL	file:
item	h/control.h	/^            uint32_t item[128];$/;"	m	union:vxSndCtrlDataValue::__anon7e192d73050a::__anon7e192d73080a	typeref:typename:uint32_t[128]
itemNum	h/control.h	/^    uint32_t itemNum;$/;"	m	struct:vxSndEnum	typeref:typename:uint32_t
itemSelected	h/control.h	/^            uint32_t itemSelected;          \/* W: item number *\/$/;"	m	struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730408	typeref:typename:uint32_t
itemSum	h/control.h	/^            uint32_t itemSum;               \/* R: number of items *\/$/;"	m	struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730408	typeref:typename:uint32_t
late_probe	h/soc.h	/^    STATUS (*late_probe)(struct vxSndSocCard *card);$/;"	m	struct:vxSndSocCard	typeref:typename:STATUS (*)(struct vxSndSocCard * card)
left	h/audioLibCore.h	/^    UINT8   left;               \/* left volume *\/$/;"	m	struct:audioVolume	typeref:typename:UINT8
lenDATA	src/audioLibWav.c	/^    UINT32          lenDATA;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
lenDATA	src/audioLibWav.c	/^    UINT32          lenDATA;$/;"	m	struct:pcmFileHeader	typeref:typename:UINT32	file:
lenDATA	vxTest/src/tmAudioNew.h	/^    UINT32          lenDATA;$/;"	m	struct:wavFileHeader	typeref:typename:UINT32
lenFACT	src/audioLibWav.c	/^    UINT32          lenFACT;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
lenFMT	src/audioLibWav.c	/^    UINT32          lenFMT;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
lenFMT	src/audioLibWav.c	/^    UINT32          lenFMT;$/;"	m	struct:pcmFileHeader	typeref:typename:UINT32	file:
lenFMT	vxTest/src/tmAudioNew.h	/^    UINT32          lenFMT;$/;"	m	struct:wavFileHeader	typeref:typename:UINT32
lenRIFF	src/audioLibWav.c	/^    UINT32          lenRIFF;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
lenRIFF	src/audioLibWav.c	/^    UINT32          lenRIFF;$/;"	m	struct:pcmFileHeader	typeref:typename:UINT32	file:
lenRIFF	vxTest/src/tmAudioNew.h	/^    UINT32          lenRIFF;$/;"	m	struct:wavFileHeader	typeref:typename:UINT32
length	h/control.h	/^    uint32_t length;       \/* in bytes aligned to 4 *\/$/;"	m	struct:vxSndCtlTlv	typeref:typename:uint32_t
level	vxTest/src/tmAudioNew.h	/^    UINT32          level;$/;"	m	struct:vxbDev	typeref:typename:UINT32
list	h/soc.h	/^    DL_LIST list;$/;"	m	struct:vxSndSocCard	typeref:typename:DL_LIST
littleEndian	h/pcm.h	/^    int8_t  littleEndian;   \/* 0 = big endian, 1 = little endian, -1 = others *\/$/;"	m	struct:vxSndPcmFormatInfo	typeref:typename:int8_t
long_name	h/soc.h	/^    const char * long_name;$/;"	m	struct:vxSndSocCard	typeref:typename:const char *
longname	h/control.h	/^    uint8_t longname[80];       \/* name + info text about soundcard *\/$/;"	m	struct:vxSndCtrlCardInfo	typeref:typename:uint8_t[80]
main	vxTest/src/tmAudio.c	/^int main$/;"	f	typeref:typename:int
main	vxTest/src/tmAudioNew.c	/^int main$/;"	f	typeref:typename:int
main	vxTest/src/tmAudioNewLib.c	/^int main$/;"	f	typeref:typename:int
mark_hw_params	h/soc.h	/^    SND_PCM_SUBSTREAM *mark_hw_params;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:SND_PCM_SUBSTREAM *
mark_pm	h/soc.h	/^    void *mark_pm;$/;"	m	struct:vxSndSocComponent	typeref:typename:void *
mark_startup	h/soc.h	/^    SND_PCM_SUBSTREAM *mark_startup;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:SND_PCM_SUBSTREAM *
mark_trigger	h/soc.h	/^    SND_PCM_SUBSTREAM *mark_trigger;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:SND_PCM_SUBSTREAM *
mask	h/control.h	/^    uint32_t mask;$/;"	m	struct:vxSndEnum	typeref:typename:uint32_t
max	h/control.h	/^            uint32_t max;$/;"	m	struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730208	typeref:typename:uint32_t
max	h/control.h	/^            uint64_t max;$/;"	m	struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730308	typeref:typename:uint64_t
max	h/control.h	/^    int max;$/;"	m	struct:vxSndMixerControl	typeref:typename:int
max	h/vxSoundCore.h	/^    uint32_t max;$/;"	m	struct:vxSndInterval	typeref:typename:uint32_t
max	src/soc.c	/^# define max(/;"	d	file:
maxChannels	h/audioLibCore.h	/^    UINT8   maxChannels;    \/* device maximum channels *\/$/;"	m	struct:audioDevInfo	typeref:typename:UINT8
mclk	vxTest/src/tmMachineDrv.h	/^    VXB_CLK_ID  mclk;   \/\/clk_mclk$/;"	m	struct:vxbAboxMachineDrvCtrl	typeref:typename:VXB_CLK_ID
mclkValue	vxTest/src/tmMachineDrv.h	/^    uint64_t    mclkValue;  \/\/mclk_value$/;"	m	struct:vxbAboxMachineDrvCtrl	typeref:typename:uint64_t
min	h/control.h	/^            uint32_t min;$/;"	m	struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730208	typeref:typename:uint32_t
min	h/control.h	/^            uint64_t min;$/;"	m	struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730308	typeref:typename:uint64_t
min	h/control.h	/^    int min;$/;"	m	struct:vxSndMixerControl	typeref:typename:int
min	h/vxSoundCore.h	/^    uint32_t min;$/;"	m	struct:vxSndInterval	typeref:typename:uint32_t
minAlign	h/vxSoundCore.h	/^    SND_FRAMES_T minAlign;  \/* Min alignment for the format *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:SND_FRAMES_T
mmap	h/soc.h	/^    STATUS (*mmap)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream)
module_get_upon_open	h/soc.h	/^    uint32_t module_get_upon_open:1;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:uint32_t:1
muteStream	h/soc.h	/^    STATUS (*muteStream)(struct vxSndSocDai *dai, int mute, int stream);$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(struct vxSndSocDai * dai,int mute,int stream)
name	h/audioLibCore.h	/^    char    name[AUDIO_DEV_NAME_LEN + 1];$/;"	m	struct:audioDevInfo	typeref:typename:char[]
name	h/control.h	/^            char name[SND_DEV_NAME_LEN];    \/* R: value name *\/$/;"	m	struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730408	typeref:typename:char[]
name	h/control.h	/^    char *  name;$/;"	m	struct:vxSndCtrlId	typeref:typename:char *
name	h/control.h	/^    uint8_t name[32];           \/* Short name of soundcard *\/$/;"	m	struct:vxSndCtrlCardInfo	typeref:typename:uint8_t[32]
name	h/soc.h	/^    char *name;$/;"	m	struct:vxSndSocComponent	typeref:typename:char *
name	h/soc.h	/^    const char * name;           \/* Codec name *\/$/;"	m	struct:vxSndSocDaiLink	typeref:typename:const char *
name	h/soc.h	/^    const char * name;$/;"	m	struct:vxSndSocCard	typeref:typename:const char *
name	h/soc.h	/^    const char *name;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:const char *
name	h/soc.h	/^    const char *name;$/;"	m	struct:vxSndSocDai	typeref:typename:const char *
name	h/soc.h	/^    const char *name;$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:const char *
name	h/soc.h	/^    const char *name;$/;"	m	struct:vxSndSocDaiLinkComponent	typeref:typename:const char *
name	h/vxSoundCore.h	/^    char                        name[SND_DEV_NAME_LEN];$/;"	m	struct:vxSndPcmSubStream	typeref:typename:char[]
name	h/vxSoundCore.h	/^    char                 name[SND_DEV_NAME_LEN];$/;"	m	struct:vxSndCtrlDev	typeref:typename:char[]
name	h/vxSoundCore.h	/^    char                 name[SND_DEV_NAME_LEN];$/;"	m	struct:vxSndPcm	typeref:typename:char[]
name	h/vxSoundCore.h	/^    char     name[SND_DEV_NAME_LEN];$/;"	m	struct:vxSoundCard	typeref:typename:char[]
namePrefix	h/soc.h	/^    const char *namePrefix;$/;"	m	struct:snd_soc_codec_conf	typeref:typename:const char *
namePrefix	h/soc.h	/^    const char *namePrefix;$/;"	m	struct:vxSndSocComponent	typeref:typename:const char *
needRemove	vxTest/src/tmAudioNew.h	/^    BOOL  needRemove;$/;"	m	struct:audioInfo	typeref:typename:BOOL
noCaptureMute	h/soc.h	/^    unsigned int noCaptureMute:1;$/;"	m	struct:vxSndSocDaiOps	typeref:typename:unsigned int:1
noPcm	h/soc.h	/^    unsigned int noPcm:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
node	h/audioLibCore.h	/^    DL_NODE         node;$/;"	m	struct:audioDev	typeref:typename:DL_NODE
node	h/control.h	/^    DL_NODE                node;   \/* node should be the first member *\/$/;"	m	struct:vxSndControl	typeref:typename:DL_NODE
node	h/soc.h	/^    DL_NODE         node; \/* node should be the first member *\/$/;"	m	struct:vxSndSocDai	typeref:typename:DL_NODE
node	h/soc.h	/^    DL_NODE         node; \/* node should be the first member, component_list *\/$/;"	m	struct:vxSndSocComponent	typeref:typename:DL_NODE
node	h/soc.h	/^    DL_NODE node;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:DL_NODE
node	h/vxSoundCore.h	/^    DL_NODE                     node; \/* node should be the first member *\/$/;"	m	struct:vxSndPcmSubStream	typeref:typename:DL_NODE
node	h/vxSoundCore.h	/^    DL_NODE              node; \/* node should be the first member *\/$/;"	m	struct:vxSndPcm	typeref:typename:DL_NODE
node	h/vxSoundCore.h	/^    DL_NODE         node; \/* node should be the first member *\/$/;"	m	struct:vxSndDevice	typeref:typename:DL_NODE
nonatomic	h/soc.h	/^    unsigned int nonatomic:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
num	h/soc.h	/^    unsigned int num; \/* 0-based and monotonic increasing *\/$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:unsigned int
numCtrlConf	vxTest/src/tmAudioNew.h	/^    UINT32 numCtrlConf;$/;"	m	struct:audioInfo	typeref:typename:UINT32
numDai	h/soc.h	/^    int numDai;$/;"	m	struct:vxSndSocComponent	typeref:typename:int
numId	h/control.h	/^    uint32_t numId;         \/* numeric identifier, zero = invalid *\/$/;"	m	struct:vxSndCtrlId	typeref:typename:uint32_t
numId	h/control.h	/^    uint32_t numId;        \/* control element numeric identification *\/$/;"	m	struct:vxSndCtlTlv	typeref:typename:uint32_t
num_auto_selectable_formats	h/soc.h	/^    int num_auto_selectable_formats;$/;"	m	struct:vxSndSocDaiOps	typeref:typename:int
num_aux_devs	h/soc.h	/^    int num_aux_devs;$/;"	m	struct:vxSndSocCard	typeref:typename:int
num_configs	h/soc.h	/^    int num_configs;$/;"	m	struct:vxSndSocCard	typeref:typename:int
num_controls	h/soc.h	/^    int num_controls;$/;"	m	struct:vxSndSocCard	typeref:typename:int
num_controls	h/soc.h	/^    uint32_t num_controls;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:uint32_t
num_links	h/soc.h	/^    int num_links;  \/* predefined links only *\/$/;"	m	struct:vxSndSocCard	typeref:typename:int
num_params	h/soc.h	/^    unsigned int num_params;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int
num_rtd	h/soc.h	/^    int num_rtd;$/;"	m	struct:vxSndSocCard	typeref:typename:int
of_xlate_dai_id	h/soc.h	/^    STATUS (*of_xlate_dai_id)(struct vxSndSocComponent *comment,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * comment,struct device_node * endpoint)
of_xlate_dai_name	h/soc.h	/^    STATUS (*of_xlate_dai_name)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,const struct of_phandle_args * args,const char ** dai_name)
offset	h/control.h	/^    uint32_t offset;    \/* W: first control ID to get *\/$/;"	m	struct:vxSndCtrlList	typeref:typename:uint32_t
open	h/audioLibCore.h	/^    FUNCPTR         open;$/;"	m	struct:audioDev	typeref:typename:FUNCPTR
open	h/soc.h	/^    STATUS (*open)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream)
open	h/vxSoundCore.h	/^    STATUS (*open) (SND_PCM_SUBSTREAM * substream);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream)
openMax	h/vxSoundCore.h	/^             openMax:1,$/;"	m	struct:vxSndInterval	typeref:typename:uint32_t:1
openMin	h/vxSoundCore.h	/^    uint32_t openMin:1,$/;"	m	struct:vxSndInterval	typeref:typename:uint32_t:1
ops	h/soc.h	/^    VX_SND_PCM_STREAM_OPS ops;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:VX_SND_PCM_STREAM_OPS
ops	h/soc.h	/^    const VX_SND_SOC_OPS *ops;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:const VX_SND_SOC_OPS *
ops	h/soc.h	/^    const struct vxSndSocDaiOps *ops;$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:const struct vxSndSocDaiOps *
ops	h/vxSoundCore.h	/^    struct vxSndPcmStreamOps *  ops;$/;"	m	struct:vxSndPcmSubStream	typeref:struct:vxSndPcmStreamOps *
outChanInfo	src/audioLibCore.c	/^    AUDIO_CHAN_INFO outChanInfo;$/;"	m	struct:audioData	typeref:typename:AUDIO_CHAN_INFO	file:
p	h/control.h	/^        const uint32_t *       p;$/;"	m	union:vxSndControl::__anon7e192d730a0a	typeref:typename:const uint32_t *
pAudioHd	src/audioLibCore.c	/^LOCAL AUDIO_LIB_CORE_DATA * pAudioHd    = NULL;$/;"	v	typeref:typename:LOCAL AUDIO_LIB_CORE_DATA *
pBe	h/soc.h	/^    struct vxSndSocPcmRuntime * pBe[2];$/;"	m	struct:vxSndSocPcmRuntime	typeref:struct:vxSndSocPcmRuntime * [2]
pBuf	src/audioLibCore.c	/^    UINT8 *         pBuf;       \/* start address of the buffer *\/$/;"	m	struct:audioBufferInfo	typeref:typename:UINT8 *	file:
pBufInfo	src/audioLibCore.c	/^    AUDIO_BUFFER_INFO * pBufInfo;       \/* buffer header array *\/$/;"	m	struct:audioChanInfo	typeref:typename:AUDIO_BUFFER_INFO *	file:
pCodec	src/audioLibCore.c	/^    AUDIO_DEV *     pCodec;$/;"	m	struct:audioData	typeref:typename:AUDIO_DEV *	file:
pCodecList	src/audioLibCore.c	/^    DL_LIST *   pCodecList;$/;"	m	struct:audioLibCoreData	typeref:typename:DL_LIST *	file:
pDev	h/soc.h	/^    VXB_DEV_ID  pDev;$/;"	m	struct:vxSndSocComponent	typeref:typename:VXB_DEV_ID
pDev	h/soc.h	/^    VXB_DEV_ID  pDev;$/;"	m	struct:vxSndSocDai	typeref:typename:VXB_DEV_ID
pDev	h/soc.h	/^    VXB_DEV_ID pDev;    \/\/struct device_node *of_node;$/;"	m	struct:vxSndSocDaiLinkComponent	typeref:typename:VXB_DEV_ID
pDev	h/vxSoundCore.h	/^    VXB_DEV_ID pDev;$/;"	m	struct:vxSoundCard	typeref:typename:VXB_DEV_ID
pDev	vxTest/src/tmMachineDrv.h	/^    VXB_DEV_ID  pDev;$/;"	m	struct:vxbAboxMachineDrvCtrl	typeref:typename:VXB_DEV_ID
pName	vxTest/src/tmAudioNew.h	/^    char *          pName;$/;"	m	struct:vxbDev	typeref:typename:char *
pNameAddr	vxTest/src/tmAudioNew.h	/^    char *          pNameAddr;$/;"	m	struct:vxbDev	typeref:typename:char *
pNameOrphan	vxTest/src/tmAudioNew.h	/^    char *          pNameOrphan;$/;"	m	struct:vxbDev	typeref:typename:char *
pTrans	src/audioLibCore.c	/^    AUDIO_DEV *     pTrans;$/;"	m	struct:audioData	typeref:typename:AUDIO_DEV *	file:
pTransList	src/audioLibCore.c	/^    DL_LIST *   pTransList;$/;"	m	struct:audioLibCoreData	typeref:typename:DL_LIST *	file:
pVxbDevSem	vxTest/src/tmAudioNew.h	/^    SEM_ID          pVxbDevSem;$/;"	m	struct:vxbDev	typeref:typename:SEM_ID
pVxbDriver	vxTest/src/tmAudioNew.h	/^    VXB_DRV *       pVxbDriver;$/;"	m	struct:vxbDev	typeref:typename:VXB_DRV *
pVxbDrvData	vxTest/src/tmAudioNew.h	/^    void *          pVxbDrvData;$/;"	m	struct:vxbDev	typeref:typename:void *
pVxbIvars	vxTest/src/tmAudioNew.h	/^    void *          pVxbIvars;$/;"	m	struct:vxbDev	typeref:typename:void *
pVxbParams	vxTest/src/tmAudioNew.h	/^    void *          pVxbParams;$/;"	m	struct:vxbDev	typeref:typename:void *
pVxbParent	vxTest/src/tmAudioNew.h	/^    struct vxbDev * pVxbParent;$/;"	m	struct:vxbDev	typeref:struct:vxbDev *
pVxbSoftc	vxTest/src/tmAudioNew.h	/^    void *          pVxbSoftc;$/;"	m	struct:vxbDev	typeref:typename:void *
pad1	h/vxSoundCore.h	/^    uint32_t pad1;$/;"	m	struct:vxSndSubstreamSyncPtr	typeref:typename:uint32_t
page	h/vxSoundCore.h	/^    struct page *(*page) (SND_PCM_SUBSTREAM * substream, unsigned long offset);$/;"	m	struct:vxSndPcmStreamOps	typeref:struct:page * (*)(SND_PCM_SUBSTREAM * substream,unsigned long offset)
params	h/soc.h	/^    const struct vxSndSocPcmStream *params;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:const struct vxSndSocPcmStream *
params_select	h/soc.h	/^    unsigned int params_select; \/* currently selected param for dai link *\/$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:unsigned int
path	h/audioLibCore.h	/^    UINT32          path;$/;"	m	union:audioIoctlArg	typeref:typename:UINT32
path	h/audioLibCore.h	/^    UINT32  path;$/;"	m	struct:audioVolume	typeref:typename:UINT32
pcm	h/soc.h	/^    VX_SND_PCM *pcm;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:VX_SND_PCM *
pcm	h/vxSoundCore.h	/^    VX_SND_PCM *                pcm;$/;"	m	struct:vxSndPcmSubStream	typeref:typename:VX_SND_PCM *
pcm	h/vxSoundCore.h	/^    struct vxSndPcm *          pcm;$/;"	m	struct:vxSndPcmStream	typeref:struct:vxSndPcm *
pcmCaptureOps	vxTest/src/tmMachineDrv.c	/^LOCAL VX_SND_SOC_OPS pcmCaptureOps = {};$/;"	v	typeref:typename:LOCAL VX_SND_SOC_OPS
pcmConstruct	h/soc.h	/^    STATUS (*pcmConstruct)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,VX_SND_SOC_PCM_RUNTIME * rtd)
pcmDevNum	h/vxSoundCore.h	/^    int                  pcmDevNum;$/;"	m	struct:vxSndPcm	typeref:typename:int
pcmDrvNum	src/pcm.c	/^LOCAL int     pcmDrvNum = -1;$/;"	v	typeref:typename:LOCAL int
pcmFileHeader	src/audioLibWav.c	/^typedef struct pcmFileHeader$/;"	s	file:
pcmFormat	src/audioLibWav.c	/^    PCM_WAVE_FORMAT pcmFormat;$/;"	m	struct:pcmFileHeader	typeref:typename:PCM_WAVE_FORMAT	file:
pcmFormat	vxTest/src/tmAudioNew.h	/^    TEST_PCM_WAVE_FORMAT pcmFormat;$/;"	m	struct:wavFileHeader	typeref:typename:TEST_PCM_WAVE_FORMAT
pcmPlayBackOps	vxTest/src/tmMachineDrv.c	/^LOCAL VX_SND_SOC_OPS pcmPlayBackOps = {};$/;"	v	typeref:typename:LOCAL VX_SND_SOC_OPS
pcmScInit	src/pcm.c	/^LOCAL STATUS pcmScInit (void)$/;"	f	typeref:typename:LOCAL STATUS
pcmScIoctl	src/pcm.c	/^LOCAL STATUS pcmScIoctl$/;"	f	typeref:typename:LOCAL STATUS
pcmWaveFormat	src/audioLibWav.c	/^typedef struct pcmWaveFormat$/;"	s	file:
pcm_destruct	h/soc.h	/^    void (*pcm_destruct)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:void (*)(struct vxSndSocComponent * component,VX_SND_PCM * pcm)
pcm_new	h/soc.h	/^    STATUS (*pcm_new)(VX_SND_SOC_PCM_RUNTIME *rtd,$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:STATUS (*)(VX_SND_SOC_PCM_RUNTIME * rtd,struct vxSndSocDai * dai)
periodBytes	h/vxSoundCore.h	/^    uint32_t periodBytes;   \/* period bytes *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
periodBytes	vxTest/src/tmAudioNew.h	/^    UINT32 periodBytes;$/;"	m	struct:audioInfo	typeref:typename:UINT32
periodBytesMax	h/vxSoundCore.h	/^    uint32_t periodBytesMax;    \/* max period size *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
periodBytesMin	h/vxSoundCore.h	/^    uint32_t periodBytesMin;    \/* min period size *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
periodSize	h/vxSoundCore.h	/^    uint32_t periodSize;    \/* period size (frames) *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
period_step	h/vxSoundCore.h	/^    uint32_t period_step;$/;"	m	struct:vxSndPcmSwParams	typeref:typename:uint32_t
periods	h/vxSoundCore.h	/^    uint32_t periods;       \/* periods *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
periods	vxTest/src/tmAudioNew.h	/^    UINT32 periods;$/;"	m	struct:audioInfo	typeref:typename:UINT32
periodsMax	h/vxSoundCore.h	/^    uint32_t periodsMax;        \/* max # of periods *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
periodsMin	h/vxSoundCore.h	/^    uint32_t periodsMin;        \/* min # of periods *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
phyAddr	h/vxSoundCore.h	/^    PHYS_ADDR       phyAddr;$/;"	m	struct:vxSndSubstreamDmaBuf	typeref:typename:PHYS_ADDR
phyWidth	h/pcm.h	/^    uint8_t phyWidth;      \/* physical bit width   *\/$/;"	m	struct:vxSndPcmFormatInfo	typeref:typename:uint8_t
platformMax	h/control.h	/^    int platformMax; \/* register max value *\/$/;"	m	struct:vxSndMixerControl	typeref:typename:int
platformNum	h/soc.h	/^    unsigned int platformNum;   \/\/num_platforms$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int
platforms	h/soc.h	/^    VX_SND_SOC_DAI_LINK_COMPONENT * platforms;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:VX_SND_SOC_DAI_LINK_COMPONENT *
playCircle	vxTest/src/tmAudio.c	/^LOCAL UINT32  playCircle = 0;$/;"	v	typeref:typename:LOCAL UINT32
playback	h/soc.h	/^    struct vxSndSocPcmStream playback;$/;"	m	struct:vxSndSocDaiDriver	typeref:struct:vxSndSocPcmStream
playback	vxTest/src/tmAudioNew.h	/^    BOOL  playback;            \/* to describe the test for playback or capture *\/$/;"	m	struct:audioInfo	typeref:typename:BOOL
playbackName	vxTest/src/tmAudioNew.h	/^    char  playbackName[SND_DEV_NAME_LEN];$/;"	m	struct:audioInfo	typeref:typename:char[]
playbackOnly	h/soc.h	/^    unsigned int playbackOnly:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
playback_dma_data	h/soc.h	/^    void *playback_dma_data;$/;"	m	struct:vxSndSocDai	typeref:typename:void *
pmdown_time	h/soc.h	/^    long pmdown_time;$/;"	m	struct:vxSndSocCard	typeref:typename:long
pointer	h/soc.h	/^    SND_FRAMES_T (*pointer)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:SND_FRAMES_T (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream)
pointer	h/vxSoundCore.h	/^    unsigned long (*pointer) (SND_PCM_SUBSTREAM * substream);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:unsigned long (*)(SND_PCM_SUBSTREAM * substream)
popWait	h/soc.h	/^    unsigned int popWait:1;$/;"	m	struct:vxSndSocPcmRuntime	typeref:typename:unsigned int:1
pop_time	h/soc.h	/^    uint32_t pop_time;$/;"	m	struct:vxSndSocCard	typeref:typename:uint32_t
prepare	h/soc.h	/^    STATUS (*prepare)(SND_PCM_SUBSTREAM *,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM *,struct vxSndSocDai *)
prepare	h/soc.h	/^    STATUS (*prepare)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream)
prepare	h/soc.h	/^    int  (*prepare) (SND_PCM_SUBSTREAM *);$/;"	m	struct:vxSndSocOps	typeref:typename:int (*)(SND_PCM_SUBSTREAM *)
prepare	h/vxSoundCore.h	/^    STATUS (*prepare) (SND_PCM_SUBSTREAM * substream);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream)
printHwParams	src/pcm.c	/^LOCAL void printHwParams$/;"	f	typeref:typename:LOCAL void
privateData	h/control.h	/^    void * privateData;$/;"	m	struct:vxSndControl	typeref:typename:void *
privateData	h/vxSoundCore.h	/^    void *                      privateData;$/;"	m	struct:vxSndPcmSubStream	typeref:typename:void *
privateData	h/vxSoundCore.h	/^    void *               privateData;$/;"	m	struct:vxSndPcm	typeref:typename:void *
privateFree	h/control.h	/^    void (*privateFree)(struct vxSndControl *kcontrol);$/;"	m	struct:vxSndControl	typeref:typename:void (*)(struct vxSndControl * kcontrol)
privateValue	h/control.h	/^    uint64_t privateValue; \/* private data struct *\/$/;"	m	struct:vxSndControl	typeref:typename:uint64_t
private_data	h/vxSoundCore.h	/^    void *          private_data;$/;"	m	struct:vxSndSubstreamDmaBuf	typeref:typename:void *
probe	h/soc.h	/^    STATUS (*probe)(struct vxSndSocCard *card);$/;"	m	struct:vxSndSocCard	typeref:typename:STATUS (*)(struct vxSndSocCard * card)
probe	h/soc.h	/^    STATUS (*probe)(struct vxSndSocComponent *component);$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component)
probe	h/soc.h	/^    STATUS (*probe)(struct vxSndSocDai *dai);$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:STATUS (*)(struct vxSndSocDai * dai)
probe_order	h/soc.h	/^    int probe_order;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:int
probe_order	h/soc.h	/^    int probe_order;$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:int
probed	h/soc.h	/^    uint32_t probed:1;$/;"	m	struct:vxSndSocDai	typeref:typename:uint32_t:1
probed	h/soc.h	/^    unsigned int probed:1;$/;"	m	struct:vxSndSocCard	typeref:typename:unsigned int:1
put	h/control.h	/^    VX_SND_CTL_PUT_PTR     put;$/;"	m	struct:vxSndControl	typeref:typename:VX_SND_CTL_PUT_PTR
rate	h/soc.h	/^    uint32_t rate;$/;"	m	struct:vxSndSocDai	typeref:typename:uint32_t
rate	h/vxSoundCore.h	/^    uint32_t rate;      \/* rate in Hz *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
rate	vxTest/src/tmAudioNew.h	/^    UINT32 rate;$/;"	m	struct:audioInfo	typeref:typename:UINT32
rateMax	h/soc.h	/^    uint32_t rateMax;       \/* max rate *\/$/;"	m	struct:vxSndSocPcmStream	typeref:typename:uint32_t
rateMax	h/vxSoundCore.h	/^    uint32_t rateMax;           \/* max rate *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
rateMin	h/soc.h	/^    uint32_t rateMin;       \/* min rate *\/$/;"	m	struct:vxSndSocPcmStream	typeref:typename:uint32_t
rateMin	h/vxSoundCore.h	/^    uint32_t rateMin;           \/* min rate *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
rates	h/soc.h	/^    uint32_t rates;     \/* SNDRV_PCM_RATE_* *\/$/;"	m	struct:vxSndSocPcmStream	typeref:typename:uint32_t
rates	h/vxSoundCore.h	/^    uint32_t        rates;$/;"	m	struct:vxSndPcmHwParams	typeref:typename:uint32_t
rates	h/vxSoundCore.h	/^    uint32_t        rates;$/;"	m	struct:vxSndPcmSupportHwParams	typeref:typename:uint32_t
rates	h/vxSoundCore.h	/^    uint32_t rates;             \/* SNDRV_PCM_RATE_* *\/$/;"	m	struct:vxSndPcmHardware	typeref:typename:uint32_t
rdmaOps	vxTest/src/tmMachineDrv.c	/^LOCAL VX_SND_SOC_OPS rdmaOps = {};$/;"	v	typeref:typename:LOCAL VX_SND_SOC_OPS
read	h/audioLibCore.h	/^    FUNCPTR         read;$/;"	m	struct:audioDev	typeref:typename:FUNCPTR
read	h/soc.h	/^    uint32_t (*read)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:uint32_t (*)(struct vxSndSocComponent * component,uint32_t reg)
readFromCapture	vxTest/src/tmAudioNew.c	/^LOCAL STATUS readFromCapture(TEST_AUDIO_INFO *audioInfo)$/;"	f	typeref:typename:LOCAL STATUS
recSec	vxTest/src/tmAudioNew.h	/^    UINT32 recSec;$/;"	m	struct:fileHeader	typeref:typename:UINT32
recordCtrlInfo	vxTest/src/tmAudioNew.c	/^LOCAL STATUS recordCtrlInfo(VX_SND_CTRL_INFO * ctrlInfo)$/;"	f	typeref:typename:LOCAL STATUS
recordFd	vxTest/src/tmAudioNew.h	/^    INT32 recordFd;$/;"	m	struct:audioInfo	typeref:typename:INT32
recordfilename	vxTest/src/tmAudioNew.h	/^    char *recordfilename;$/;"	m	struct:audioInfo	typeref:typename:char *
recoredWavData	vxTest/src/tmAudioNew.c	/^STATUS recoredWavData(TEST_AUDIO_INFO *audioInfo, char* wavfile)$/;"	f	typeref:typename:STATUS
recvTaskId	src/audioLibCore.c	/^    TASK_ID         recvTaskId;$/;"	m	struct:audioData	typeref:typename:TASK_ID	file:
reg	h/control.h	/^    int reg;$/;"	m	struct:vxSndEnum	typeref:typename:int
reg	h/control.h	/^    int reg;$/;"	m	struct:vxSndMixerControl	typeref:typename:int
regFunc	h/vxSoundCore.h	/^    SND_DEV_REG_PTR regFunc;$/;"	m	struct:vxSndDevice	typeref:typename:SND_DEV_REG_PTR
regmap	h/soc.h	/^    VXB_REG_MAP * regmap;$/;"	m	struct:vxSndSocComponent	typeref:typename:VXB_REG_MAP *
remove	h/soc.h	/^    STATUS (*remove)(struct vxSndSocCard *card);$/;"	m	struct:vxSndSocCard	typeref:typename:STATUS (*)(struct vxSndSocCard * card)
remove	h/soc.h	/^    STATUS (*remove)(struct vxSndSocDai *dai);$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:STATUS (*)(struct vxSndSocDai * dai)
remove	h/soc.h	/^    void (*remove)(struct vxSndSocComponent *component);$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:void (*)(struct vxSndSocComponent * component)
remove_dai_link	h/soc.h	/^    void (*remove_dai_link)(struct vxSndSocCard *,$/;"	m	struct:vxSndSocCard	typeref:typename:void (*)(struct vxSndSocCard *,struct vxSndSocDaiLink * link)
remove_order	h/soc.h	/^    int remove_order;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:int
remove_order	h/soc.h	/^    int remove_order;$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:int
reserved	h/control.h	/^        unsigned char reserved[128];$/;"	m	union:vxSndCtrlInfo::__anon7e192d73010a	typeref:typename:unsigned char[128]
reserved	h/control.h	/^    unsigned char reserved[50];$/;"	m	struct:vxSndCtrlList	typeref:typename:unsigned char[50]
reserved	h/control.h	/^    unsigned char reserved[64];$/;"	m	struct:vxSndCtrlInfo	typeref:typename:unsigned char[64]
resetPinctrlId	vxTest/src/tmMachineDrv.h	/^    uint32_t    resetPinctrlId;$/;"	m	struct:vxbAboxMachineDrvCtrl	typeref:typename:uint32_t
resume_post	h/soc.h	/^    STATUS (*resume_post)(struct vxSndSocCard *card);$/;"	m	struct:vxSndSocCard	typeref:typename:STATUS (*)(struct vxSndSocCard * card)
resume_pre	h/soc.h	/^    STATUS (*resume_pre)(struct vxSndSocCard *card);$/;"	m	struct:vxSndSocCard	typeref:typename:STATUS (*)(struct vxSndSocCard * card)
right	h/audioLibCore.h	/^    UINT8   right;              \/* right volume *\/$/;"	m	struct:audioVolume	typeref:typename:UINT8
roundupPowerOfTwoPri	src/vxSoundCore.c	/^uint32_t roundupPowerOfTwoPri$/;"	f	typeref:typename:uint32_t
rreg	h/control.h	/^    int rreg;$/;"	m	struct:vxSndMixerControl	typeref:typename:int
rtd_list	h/soc.h	/^    DL_LIST rtd_list;$/;"	m	struct:vxSndSocCard	typeref:typename:DL_LIST
rtpId	h/control.h	/^    RTP_ID rtpId;                   \/* owner's task of this control *\/$/;"	m	struct:vxSndCtrlInfo	typeref:typename:RTP_ID
rtpId	h/vxSoundCore.h	/^    RTP_ID                     rtpId;$/;"	m	struct:vxSndPcmStream	typeref:typename:RTP_ID
rtpId	h/vxSoundCore.h	/^    RTP_ID               rtpId;$/;"	m	struct:vxSndCtrlDev	typeref:typename:RTP_ID
runtime	h/vxSoundCore.h	/^    struct vxSndPcmRuntime *    runtime;$/;"	m	struct:vxSndPcmSubStream	typeref:struct:vxSndPcmRuntime *
s	h/vxSoundCore.h	/^        } s;$/;"	m	struct:vxSndSubstreamSyncPtr	typeref:union:vxSndSubstreamSyncPtr::__anoncbc58872010a
sampleBits	h/audioLibCore.h	/^    UINT8   sampleBits;         \/* valid data bits in data buffer *\/$/;"	m	struct:audioDataInfo	typeref:typename:UINT8
sampleBits	h/soc.h	/^    uint32_t sampleBits;$/;"	m	struct:vxSndSocDai	typeref:typename:uint32_t
sampleBits	h/vxSoundCore.h	/^    uint32_t sampleBits;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:uint32_t
sampleBits	vxTest/src/tmAudio.c	/^LOCAL UINT32  sampleBits[] = {16, 24};     \/* record sample bits *\/$/;"	v	typeref:typename:LOCAL UINT32[]
sampleBits	vxTest/src/tmAudio.c	/^LOCAL UINT32  sampleBits[] = {16,24};     \/* record sample bits *\/$/;"	v	typeref:typename:LOCAL UINT32[]
sampleBits	vxTest/src/tmAudioNew.h	/^    UINT32   sampleBits;         \/* valid data bits in data buffer *\/$/;"	m	struct:tmAudioDataInfo	typeref:typename:UINT32
sampleBits	vxTest/src/tmAudioNew.h	/^    UINT32 sampleBits;$/;"	m	struct:fileHeader	typeref:typename:UINT32
sampleBytes	h/audioLibCore.h	/^    UINT8   sampleBytes;        \/* size of sample in data buffer *\/$/;"	m	struct:audioDataInfo	typeref:typename:UINT8
sampleBytes	vxTest/src/tmAudioNew.h	/^    UINT32   sampleBytes;        \/* size of sample in data buffer *\/$/;"	m	struct:tmAudioDataInfo	typeref:typename:UINT32
sampleLen	src/audioLibWav.c	/^    UINT32          sampleLen;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
sampleRate	h/audioLibCore.h	/^    UINT32  sampleRate;$/;"	m	struct:audioDataInfo	typeref:typename:UINT32
sampleRate	vxTest/src/tmAudio.c	/^LOCAL UINT32  sampleRate[] = {44100};     \/* record sample rate *\/$/;"	v	typeref:typename:LOCAL UINT32[]
sampleRate	vxTest/src/tmAudio.c	/^LOCAL UINT32  sampleRate[] = {8000,11025,12000,16000,22050,24000,32000,44100,48000};     \/* rec/;"	v	typeref:typename:LOCAL UINT32[]
sampleRate	vxTest/src/tmAudioNew.h	/^    UINT32   sampleRate;         \/* rate bit *\/$/;"	m	struct:tmAudioDataInfo	typeref:typename:UINT32
sampleRate	vxTest/src/tmAudioNew.h	/^    UINT32 sampleRate;$/;"	m	struct:fileHeader	typeref:typename:UINT32
samplesPerSec	src/audioLibWav.c	/^    UINT32  samplesPerSec;      \/* audio samples per second *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT32	file:
samplesPerSec	src/audioLibWav.c	/^    UINT32  samplesPerSec;      \/* audio samples per second *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT32	file:
samplesPerSec	vxTest/src/tmAudioNew.h	/^    UINT32  samplesPerSec;      \/* audio samples per second *\/$/;"	m	struct:tmPcmWaveFormat	typeref:typename:UINT32
samplingRate	vxTest/src/tmMachineDrv.h	/^    uint32_t    samplingRate;$/;"	m	struct:vxbAboxMachineDrvCtrl	typeref:typename:uint32_t
sendDataToPlayback	vxTest/src/tmAudioNew.c	/^STATUS sendDataToPlayback(TEST_AUDIO_INFO *audioInfo)$/;"	f	typeref:typename:STATUS
sendTaskId	src/audioLibCore.c	/^    TASK_ID         sendTaskId;$/;"	m	struct:audioData	typeref:typename:TASK_ID	file:
setAudioInfo	vxTest/src/tmAudioNew.c	/^LOCAL STATUS setAudioInfo(TEST_AUDIO_INFO* pAudInfo)$/;"	f	typeref:typename:LOCAL STATUS
setFmt	h/soc.h	/^    STATUS (*setFmt)(struct vxSndSocDai *dai, unsigned int fmt);$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(struct vxSndSocDai * dai,unsigned int fmt)
set_bclk_ratio	h/soc.h	/^    int (*set_bclk_ratio)(struct vxSndSocDai *dai, unsigned int ratio);$/;"	m	struct:vxSndSocDaiOps	typeref:typename:int (*)(struct vxSndSocDai * dai,unsigned int ratio)
set_bias_level	h/soc.h	/^    STATUS (*set_bias_level)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,enum snd_soc_bias_level level)
set_channel_map	h/soc.h	/^    STATUS (*set_channel_map)(struct vxSndSocDai *dai,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(struct vxSndSocDai * dai,unsigned int tx_num,unsigned int * tx_slot,unsigned int rx_num,unsigned int * rx_slot)
set_clkdiv	h/soc.h	/^    int (*set_clkdiv)(struct vxSndSocDai *dai, int div_id, int div);$/;"	m	struct:vxSndSocDaiOps	typeref:typename:int (*)(struct vxSndSocDai * dai,int div_id,int div)
set_pll	h/soc.h	/^    STATUS (*set_pll)(struct vxSndSocComponent *component, int pll_id,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,int pll_id,int source,uint32_t freq_in,uint32_t freq_out)
set_pll	h/soc.h	/^    int (*set_pll)(struct vxSndSocDai *dai, int pll_id, int source,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:int (*)(struct vxSndSocDai * dai,int pll_id,int source,unsigned int freq_in,unsigned int freq_out)
set_sdw_stream	h/soc.h	/^    int (*set_sdw_stream)(struct vxSndSocDai *dai,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:int (*)(struct vxSndSocDai * dai,void * stream,int direction)
set_sysclk	h/soc.h	/^    STATUS (*set_sysclk)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,int clk_id,int source,uint32_t freq,int dir)
set_sysclk	h/soc.h	/^    int (*set_sysclk)(struct vxSndSocDai *dai,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:int (*)(struct vxSndSocDai * dai,int clk_id,unsigned int freq,int dir)
set_tdm_slot	h/soc.h	/^    STATUS (*set_tdm_slot)(struct vxSndSocDai *dai,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(struct vxSndSocDai * dai,unsigned int tx_mask,unsigned int rx_mask,int slots,int slot_width)
set_tristate	h/soc.h	/^    STATUS (*set_tristate)(struct vxSndSocDai *dai, int tristate);$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(struct vxSndSocDai * dai,int tristate)
setupAudioDev	vxTest/src/tmAudioNew.c	/^STATUS setupAudioDev$/;"	f	typeref:typename:STATUS
setupCtrlDev	vxTest/src/tmAudioNew.c	/^LOCAL STATUS setupCtrlDev$/;"	f	typeref:typename:LOCAL STATUS
setupPcmDev	vxTest/src/tmAudioNew.c	/^LOCAL STATUS setupPcmDev$/;"	f	typeref:typename:LOCAL STATUS
shift	h/control.h	/^    uint32_t shift; \/* shift for regs has only 1 channel, or left channel when 1 reg has 2 chan/;"	m	struct:vxSndMixerControl	typeref:typename:uint32_t
shiftLeft	h/control.h	/^    uint8_t shiftLeft;$/;"	m	struct:vxSndEnum	typeref:typename:uint8_t
shiftRight	h/control.h	/^    uint32_t shiftRight; \/* shift for right channel when 1 reg has 2 channels *\/$/;"	m	struct:vxSndMixerControl	typeref:typename:uint32_t
shiftRight	h/control.h	/^    uint8_t shiftRight;$/;"	m	struct:vxSndEnum	typeref:typename:uint8_t
shutdown	h/soc.h	/^    void (*shutdown)(SND_PCM_SUBSTREAM *);$/;"	m	struct:vxSndSocOps	typeref:typename:void (*)(SND_PCM_SUBSTREAM *)
shutdown	h/soc.h	/^    void (*shutdown)(SND_PCM_SUBSTREAM *,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:void (*)(SND_PCM_SUBSTREAM *,struct vxSndSocDai *)
sigBits	h/soc.h	/^    uint32_t sigBits;       \/* number of bits of content *\/$/;"	m	struct:vxSndSocPcmStream	typeref:typename:uint32_t
signd	h/pcm.h	/^    int8_t  signd;          \/* 0 = unsigned, 1 = signed, -1 = others *\/$/;"	m	struct:vxSndPcmFormatInfo	typeref:typename:int8_t
silence	h/pcm.h	/^    uint8_t silence[8];     \/* silence data to fill *\/$/;"	m	struct:vxSndPcmFormatInfo	typeref:typename:uint8_t[8]
size	src/audioLibCore.c	/^    ssize_t         size;       \/* capacity of this buffer *\/$/;"	m	struct:audioBufferInfo	typeref:typename:ssize_t	file:
sndCard	h/soc.h	/^    SND_CARD * sndCard;$/;"	m	struct:vxSndSocCard	typeref:typename:SND_CARD *
sndCtrlClose	src/control.c	/^LOCAL int sndCtrlClose$/;"	f	typeref:typename:LOCAL int
sndCtrlDevRegister	src/control.c	/^STATUS sndCtrlDevRegister$/;"	f	typeref:typename:STATUS
sndCtrlDevUnregister	src/control.c	/^STATUS sndCtrlDevUnregister$/;"	f	typeref:typename:STATUS
sndCtrlInit	src/control.c	/^void sndCtrlInit (void)$/;"	f	typeref:typename:void
sndCtrlIoctl	src/control.c	/^LOCAL STATUS sndCtrlIoctl$/;"	f	typeref:typename:LOCAL STATUS
sndCtrlKernelIoctl	src/control.c	/^LOCAL STATUS sndCtrlKernelIoctl$/;"	f	typeref:typename:LOCAL STATUS
sndCtrlOpen	src/control.c	/^LOCAL void * sndCtrlOpen$/;"	f	typeref:typename:LOCAL void *
sndCtrlRead	src/control.c	/^LOCAL ssize_t sndCtrlRead$/;"	f	typeref:typename:LOCAL ssize_t
sndCtrlWrite	src/control.c	/^LOCAL ssize_t sndCtrlWrite$/;"	f	typeref:typename:LOCAL ssize_t
sndDevRegister	src/vxSoundCore.c	/^STATUS sndDevRegister$/;"	f	typeref:typename:STATUS
sndDevice	h/vxSoundCore.h	/^    SND_DEVICE *         sndDevice;$/;"	m	struct:vxSndCtrlDev	typeref:typename:SND_DEVICE *
sndDevice	h/vxSoundCore.h	/^    SND_DEVICE *         sndDevice;$/;"	m	struct:vxSndPcm	typeref:typename:SND_DEVICE *
sndDummyAttach	src/vxSoundUtils.c	/^LOCAL STATUS sndDummyAttach$/;"	f	typeref:typename:LOCAL STATUS
sndDummyDevRegister	src/vxSoundCore.c	/^STATUS sndDummyDevRegister$/;"	f	typeref:typename:STATUS
sndDummyMatch	src/vxSoundUtils.c	/^LOCAL VXB_FDT_DEV_MATCH_ENTRY sndDummyMatch[] =$/;"	v	typeref:typename:LOCAL VXB_FDT_DEV_MATCH_ENTRY[]
sndDummyProbe	src/vxSoundUtils.c	/^LOCAL STATUS sndDummyProbe$/;"	f	typeref:typename:LOCAL STATUS
sndPcmBufDataCopy	src/pcm.c	/^LOCAL void sndPcmBufDataCopy$/;"	f	typeref:typename:LOCAL void
sndPcmCaptureBufReadableSizeGet	src/pcm.c	/^LOCAL SND_FRAMES_T sndPcmCaptureBufReadableSizeGet$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
sndPcmClose	src/pcm.c	/^LOCAL int sndPcmClose$/;"	f	typeref:typename:LOCAL int
sndPcmDefaultIoctl	src/pcm.c	/^STATUS sndPcmDefaultIoctl$/;"	f	typeref:typename:STATUS
sndPcmDevRegister	src/pcm.c	/^STATUS sndPcmDevRegister$/;"	f	typeref:typename:STATUS
sndPcmDevUnregister	src/pcm.c	/^STATUS sndPcmDevUnregister$/;"	f	typeref:typename:STATUS
sndPcmDeviceList	src/pcm.c	/^LOCAL DL_LIST sndPcmDeviceList;$/;"	v	typeref:typename:LOCAL DL_LIST
sndPcmDmaBufferPtrUpdate	src/pcm.c	/^LOCAL STATUS sndPcmDmaBufferPtrUpdate$/;"	f	typeref:typename:LOCAL STATUS
sndPcmInit	src/pcm.c	/^void sndPcmInit (void)$/;"	f	typeref:typename:void
sndPcmIoctl	src/pcm.c	/^LOCAL STATUS sndPcmIoctl$/;"	f	typeref:typename:LOCAL STATUS
sndPcmKernelIoctl	src/pcm.c	/^LOCAL STATUS sndPcmKernelIoctl$/;"	f	typeref:typename:LOCAL STATUS
sndPcmListSem	src/pcm.c	/^LOCAL SEM_ID  sndPcmListSem;    \/* protect sndPcmDeviceList access *\/$/;"	v	typeref:typename:LOCAL SEM_ID
sndPcmOpen	src/pcm.c	/^LOCAL void * sndPcmOpen$/;"	f	typeref:typename:LOCAL void *
sndPcmPlaybackBufDataSizeGet	src/pcm.c	/^LOCAL SND_FRAMES_T sndPcmPlaybackBufDataSizeGet$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
sndPcmPlaybackBufWritableSizeGet	src/pcm.c	/^LOCAL SND_FRAMES_T sndPcmPlaybackBufWritableSizeGet$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
sndPcmSubstreamIoctlCmd	h/vxSoundCore.h	/^typedef enum sndPcmSubstreamIoctlCmd$/;"	g
sndPcmSubstreamOpen	src/pcm.c	/^LOCAL STATUS sndPcmSubstreamOpen$/;"	f	typeref:typename:LOCAL STATUS
sndPcmSubstreamRelease	src/pcm.c	/^LOCAL STATUS sndPcmSubstreamRelease$/;"	f	typeref:typename:LOCAL STATUS
sndPcmSubstreamState	h/vxSoundCore.h	/^typedef enum sndPcmSubstreamState$/;"	g
sndPcmSubstreamStateUpdate	src/pcm.c	/^LOCAL STATUS sndPcmSubstreamStateUpdate$/;"	f	typeref:typename:LOCAL STATUS
sndPcmSubstreamXfer	src/pcm.c	/^LOCAL SND_FRAMES_T sndPcmSubstreamXfer$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
sndPcmTransfer	src/pcm.c	/^LOCAL ssize_t sndPcmTransfer$/;"	f	typeref:typename:LOCAL ssize_t
sndPcmTriggerState	h/vxSoundCore.h	/^typedef enum sndPcmTriggerState$/;"	g
sndPcmWaitTime	src/pcm.c	/^LOCAL uint64_t sndPcmWaitTime$/;"	f	typeref:typename:LOCAL uint64_t
sndSocBeConnectByName	src/soc.c	/^STATUS sndSocBeConnectByName$/;"	f	typeref:typename:STATUS
sndSocCardrtdFindByName	src/soc.c	/^VX_SND_SOC_PCM_RUNTIME * sndSocCardrtdFindByName$/;"	f	typeref:typename:VX_SND_SOC_PCM_RUNTIME *
sndSocGetDaiName	src/card.c	/^STATUS sndSocGetDaiName$/;"	f	typeref:typename:STATUS
sndSocLinkBeHwParamsFixup	src/soc.c	/^STATUS sndSocLinkBeHwParamsFixup$/;"	f	typeref:typename:STATUS
sndSubstreamAppPtrUpdate	src/pcm.c	/^LOCAL STATUS sndSubstreamAppPtrUpdate$/;"	f	typeref:typename:LOCAL STATUS
snd_card_free	src/vxSoundCore.c	/^void snd_card_free$/;"	f	typeref:typename:void
snd_card_new	src/vxSoundCore.c	/^STATUS snd_card_new$/;"	f	typeref:typename:STATUS
snd_card_register	src/vxSoundCore.c	/^STATUS snd_card_register$/;"	f	typeref:typename:STATUS
snd_device_register_all	src/vxSoundCore.c	/^STATUS snd_device_register_all$/;"	f	typeref:typename:STATUS
snd_pcm_lib_free_pages	src/pcm.c	/^STATUS snd_pcm_lib_free_pages$/;"	f	typeref:typename:STATUS
snd_pcm_lib_malloc_pages	src/pcm.c	/^STATUS snd_pcm_lib_malloc_pages$/;"	f	typeref:typename:STATUS
snd_pcm_period_elapsed	src/pcm.c	/^void snd_pcm_period_elapsed$/;"	f	typeref:typename:void
snd_soc_add_component	src/card.c	/^STATUS snd_soc_add_component$/;"	f	typeref:typename:STATUS
snd_soc_add_pcm_runtime_unlock	src/card.c	/^LOCAL STATUS snd_soc_add_pcm_runtime_unlock$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_bind_card	src/card.c	/^LOCAL STATUS snd_soc_bind_card$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_card_late_probe	src/card.c	/^LOCAL STATUS snd_soc_card_late_probe$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_card_probe	src/card.c	/^LOCAL STATUS snd_soc_card_probe$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_codec_conf	h/soc.h	/^typedef struct snd_soc_codec_conf$/;"	s
snd_soc_component_init	src/card.c	/^LOCAL STATUS snd_soc_component_init$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_component_is_dummy	src/vxSoundUtils.c	/^BOOL snd_soc_component_is_dummy$/;"	f	typeref:typename:BOOL
snd_soc_component_probe	src/card.c	/^LOCAL STATUS snd_soc_component_probe$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_dai_set_tdm_slot	src/soc.c	/^STATUS snd_soc_dai_set_tdm_slot$/;"	f	typeref:typename:STATUS
snd_soc_dai_set_tristate	src/soc.c	/^STATUS snd_soc_dai_set_tristate$/;"	f	typeref:typename:STATUS
snd_soc_dpcm_state	h/soc.h	/^typedef enum snd_soc_dpcm_state$/;"	g
snd_soc_dpcm_trigger	h/soc.h	/^typedef enum snd_soc_dpcm_trigger$/;"	g
snd_soc_dpcm_update	h/soc.h	/^enum snd_soc_dpcm_update$/;"	g
snd_soc_find_dai	src/card.c	/^VX_SND_SOC_DAI * snd_soc_find_dai$/;"	f	typeref:typename:VX_SND_SOC_DAI *
snd_soc_get_enum_double	src/soc.c	/^STATUS snd_soc_get_enum_double$/;"	f	typeref:typename:STATUS
snd_soc_info_enum_double	src/soc.c	/^STATUS snd_soc_info_enum_double$/;"	f	typeref:typename:STATUS
snd_soc_is_matching_component	src/card.c	/^LOCAL BOOL snd_soc_is_matching_component$/;"	f	typeref:typename:LOCAL BOOL
snd_soc_link_init	src/card.c	/^LOCAL STATUS snd_soc_link_init$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_pcm_dai_new	src/card.c	/^LOCAL STATUS snd_soc_pcm_dai_new$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_pcm_dai_probe	src/card.c	/^LOCAL STATUS snd_soc_pcm_dai_probe$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_put_enum_double	src/soc.c	/^STATUS snd_soc_put_enum_double$/;"	f	typeref:typename:STATUS
snd_soc_register_dai	src/card.c	/^LOCAL VX_SND_SOC_DAI * snd_soc_register_dai$/;"	f	typeref:typename:LOCAL VX_SND_SOC_DAI *
snd_soc_register_dais	src/card.c	/^LOCAL STATUS snd_soc_register_dais$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_remove_pcm_runtime	src/card.c	/^LOCAL void snd_soc_remove_pcm_runtime$/;"	f	typeref:typename:LOCAL void
snd_soc_rtd_add_component	src/card.c	/^LOCAL void snd_soc_rtd_add_component$/;"	f	typeref:typename:LOCAL void
snd_soc_runtime_set_dai_fmt	src/card.c	/^LOCAL STATUS snd_soc_runtime_set_dai_fmt$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_unregister_card	src/card.c	/^STATUS snd_soc_unregister_card$/;"	f	typeref:typename:STATUS
snd_soc_unregister_component	src/card.c	/^void snd_soc_unregister_component$/;"	f	typeref:typename:void
snd_soc_unregister_dais	src/card.c	/^LOCAL void snd_soc_unregister_dais$/;"	f	typeref:typename:LOCAL void
soc_cleanup_card_resources	src/card.c	/^LOCAL void soc_cleanup_card_resources$/;"	f	typeref:typename:LOCAL void
soc_init_pcm_runtime	src/card.c	/^LOCAL STATUS soc_init_pcm_runtime$/;"	f	typeref:typename:LOCAL STATUS
soc_new_pcm_runtime	src/card.c	/^LOCAL VX_SND_SOC_PCM_RUNTIME * soc_new_pcm_runtime$/;"	f	typeref:typename:LOCAL VX_SND_SOC_PCM_RUNTIME *
soc_probe_component	src/card.c	/^LOCAL STATUS soc_probe_component$/;"	f	typeref:typename:LOCAL STATUS
soc_probe_link_components	src/card.c	/^LOCAL STATUS soc_probe_link_components$/;"	f	typeref:typename:LOCAL STATUS
soc_probe_link_dais	src/card.c	/^LOCAL STATUS soc_probe_link_dais$/;"	f	typeref:typename:LOCAL STATUS
soc_remove_component	src/card.c	/^LOCAL void soc_remove_component$/;"	f	typeref:typename:LOCAL void
soc_remove_link_components	src/card.c	/^LOCAL void soc_remove_link_components$/;"	f	typeref:typename:LOCAL void
soc_remove_link_dais	src/card.c	/^LOCAL void soc_remove_link_dais$/;"	f	typeref:typename:LOCAL void
soc_set_name_prefix	src/card.c	/^LOCAL void soc_set_name_prefix$/;"	f	typeref:typename:LOCAL void
solution_enum	vxTest/src/tmAudioNewLib.c	/^LOCAL VX_SND_ENUM solution_enum = TEST_ENUM_DOUBLE(SND_SOC_NOPM, 0, 0, 6, texts);$/;"	v	typeref:typename:LOCAL VX_SND_ENUM
space	h/control.h	/^    uint32_t space;     \/* W: count of control IDs to get *\/$/;"	m	struct:vxSndCtrlList	typeref:typename:uint32_t
startThreshold	h/vxSoundCore.h	/^    SND_FRAMES_T startThreshold;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:SND_FRAMES_T
start_threshold	h/vxSoundCore.h	/^    SND_FRAMES_T start_threshold;\/* min hw_avail frames for automatic start *\/$/;"	m	struct:vxSndPcmSwParams	typeref:typename:SND_FRAMES_T
startup	h/soc.h	/^    STATUS (*startup)(SND_PCM_SUBSTREAM *,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM *,struct vxSndSocDai *)
startup	h/soc.h	/^    int  (*startup) (SND_PCM_SUBSTREAM *);$/;"	m	struct:vxSndSocOps	typeref:typename:int (*)(SND_PCM_SUBSTREAM *)
state	h/vxSoundCore.h	/^    SND_PCM_SUBSTREAM_STATE state;$/;"	m	struct:vxSndPcmMmapStaus	typeref:typename:SND_PCM_SUBSTREAM_STATE
status	h/vxSoundCore.h	/^        VX_SND_PCM_MMAP_STATUS status;$/;"	m	union:vxSndSubstreamSyncPtr::__anoncbc58872010a	typeref:typename:VX_SND_PCM_MMAP_STATUS
status	h/vxSoundCore.h	/^    VX_SND_PCM_MMAP_STATUS status;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:VX_SND_PCM_MMAP_STATUS
step	h/control.h	/^            uint32_t step;$/;"	m	struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730208	typeref:typename:uint32_t
step	h/control.h	/^            uint64_t step;$/;"	m	struct:vxSndCtrlInfo::__anon7e192d73010a::__anon7e192d730308	typeref:typename:uint64_t
stopDmaFirst	h/soc.h	/^    unsigned int stopDmaFirst:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
stopSyncRequired	h/vxSoundCore.h	/^    BOOL stopSyncRequired;      \/* sync_stop will be called *\/$/;"	m	struct:vxSndPcmRuntime	typeref:typename:BOOL
stopThreshold	h/vxSoundCore.h	/^    SND_FRAMES_T stopThreshold;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:SND_FRAMES_T
stop_threshold	h/vxSoundCore.h	/^    SND_FRAMES_T stop_threshold; \/* min avail frames for automatic stop *\/$/;"	m	struct:vxSndPcmSwParams	typeref:typename:SND_FRAMES_T
stream	h/vxSoundCore.h	/^    SND_PCM_STREAM *            stream;$/;"	m	struct:vxSndPcmSubStream	typeref:typename:SND_PCM_STREAM *
stream	h/vxSoundCore.h	/^    struct vxSndPcmStream stream[2];$/;"	m	struct:vxSndPcm	typeref:struct:vxSndPcmStream[2]
streamActiveCnt	h/soc.h	/^    uint32_t streamActiveCnt[SNDRV_PCM_STREAM_MAX]; \/* usage count *\/$/;"	m	struct:vxSndSocDai	typeref:typename:uint32_t[]
streamDirect	h/vxSoundCore.h	/^typedef enum streamDirect$/;"	g
streamName	h/soc.h	/^    const char * streamName;        \/* Stream name *\/$/;"	m	struct:vxSndSocDaiLink	typeref:typename:const char *
streamName	h/soc.h	/^    const char *streamName;$/;"	m	struct:vxSndSocPcmStream	typeref:typename:const char *
stream_event	h/soc.h	/^    STATUS (*stream_event)(struct vxSndSocComponent *component, int event);$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,int event)
subFormat	src/audioLibWav.c	/^    UINT8   subFormat [16];$/;"	m	struct:extWaveFormat	typeref:typename:UINT8[16]	file:
substream	h/vxSoundCore.h	/^    struct vxSndPcmSubStream * substream;$/;"	m	struct:vxSndPcmStream	typeref:struct:vxSndPcmSubStream *
substreamNum	h/control.h	/^    uint32_t substreamNum;  \/* subdevice (substream) number *\/$/;"	m	struct:vxSndCtrlId	typeref:typename:uint32_t
substreamSpinlockIsr	h/vxSoundCore.h	/^    spinlockIsr_t               substreamSpinlockIsr;$/;"	m	struct:vxSndPcmSubStream	typeref:typename:spinlockIsr_t
supportHwParams	h/vxSoundCore.h	/^    VX_SND_PCM_SUPPORT_HW_PARAMS supportHwParams;$/;"	m	struct:vxSndPcmRuntime	typeref:typename:VX_SND_PCM_SUPPORT_HW_PARAMS
suspend_bias_off	h/soc.h	/^    uint32_t suspend_bias_off:1;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:uint32_t:1
suspend_post	h/soc.h	/^    STATUS (*suspend_post)(struct vxSndSocCard *card);$/;"	m	struct:vxSndSocCard	typeref:typename:STATUS (*)(struct vxSndSocCard * card)
suspend_pre	h/soc.h	/^    STATUS (*suspend_pre)(struct vxSndSocCard *card);$/;"	m	struct:vxSndSocCard	typeref:typename:STATUS (*)(struct vxSndSocCard * card)
suspended	h/soc.h	/^    uint32_t suspended:1; \/* is in suspend PM state *\/$/;"	m	struct:vxSndSocComponent	typeref:typename:uint32_t:1
symmetric_channels	h/soc.h	/^    uint32_t symmetric_channels:1;$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:uint32_t:1
symmetric_channels	h/soc.h	/^    unsigned int symmetric_channels:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
symmetric_rate	h/soc.h	/^    uint32_t symmetric_rate:1;$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:uint32_t:1
symmetric_rate	h/soc.h	/^    unsigned int symmetric_rate:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
symmetric_sample_bits	h/soc.h	/^    uint32_t symmetric_sample_bits:1;$/;"	m	struct:vxSndSocDaiDriver	typeref:typename:uint32_t:1
symmetric_sample_bits	h/soc.h	/^    unsigned int symmetric_sample_bits:1;$/;"	m	struct:vxSndSocDaiLink	typeref:typename:unsigned int:1
syncStop	h/soc.h	/^    STATUS (*syncStop)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream)
syncStop	h/vxSoundCore.h	/^    STATUS (*syncStop) (SND_PCM_SUBSTREAM * substream);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream)
tagDATA	src/audioLibWav.c	/^    UINT8           tagDATA [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagDATA	src/audioLibWav.c	/^    UINT8           tagDATA [4];$/;"	m	struct:pcmFileHeader	typeref:typename:UINT8[4]	file:
tagDATA	vxTest/src/tmAudioNew.h	/^    UINT8           tagDATA [4];$/;"	m	struct:wavFileHeader	typeref:typename:UINT8[4]
tagFACT	src/audioLibWav.c	/^    UINT8           tagFACT [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagFMT	src/audioLibWav.c	/^    UINT8           tagFMT [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagFMT	src/audioLibWav.c	/^    UINT8           tagFMT [4];$/;"	m	struct:pcmFileHeader	typeref:typename:UINT8[4]	file:
tagFMT	vxTest/src/tmAudioNew.h	/^    UINT8           tagFMT [4];$/;"	m	struct:wavFileHeader	typeref:typename:UINT8[4]
tagRIFF	src/audioLibWav.c	/^    UINT8           tagRIFF [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagRIFF	src/audioLibWav.c	/^    UINT8           tagRIFF [4];$/;"	m	struct:pcmFileHeader	typeref:typename:UINT8[4]	file:
tagRIFF	vxTest/src/tmAudioNew.h	/^    UINT8           tagRIFF [4];$/;"	m	struct:wavFileHeader	typeref:typename:UINT8[4]
tagWAVE	src/audioLibWav.c	/^    UINT8           tagWAVE [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagWAVE	src/audioLibWav.c	/^    UINT8           tagWAVE [4];$/;"	m	struct:pcmFileHeader	typeref:typename:UINT8[4]	file:
tagWAVE	vxTest/src/tmAudioNew.h	/^    UINT8           tagWAVE [4];$/;"	m	struct:wavFileHeader	typeref:typename:UINT8[4]
tdmRxMask	h/soc.h	/^    uint32_t tdmRxMask;$/;"	m	struct:vxSndSocDai	typeref:typename:uint32_t
tdmTxMask	h/soc.h	/^    uint32_t tdmTxMask;$/;"	m	struct:vxSndSocDai	typeref:typename:uint32_t
testAudioSocCard	vxTest/src/tmMachineDrv.c	/^STATUS testAudioSocCard ()$/;"	f	typeref:typename:STATUS
testCmpClose	vxTest/src/tmAudioNewLib.c	/^LOCAL STATUS testCmpClose$/;"	f	typeref:typename:LOCAL STATUS
testCmpOpen	vxTest/src/tmAudioNewLib.c	/^LOCAL STATUS testCmpOpen$/;"	f	typeref:typename:LOCAL STATUS
testCmpPrepare	vxTest/src/tmAudioNewLib.c	/^LOCAL STATUS testCmpPrepare$/;"	f	typeref:typename:LOCAL STATUS
testCmpntProbe	vxTest/src/tmAudioNewLib.c	/^LOCAL int32_t testCmpntProbe$/;"	f	typeref:typename:LOCAL int32_t
testCmpntRead	vxTest/src/tmAudioNewLib.c	/^LOCAL uint32_t testCmpntRead$/;"	f	typeref:typename:LOCAL uint32_t
testCmpntWrite	vxTest/src/tmAudioNewLib.c	/^LOCAL int32_t testCmpntWrite$/;"	f	typeref:typename:LOCAL int32_t
testConstruct	vxTest/src/tmAudioNewLib.c	/^LOCAL int testConstruct$/;"	f	typeref:typename:LOCAL int
testDaiDriverLib	vxTest/src/tmAudioNewLib.c	/^LOCAL VX_SND_SOC_DAI_DRIVER testDaiDriverLib[] =$/;"	v	typeref:typename:LOCAL VX_SND_SOC_DAI_DRIVER[]
testDaiOps	vxTest/src/tmAudioNewLib.c	/^LOCAL const VX_SND_SOC_DAI_OPS testDaiOps =$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_DAI_OPS
testDbgMask	vxTest/src/tmMachineDrv.c	/^LOCAL uint32_t testDbgMask = DBG_ALL;$/;"	v	typeref:typename:LOCAL uint32_t
testHwParams	vxTest/src/tmAudioNewLib.c	/^LOCAL int32_t testHwParams$/;"	f	typeref:typename:LOCAL int32_t
testMute	vxTest/src/tmAudioNewLib.c	/^LOCAL int32_t testMute$/;"	f	typeref:typename:LOCAL int32_t
testSetDaiFmt	vxTest/src/tmAudioNewLib.c	/^LOCAL int32_t testSetDaiFmt$/;"	f	typeref:typename:LOCAL int32_t
testSetIntervalPara	vxTest/src/tmAudioNew.c	/^LOCAL void testSetIntervalPara$/;"	f	typeref:typename:LOCAL void
testSocSndCard	vxTest/src/tmMachineDrv.c	/^LOCAL VX_SND_SOC_CARD testSocSndCard =$/;"	v	typeref:typename:LOCAL VX_SND_SOC_CARD
testSocSndCardDaiDefaultLink	vxTest/src/tmMachineDrv.c	/^LOCAL VX_SND_SOC_DAI_LINK testSocSndCardDaiDefaultLink[] =$/;"	v	typeref:typename:LOCAL VX_SND_SOC_DAI_LINK[]
testSocSndCardResumePre	vxTest/src/tmMachineDrv.c	/^LOCAL int32_t testSocSndCardResumePre$/;"	f	typeref:typename:LOCAL int32_t
testSocSndCardSuspendPost	vxTest/src/tmMachineDrv.c	/^LOCAL int32_t testSocSndCardSuspendPost$/;"	f	typeref:typename:LOCAL int32_t
test_hw_params_fixup_helper	vxTest/src/tmMachineDrv.c	/^STATUS test_hw_params_fixup_helper$/;"	f	typeref:typename:STATUS
textList	h/control.h	/^    const char * const * textList;$/;"	m	struct:vxSndEnum	typeref:typename:const char * const *
texts	vxTest/src/tmAudioNewLib.c	/^LOCAL const char * const texts[] =$/;"	v	typeref:typename:LOCAL const char * const[]
tlv	h/control.h	/^        } tlv;$/;"	m	struct:vxSndControl	typeref:union:vxSndControl::__anon7e192d730a0a
tlvBuf	h/control.h	/^    uint32_t tlvBuf[0];    \/* first TLV *\/$/;"	m	struct:vxSndCtlTlv	typeref:typename:uint32_t[0]
tmAudioDataInfo	vxTest/src/tmAudioNew.h	/^typedef struct tmAudioDataInfo$/;"	s
tmAudioExec	vxTest/src/tmAudio.c	/^STATUS tmAudioExec$/;"	f	typeref:typename:STATUS
tmAudioNewExec	vxTest/src/tmAudioNew.c	/^STATUS tmAudioNewExec$/;"	f	typeref:typename:STATUS
tmAudioNewLibExec	vxTest/src/tmAudioNewLib.c	/^STATUS tmAudioNewLibExec$/;"	f	typeref:typename:STATUS
tmAudio_WavParse	vxTest/src/tmAudioNew.c	/^STATUS tmAudio_WavParse()$/;"	f	typeref:typename:STATUS
tmAudio_capture	vxTest/src/tmAudioNew.c	/^STATUS tmAudio_capture()$/;"	f	typeref:typename:STATUS
tmAudio_libTest	vxTest/src/tmAudioNewLib.c	/^STATUS tmAudio_libTest()$/;"	f	typeref:typename:STATUS
tmAudio_mini	vxTest/src/tmAudioNew.c	/^STATUS tmAudio_mini()$/;"	f	typeref:typename:STATUS
tmAudio_playback	vxTest/src/tmAudioNew.c	/^STATUS tmAudio_playback()$/;"	f	typeref:typename:STATUS
tmPcmWaveFormat	vxTest/src/tmAudioNew.h	/^typedef struct tmPcmWaveFormat$/;"	s
tmStandIO	vxTest/src/tmAudio.c	/^VXTEST_STATUS tmStandIO(UINT32 times)$/;"	f	typeref:typename:VXTEST_STATUS
tmWavFilesRecPlay	vxTest/src/tmAudio.c	/^VXTEST_STATUS tmWavFilesRecPlay(void)$/;"	f	typeref:typename:VXTEST_STATUS
tmWavFilesWriteRead	vxTest/src/tmAudio.c	/^VXTEST_STATUS tmWavFilesWriteRead(void)$/;"	f	typeref:typename:VXTEST_STATUS
tmWriteReadSpeed	vxTest/src/tmAudio.c	/^VXTEST_STATUS tmWriteReadSpeed(UINT32 recPeriod)$/;"	f	typeref:typename:VXTEST_STATUS
topology_name_prefix	h/soc.h	/^    const char *topology_name_prefix;$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:const char *
topology_shortname	h/soc.h	/^    char topology_shortname[32];$/;"	m	struct:vxSndSocCard	typeref:typename:char[32]
topology_shortname_created	h/soc.h	/^    unsigned int topology_shortname_created:1;$/;"	m	struct:vxSndSocCard	typeref:typename:unsigned int:1
trigger	h/soc.h	/^    STATUS (*trigger)(SND_PCM_SUBSTREAM *, int,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM *,int,struct vxSndSocDai *)
trigger	h/soc.h	/^    STATUS (*trigger)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,SND_PCM_SUBSTREAM * substream,int cmd)
trigger	h/soc.h	/^    enum snd_soc_dpcm_trigger trigger[2]; \/* trigger type for DPCM *\/$/;"	m	struct:vxSndSocDaiLink	typeref:enum:snd_soc_dpcm_trigger[2]
trigger	h/soc.h	/^    int  (*trigger) (SND_PCM_SUBSTREAM *, int);$/;"	m	struct:vxSndSocOps	typeref:typename:int (*)(SND_PCM_SUBSTREAM *,int)
trigger	h/vxSoundCore.h	/^    STATUS (*trigger) (SND_PCM_SUBSTREAM * substream, int cmd);$/;"	m	struct:vxSndPcmStreamOps	typeref:typename:STATUS (*)(SND_PCM_SUBSTREAM * substream,int cmd)
type	h/control.h	/^    VX_SND_CTRL_DATA_TYPE  type;    \/* R: value type - VX_SND_CTL_DATA_TYPE_* *\/$/;"	m	struct:vxSndCtrlInfo	typeref:typename:VX_SND_CTRL_DATA_TYPE
type	h/vxSoundCore.h	/^    VX_SND_DEV_TYPE type;$/;"	m	struct:vxSndDevice	typeref:typename:VX_SND_DEV_TYPE
type	vxTest/src/tmAudioNew.h	/^    VX_SND_CTRL_DATA_TYPE type;$/;"	m	struct:ctrlConfigInfo	typeref:typename:VX_SND_CTRL_DATA_TYPE
unit	h/audioLibCore.h	/^    UINT32          unit;$/;"	m	struct:audioDev	typeref:typename:UINT32
upStreamMsg	src/audioLibCore.c	/^    MSG_Q_ID            upStreamMsg;    \/* sampling from device to IO *\/$/;"	m	struct:audioChanInfo	typeref:typename:MSG_Q_ID	file:
useMsb	h/audioLibCore.h	/^    BOOL    useMsb;             \/* valid data stores as MSB or LSB *\/$/;"	m	struct:audioDataInfo	typeref:typename:BOOL
useMsb	h/audioLibCore.h	/^    BOOL    useMsb;         \/* device data is MSB first *\/$/;"	m	struct:audioDevInfo	typeref:typename:BOOL
useMsb	vxTest/src/tmAudioNew.h	/^    BOOL     useMsb;             \/* valid data stores as MSB or LSB *\/$/;"	m	struct:tmAudioDataInfo	typeref:typename:BOOL
use_dai_pcm_id	h/soc.h	/^    BOOL use_dai_pcm_id;    \/* use DAI link PCM ID as PCM device number *\/$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:BOOL
use_pmdown_time	h/soc.h	/^    uint32_t use_pmdown_time:1; \/* care pmdown_time at stop *\/$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:uint32_t:1
used	h/control.h	/^    uint32_t used;      \/* R: count of control IDs set to pids*\/$/;"	m	struct:vxSndCtrlList	typeref:typename:uint32_t
usedSize	src/audioLibCore.c	/^    ssize_t         usedSize;   \/* valid data size of this buffer*\/$/;"	m	struct:audioBufferInfo	typeref:typename:ssize_t	file:
val_bytes	h/soc.h	/^    int val_bytes;$/;"	m	struct:vxSndSocComponent	typeref:typename:int
validBitsPerSample	src/audioLibWav.c	/^    UINT16  validBitsPerSample;$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
validWidth	h/pcm.h	/^    uint8_t validWidth;\/* valid data bit width *\/$/;"	m	struct:vxSndPcmFormatInfo	typeref:typename:uint8_t
validXferFramesGet	src/pcm.c	/^LOCAL SND_FRAMES_T validXferFramesGet$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
value	h/control.h	/^            uint32_t value[128];$/;"	m	union:vxSndCtrlDataValue::__anon7e192d73050a::__anon7e192d73060a	typeref:typename:uint32_t[128]
value	h/control.h	/^            uint64_t value[64];$/;"	m	union:vxSndCtrlDataValue::__anon7e192d73050a::__anon7e192d73070a	typeref:typename:uint64_t[64]
value	h/control.h	/^        } value;        \/* RO *\/$/;"	m	struct:vxSndCtrlDataValue	typeref:union:vxSndCtrlDataValue::__anon7e192d73050a
value	h/control.h	/^        } value;$/;"	m	struct:vxSndCtrlInfo	typeref:union:vxSndCtrlInfo::__anon7e192d73010a
value	vxTest/src/tmAudioNew.h	/^            UINT32 value;$/;"	m	struct:ctrlConfigInfo::__anon75eec52c020a::__anon75eec52c0308	typeref:typename:UINT32
value	vxTest/src/tmAudioNew.h	/^            UINT64 value;$/;"	m	struct:ctrlConfigInfo::__anon75eec52c020a::__anon75eec52c0408	typeref:typename:UINT64
value	vxTest/src/tmAudioNew.h	/^            char *value;$/;"	m	struct:ctrlConfigInfo::__anon75eec52c020a::__anon75eec52c0508	typeref:typename:char *
value	vxTest/src/tmAudioNew.h	/^        } value;$/;"	m	struct:ctrlConfigInfo	typeref:union:ctrlConfigInfo::__anon75eec52c020a
valueList	h/control.h	/^    const unsigned int * valueList;$/;"	m	struct:vxSndEnum	typeref:typename:const unsigned int *
volume	h/audioLibCore.h	/^    AUDIO_VOLUME    volume;$/;"	m	union:audioIoctlArg	typeref:typename:AUDIO_VOLUME
volume	src/audioLibCore.c	/^    AUDIO_VOLUME        volume;$/;"	m	struct:audioChanInfo	typeref:typename:AUDIO_VOLUME	file:
vxPcmFormats	src/pcm.c	/^LOCAL const VX_SND_PCM_FMT_INFO vxPcmFormats[VX_SND_FMT_MAX+1] =$/;"	v	typeref:typename:LOCAL const VX_SND_PCM_FMT_INFO[]
vxSndCardCtrlFindNoLock	src/control.c	/^LOCAL VX_SND_CONTROL * vxSndCardCtrlFindNoLock$/;"	f	typeref:typename:LOCAL VX_SND_CONTROL *
vxSndCardDbgMask	src/card.c	/^uint32_t vxSndCardDbgMask = VX_SND_SOC_DBG_ALL;$/;"	v	typeref:typename:uint32_t
vxSndCardGet	src/card.c	/^VX_SND_SOC_CARD * vxSndCardGet (void)$/;"	f	typeref:typename:VX_SND_SOC_CARD *
vxSndCardRegister	src/card.c	/^STATUS vxSndCardRegister$/;"	f	typeref:typename:STATUS
vxSndCmpGet	src/card.c	/^DL_LIST * vxSndCmpGet (void)$/;"	f	typeref:typename:DL_LIST *
vxSndControl	h/control.h	/^typedef struct vxSndControl$/;"	s
vxSndControlsAdd	src/control.c	/^STATUS vxSndControlsAdd$/;"	f	typeref:typename:STATUS
vxSndCoreDbgMask	src/vxSoundCore.c	/^UINT32 vxSndCoreDbgMask = VX_SND_CORE_DBG_ALL;$/;"	v	typeref:typename:UINT32
vxSndCpntRegister	src/card.c	/^STATUS vxSndCpntRegister$/;"	f	typeref:typename:STATUS
vxSndCtlAdd	src/control.c	/^LOCAL STATUS vxSndCtlAdd$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtlTlv	h/control.h	/^typedef struct vxSndCtlTlv$/;"	s
vxSndCtrlCardInfo	h/control.h	/^typedef struct vxSndCtrlCardInfo$/;"	s
vxSndCtrlCreate	src/control.c	/^STATUS vxSndCtrlCreate$/;"	f	typeref:typename:STATUS
vxSndCtrlDataType	h/control.h	/^typedef enum vxSndCtrlDataType$/;"	g
vxSndCtrlDataValue	h/control.h	/^typedef struct vxSndCtrlDataValue$/;"	s
vxSndCtrlDbgMask	src/control.c	/^UINT32 vxSndCtrlDbgMask = VX_SND_CTRL_DBG_ALL;$/;"	v	typeref:typename:UINT32
vxSndCtrlDev	h/vxSoundCore.h	/^typedef struct vxSndCtrlDev$/;"	s
vxSndCtrlEnumValToItem	src/soc.c	/^uint32_t vxSndCtrlEnumValToItem$/;"	f	typeref:typename:uint32_t
vxSndCtrlGet	src/control.c	/^LOCAL STATUS vxSndCtrlGet$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlId	h/control.h	/^typedef struct vxSndCtrlId$/;"	s
vxSndCtrlInfo	h/control.h	/^typedef struct vxSndCtrlInfo$/;"	s
vxSndCtrlInfo	src/control.c	/^LOCAL STATUS vxSndCtrlInfo$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlItemToEnumVal	src/soc.c	/^uint32_t vxSndCtrlItemToEnumVal$/;"	f	typeref:typename:uint32_t
vxSndCtrlList	h/control.h	/^typedef struct vxSndCtrlList$/;"	s
vxSndCtrlListGet	src/control.c	/^LOCAL STATUS vxSndCtrlListGet$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlPut	src/control.c	/^LOCAL STATUS vxSndCtrlPut$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlTlvRead	src/control.c	/^LOCAL STATUS vxSndCtrlTlvRead$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlType	h/control.h	/^typedef enum vxSndCtrlType$/;"	g
vxSndCtrlVolumeGet	src/soc.c	/^STATUS vxSndCtrlVolumeGet$/;"	f	typeref:typename:STATUS
vxSndCtrlVolumeInfo	src/soc.c	/^STATUS vxSndCtrlVolumeInfo$/;"	f	typeref:typename:STATUS
vxSndCtrlVolumePut	src/soc.c	/^STATUS vxSndCtrlVolumePut$/;"	f	typeref:typename:STATUS
vxSndDevCreate	src/vxSoundCore.c	/^STATUS vxSndDevCreate$/;"	f	typeref:typename:STATUS
vxSndDevScMemValidate	src/vxSoundCore.c	/^STATUS vxSndDevScMemValidate$/;"	f	typeref:typename:STATUS
vxSndDevType	h/vxSoundCore.h	/^typedef enum vxSndDevType$/;"	g
vxSndDevice	h/vxSoundCore.h	/^typedef struct vxSndDevice$/;"	s
vxSndEnum	h/control.h	/^typedef struct vxSndEnum$/;"	s
vxSndFormatIndex	h/vxSoundCore.h	/^typedef enum vxSndFormatIndex$/;"	g
vxSndGetRateFromBitmap	src/pcm.c	/^uint32_t vxSndGetRateFromBitmap$/;"	f	typeref:typename:uint32_t
vxSndInterval	h/vxSoundCore.h	/^typedef struct vxSndInterval$/;"	s
vxSndMixerControl	h/control.h	/^typedef struct vxSndMixerControl$/;"	s
vxSndPcm	h/vxSoundCore.h	/^typedef struct vxSndPcm$/;"	s
vxSndPcmContructSupportHwParams	src/pcm.c	/^LOCAL void vxSndPcmContructSupportHwParams$/;"	f	typeref:typename:LOCAL void
vxSndPcmCreate	src/pcm.c	/^STATUS vxSndPcmCreate$/;"	f	typeref:typename:STATUS
vxSndPcmDbgMask	src/pcm.c	/^UINT32 vxSndPcmDbgMask = VX_SND_PCM_DBG_ERR;$/;"	v	typeref:typename:UINT32
vxSndPcmDrain	src/pcm.c	/^LOCAL STATUS vxSndPcmDrain$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmDrop	src/pcm.c	/^LOCAL STATUS vxSndPcmDrop$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmFmtPhyWidthGet	src/pcm.c	/^uint32_t vxSndPcmFmtPhyWidthGet$/;"	f	typeref:typename:uint32_t
vxSndPcmFmtValidWidthGet	src/pcm.c	/^uint32_t vxSndPcmFmtValidWidthGet$/;"	f	typeref:typename:uint32_t
vxSndPcmFormatInfo	h/pcm.h	/^typedef struct vxSndPcmFormatInfo$/;"	s
vxSndPcmHardware	h/vxSoundCore.h	/^typedef struct vxSndPcmHardware$/;"	s
vxSndPcmHwFree	src/pcm.c	/^LOCAL STATUS vxSndPcmHwFree$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmHwParams	h/vxSoundCore.h	/^typedef struct vxSndPcmHwParams$/;"	s
vxSndPcmHwParams	src/pcm.c	/^LOCAL STATUS vxSndPcmHwParams$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmHwParamsRefine	src/pcm.c	/^LOCAL STATUS vxSndPcmHwParamsRefine$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmHwRateToBitmap	src/pcm.c	/^STATUS vxSndPcmHwRateToBitmap$/;"	f	typeref:typename:STATUS
vxSndPcmMmapControl	h/vxSoundCore.h	/^typedef struct vxSndPcmMmapControl$/;"	s
vxSndPcmMmapStaus	h/vxSoundCore.h	/^typedef struct vxSndPcmMmapStaus$/;"	s
vxSndPcmOpsIoctl	src/pcm.c	/^LOCAL STATUS vxSndPcmOpsIoctl$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmOpsReset	src/pcm.c	/^LOCAL STATUS vxSndPcmOpsReset$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmPause	src/pcm.c	/^LOCAL STATUS vxSndPcmPause$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmPrepare	src/pcm.c	/^LOCAL STATUS vxSndPcmPrepare$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmReset	src/pcm.c	/^LOCAL STATUS vxSndPcmReset$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmRuntime	h/vxSoundCore.h	/^typedef struct vxSndPcmRuntime$/;"	s
vxSndPcmStart	src/pcm.c	/^LOCAL STATUS vxSndPcmStart$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmStop	src/pcm.c	/^LOCAL STATUS vxSndPcmStop$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmStopSync	src/pcm.c	/^LOCAL STATUS vxSndPcmStopSync$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmStream	h/vxSoundCore.h	/^typedef struct vxSndPcmStream$/;"	s
vxSndPcmStreamOps	h/vxSoundCore.h	/^typedef struct vxSndPcmStreamOps$/;"	s
vxSndPcmSubStream	h/vxSoundCore.h	/^typedef struct vxSndPcmSubStream$/;"	s
vxSndPcmSupportHwParams	h/vxSoundCore.h	/^typedef struct vxSndPcmSupportHwParams$/;"	s
vxSndPcmSupportedHwParamsGet	src/pcm.c	/^LOCAL void vxSndPcmSupportedHwParamsGet$/;"	f	typeref:typename:LOCAL void
vxSndPcmSupportedHwParamsInit	src/pcm.c	/^LOCAL void vxSndPcmSupportedHwParamsInit$/;"	f	typeref:typename:LOCAL void
vxSndPcmSwParams	h/vxSoundCore.h	/^typedef struct vxSndPcmSwParams$/;"	s
vxSndPcmXrun	src/pcm.c	/^LOCAL void vxSndPcmXrun$/;"	f	typeref:typename:LOCAL void
vxSndSocBiasLevel	h/soc.h	/^typedef enum vxSndSocBiasLevel$/;"	g
vxSndSocCard	h/soc.h	/^typedef struct vxSndSocCard$/;"	s
vxSndSocCardCtrlsAdd	src/soc.c	/^STATUS vxSndSocCardCtrlsAdd$/;"	f	typeref:typename:STATUS
vxSndSocComponent	h/soc.h	/^typedef struct vxSndSocComponent$/;"	s
vxSndSocComponentActiveCntGet	src/soc.c	/^uint32_t vxSndSocComponentActiveCntGet$/;"	f	typeref:typename:uint32_t
vxSndSocComponentCtrlsAdd	src/soc.c	/^STATUS vxSndSocComponentCtrlsAdd$/;"	f	typeref:typename:STATUS
vxSndSocComponentDriver	h/soc.h	/^typedef struct vxSndSocComponentDriver$/;"	s
vxSndSocComponentRead	src/soc.c	/^uint32_t vxSndSocComponentRead$/;"	f	typeref:typename:uint32_t
vxSndSocComponentReadUnlock	src/soc.c	/^uint32_t vxSndSocComponentReadUnlock$/;"	f	typeref:typename:uint32_t
vxSndSocComponentUpdate	src/soc.c	/^STATUS vxSndSocComponentUpdate$/;"	f	typeref:typename:STATUS
vxSndSocComponentWrite	src/soc.c	/^STATUS vxSndSocComponentWrite$/;"	f	typeref:typename:STATUS
vxSndSocComponentWriteUnlock	src/soc.c	/^STATUS vxSndSocComponentWriteUnlock$/;"	f	typeref:typename:STATUS
vxSndSocDai	h/soc.h	/^typedef struct vxSndSocDai$/;"	s
vxSndSocDaiActiveAllCntGet	src/soc.c	/^uint32_t vxSndSocDaiActiveAllCntGet$/;"	f	typeref:typename:uint32_t
vxSndSocDaiActiveCntAdd	src/soc.c	/^LOCAL void vxSndSocDaiActiveCntAdd$/;"	f	typeref:typename:LOCAL void
vxSndSocDaiActiveStreamCntGet	src/soc.c	/^uint32_t vxSndSocDaiActiveStreamCntGet$/;"	f	typeref:typename:uint32_t
vxSndSocDaiCtrlsAdd	src/soc.c	/^STATUS vxSndSocDaiCtrlsAdd$/;"	f	typeref:typename:STATUS
vxSndSocDaiDigitalMute	src/soc.c	/^STATUS vxSndSocDaiDigitalMute$/;"	f	typeref:typename:STATUS
vxSndSocDaiDriver	h/soc.h	/^typedef struct vxSndSocDaiDriver$/;"	s
vxSndSocDaiFmtSet	src/soc.c	/^int32_t vxSndSocDaiFmtSet$/;"	f	typeref:typename:int32_t
vxSndSocDaiHwFree	src/soc.c	/^void vxSndSocDaiHwFree$/;"	f	typeref:typename:void
vxSndSocDaiLink	h/soc.h	/^typedef struct vxSndSocDaiLink$/;"	s
vxSndSocDaiLinkComponent	h/soc.h	/^typedef struct vxSndSocDaiLinkComponent$/;"	s
vxSndSocDaiOps	h/soc.h	/^typedef struct vxSndSocDaiOps$/;"	s
vxSndSocDaiShutdown	src/soc.c	/^void vxSndSocDaiShutdown$/;"	f	typeref:typename:void
vxSndSocDaiStartup	src/soc.c	/^STATUS vxSndSocDaiStartup$/;"	f	typeref:typename:STATUS
vxSndSocDbgMask	src/soc.c	/^UINT32 vxSndSocDbgMask = VX_SND_SOC_DBG_ALL;$/;"	v	typeref:typename:UINT32
vxSndSocOps	h/soc.h	/^typedef struct vxSndSocOps$/;"	s
vxSndSocPcmComponentIoctl	src/soc.c	/^LOCAL STATUS vxSndSocPcmComponentIoctl$/;"	f	typeref:typename:LOCAL STATUS
vxSndSocPcmCreate	src/soc.c	/^STATUS vxSndSocPcmCreate$/;"	f	typeref:typename:STATUS
vxSndSocPcmRuntime	h/soc.h	/^typedef struct vxSndSocPcmRuntime$/;"	s
vxSndSocPcmStream	h/soc.h	/^typedef struct vxSndSocPcmStream$/;"	s
vxSndSocRuntimeActive	src/soc.c	/^LOCAL void vxSndSocRuntimeActive$/;"	f	typeref:typename:LOCAL void
vxSndSocRuntimeDeactive	src/soc.c	/^ LOCAL void vxSndSocRuntimeDeactive$/;"	f	typeref:typename:LOCAL void
vxSndSocRuntimeHwCalculate	src/soc.c	/^LOCAL STATUS vxSndSocRuntimeHwCalculate$/;"	f	typeref:typename:LOCAL STATUS
vxSndSocRuntimeHwparamsSet	src/soc.c	/^void vxSndSocRuntimeHwparamsSet$/;"	f	typeref:typename:void
vxSndSubstreamCreate	src/pcm.c	/^LOCAL STATUS vxSndSubstreamCreate$/;"	f	typeref:typename:LOCAL STATUS
vxSndSubstreamDmaBuf	h/vxSoundCore.h	/^typedef struct vxSndSubstreamDmaBuf$/;"	s
vxSndSubstreamStatus	h/vxSoundCore.h	/^typedef struct vxSndSubstreamStatus$/;"	s
vxSndSubstreamSyncPtr	h/vxSoundCore.h	/^typedef struct vxSndSubstreamSyncPtr$/;"	s
vxSndValidRates	src/pcm.c	/^LOCAL const uint32_t vxSndValidRates[] =$/;"	v	typeref:typename:LOCAL const uint32_t[]
vxSocPcmClean	src/soc.c	/^LOCAL void vxSocPcmClean$/;"	f	typeref:typename:LOCAL void
vxSocPcmClose	src/soc.c	/^LOCAL STATUS vxSocPcmClose$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmComponentAck	src/soc.c	/^STATUS vxSocPcmComponentAck$/;"	f	typeref:typename:STATUS
vxSocPcmComponentCopy	src/soc.c	/^LOCAL STATUS vxSocPcmComponentCopy$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmComponentSyncStop	src/soc.c	/^LOCAL STATUS vxSocPcmComponentSyncStop$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmHwChannelUpdate	src/soc.c	/^LOCAL void vxSocPcmHwChannelUpdate$/;"	f	typeref:typename:LOCAL void
vxSocPcmHwClean	src/soc.c	/^LOCAL void vxSocPcmHwClean$/;"	f	typeref:typename:LOCAL void
vxSocPcmHwDefInit	src/soc.c	/^LOCAL void vxSocPcmHwDefInit$/;"	f	typeref:typename:LOCAL void
vxSocPcmHwFormateUpdate	src/soc.c	/^LOCAL void vxSocPcmHwFormateUpdate$/;"	f	typeref:typename:LOCAL void
vxSocPcmHwFree	src/soc.c	/^LOCAL STATUS vxSocPcmHwFree$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmHwParams	src/soc.c	/^LOCAL STATUS vxSocPcmHwParams$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmHwRateUpdate	src/soc.c	/^LOCAL void vxSocPcmHwRateUpdate$/;"	f	typeref:typename:LOCAL void
vxSocPcmOpen	src/soc.c	/^LOCAL STATUS vxSocPcmOpen$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmPointer	src/soc.c	/^LOCAL SND_FRAMES_U_T vxSocPcmPointer$/;"	f	typeref:typename:LOCAL SND_FRAMES_U_T
vxSocPcmPrepare	src/soc.c	/^LOCAL STATUS vxSocPcmPrepare$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmRuntimeHwInit	src/soc.c	/^LOCAL STATUS vxSocPcmRuntimeHwInit$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmTrigger	src/soc.c	/^LOCAL STATUS vxSocPcmTrigger$/;"	f	typeref:typename:LOCAL STATUS
vxSoundCard	h/vxSoundCore.h	/^typedef struct vxSoundCard$/;"	s
vxSoundCoreInit	src/vxSoundCore.c	/^void vxSoundCoreInit (void)$/;"	f	typeref:typename:void
vxTestTbl_tmAudio	vxTest/src/tmAudio.c	/^LOCAL VXTEST_ENTRY vxTestTbl_tmAudio[] = $/;"	v	typeref:typename:LOCAL VXTEST_ENTRY[]
vxTestTbl_tmAudioNew	vxTest/src/tmAudioNew.c	/^LOCAL VXTEST_ENTRY vxTestTbl_tmAudioNew[] =$/;"	v	typeref:typename:LOCAL VXTEST_ENTRY[]
vxTestTbl_tmAudioNewLib	vxTest/src/tmAudioNewLib.c	/^LOCAL VXTEST_ENTRY vxTestTbl_tmAudioNewLib[] =$/;"	v	typeref:typename:LOCAL VXTEST_ENTRY[]
vxbAboxMachineDrvCtrl	vxTest/src/tmMachineDrv.h	/^typedef struct vxbAboxMachineDrvCtrl$/;"	s
vxbAttachNode	vxTest/src/tmAudioNew.h	/^    SL_NODE         vxbAttachNode;$/;"	m	struct:vxbDev	typeref:typename:SL_NODE
vxbClass	vxTest/src/tmAudioNew.h	/^    VXB_BUSTYPE_ID  vxbClass;$/;"	m	struct:vxbDev	typeref:typename:VXB_BUSTYPE_ID
vxbDev	vxTest/src/tmAudioNew.h	/^typedef struct vxbDev$/;"	s
vxbFdtSndDummyDrv	src/vxSoundUtils.c	/^VXB_DRV vxbFdtSndDummyDrv =$/;"	v	typeref:typename:VXB_DRV
vxbFlags	vxTest/src/tmAudioNew.h	/^    UINT32          vxbFlags;$/;"	m	struct:vxbDev	typeref:typename:UINT32
vxbList	vxTest/src/tmAudioNew.h	/^    SL_LIST         vxbList;$/;"	m	struct:vxbDev	typeref:typename:SL_LIST
vxbNode	vxTest/src/tmAudioNew.h	/^    SL_NODE         vxbNode;$/;"	m	struct:vxbDev	typeref:typename:SL_NODE
vxbRefCnt	vxTest/src/tmAudioNew.h	/^    int             vxbRefCnt;$/;"	m	struct:vxbDev	typeref:typename:int
vxbSerial	vxTest/src/tmAudioNew.h	/^    VXB_KEY         vxbSerial;$/;"	m	struct:vxbDev	typeref:typename:VXB_KEY
vxbToggle	vxTest/src/tmAudioNew.h	/^    int             vxbToggle;$/;"	m	struct:vxbDev	typeref:typename:int
vxbUnit	vxTest/src/tmAudioNew.h	/^    UINT32          vxbUnit;$/;"	m	struct:vxbDev	typeref:typename:UINT32
wavData	vxTest/src/tmAudioNew.h	/^    char *wavData;$/;"	m	struct:audioInfo	typeref:typename:char *
wavFd	vxTest/src/tmAudioNew.h	/^    INT32 wavFd;$/;"	m	struct:audioInfo	typeref:typename:INT32
wavFileHeader	vxTest/src/tmAudioNew.h	/^typedef struct wavFileHeader$/;"	s
wavfilename	vxTest/src/tmAudioNew.h	/^    char *wavfilename;$/;"	m	struct:audioInfo	typeref:typename:char *
wdmaOps	vxTest/src/tmMachineDrv.c	/^LOCAL VX_SND_SOC_OPS wdmaOps = {};$/;"	v	typeref:typename:LOCAL VX_SND_SOC_OPS
workDir	vxTest/src/tmAudio.c	/^LOCAL char    workDir[AT_PATHLENGTH] = {0};$/;"	v	typeref:typename:LOCAL char[]
write	h/audioLibCore.h	/^    FUNCPTR         write;$/;"	m	struct:audioDev	typeref:typename:FUNCPTR
write	h/soc.h	/^    STATUS (*write)(struct vxSndSocComponent *component,$/;"	m	struct:vxSndSocComponentDriver	typeref:typename:STATUS (*)(struct vxSndSocComponent * component,uint32_t reg,uint32_t val)
xfer_align	h/vxSoundCore.h	/^    SND_FRAMES_T xfer_align;     \/* obsolete: xfer size need to be a multiple *\/$/;"	m	struct:vxSndPcmSwParams	typeref:typename:SND_FRAMES_T
xlate_tdm_slot_mask	h/soc.h	/^    STATUS (*xlate_tdm_slot_mask)(unsigned int slots,$/;"	m	struct:vxSndSocDaiOps	typeref:typename:STATUS (*)(unsigned int slots,unsigned int * tx_mask,unsigned int * rx_mask)
