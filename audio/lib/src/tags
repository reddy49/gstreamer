!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/mnt/c/Users/Sumanth/Downloads/wind_river/audio/audio/lib/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20240421.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
AUDIO_BUFFER_INFO	audioLibCore.c	/^    } AUDIO_BUFFER_INFO;$/;"	t	typeref:struct:audioBufferInfo	file:
AUDIO_CHAN_INFO	audioLibCore.c	/^    } AUDIO_CHAN_INFO;$/;"	t	typeref:struct:audioChanInfo	file:
AUDIO_CORE_DBG_MSG	audioLibCore.c	/^#       define AUDIO_CORE_DBG_MSG(/;"	d	file:
AUDIO_CORE_DBG_MSG	audioLibCore.c	/^#   define AUDIO_CORE_DBG_MSG(/;"	d	file:
AUDIO_DATA	audioLibCore.c	/^    } AUDIO_DATA;$/;"	t	typeref:struct:audioData	file:
AUDIO_DEFAULT_BUFFER_NUM	audioLibCore.c	/^#define AUDIO_DEFAULT_BUFFER_NUM /;"	d	file:
AUDIO_DEFAULT_BUFFER_TIME	audioLibCore.c	/^#define AUDIO_DEFAULT_BUFFER_TIME /;"	d	file:
AUDIO_FLAG	audioLibCore.c	/^    } AUDIO_FLAG;$/;"	t	typeref:enum:audioFlag	file:
AUDIO_FLAG_BLOCK	audioLibCore.c	/^    AUDIO_FLAG_BLOCK$/;"	e	enum:audioFlag	file:
AUDIO_FLAG_NONBLOCK	audioLibCore.c	/^    AUDIO_FLAG_NONBLOCK = 0,$/;"	e	enum:audioFlag	file:
AUDIO_LIB_CORE_DATA	audioLibCore.c	/^    }AUDIO_LIB_CORE_DATA;$/;"	t	typeref:struct:audioLibCoreData	file:
AUDIO_STATE	audioLibCore.c	/^    } AUDIO_STATE;$/;"	t	typeref:enum:audioState	file:
AUDIO_STATE_ACTIVE	audioLibCore.c	/^    AUDIO_STATE_ACTIVE$/;"	e	enum:audioState	file:
AUDIO_STATE_IDLE	audioLibCore.c	/^    AUDIO_STATE_IDLE = 0,$/;"	e	enum:audioState	file:
AUDIO_TASK_PRIORITY	audioLibCore.c	/^#define AUDIO_TASK_PRIORITY /;"	d	file:
AUDIO_TASK_STACK_SIZE	audioLibCore.c	/^#define AUDIO_TASK_STACK_SIZE /;"	d	file:
AUDIO_TIMEOUT	audioLibCore.c	/^#define AUDIO_TIMEOUT /;"	d	file:
BUFFERSIZE	audioLibWav.c	/^#define BUFFERSIZE /;"	d	file:
BYTES_TO_FRAMES	pcm.c	/^#define BYTES_TO_FRAMES(/;"	d	file:
C_SOURCE	Makefile	/^C_SOURCE = audioLibCore.c audioLibWav.c$/;"	m
C_SOURCE	Makefile	/^C_SOURCE = audioLibWav.c$/;"	m
C_SOURCE	Makefile	/^C_SOURCE = vxSoundCore.c pcm.c soc.c control.c audioLibWav.c card.c vxSoundUtils.c$/;"	m
DATA_CONVERT	audioLibCore.c	/^#define DATA_CONVERT(/;"	d	file:
DEBUG_VX_SND_PCM	pcm.c	/^#define DEBUG_VX_SND_PCM$/;"	d	file:
EXT_FILE_HEADER	audioLibWav.c	/^    } EXT_FILE_HEADER;$/;"	t	typeref:struct:extFileHeader	file:
EXT_WAVE_FORMAT	audioLibWav.c	/^    } EXT_WAVE_FORMAT;$/;"	t	typeref:struct:extWaveFormat	file:
FOR_EACH_COMPONENT	card.c	/^#define FOR_EACH_COMPONENT(/;"	d	file:
FOR_EACH_COMPONENT_DAIS	card.c	/^#define FOR_EACH_COMPONENT_DAIS(/;"	d	file:
FRAMES_TO_BYTES	pcm.c	/^#define FRAMES_TO_BYTES(/;"	d	file:
IS_FRAME_ALIGNED	pcm.c	/^#define IS_FRAME_ALIGNED(/;"	d	file:
LIB_BASE_NAME	Makefile	/^LIB_BASE_NAME = audioLib$/;"	m
LIB_BASE_NAME	Makefile	/^LIB_BASE_NAME = vxSoundLib$/;"	m
LIB_FORMAT	Makefile	/^LIB_FORMAT = both$/;"	m
MEMLFBYTE	audioLibWav.c	/^#define MEMLFBYTE(/;"	d	file:
MEMLNBYTE	audioLibWav.c	/^#define MEMLNBYTE(/;"	d	file:
MEMLSBYTE	audioLibWav.c	/^#define MEMLSBYTE(/;"	d	file:
MEMLTBYTE	audioLibWav.c	/^#define MEMLTBYTE(/;"	d	file:
MEMLWORD	audioLibWav.c	/^#define MEMLWORD(/;"	d	file:
MEMMWORD	audioLibWav.c	/^#define MEMMWORD(/;"	d	file:
MEM_SWAP_LONG	audioLibWav.c	/^#define MEM_SWAP_LONG(/;"	d	file:
MEM_SWAP_WORD	audioLibWav.c	/^#define MEM_SWAP_WORD(/;"	d	file:
PAGE_SIZE	vxSoundUtils.c	/^#define PAGE_SIZE /;"	d	file:
PCM_BUF_DIV_FACTOR	pcm.c	/^#define PCM_BUF_DIV_FACTOR /;"	d	file:
PCM_FILE_HEADER	audioLibWav.c	/^    } PCM_FILE_HEADER;$/;"	t	typeref:struct:pcmFileHeader	file:
PCM_WAVE_FORMAT	audioLibWav.c	/^    } PCM_WAVE_FORMAT;$/;"	t	typeref:struct:pcmWaveFormat	file:
SNDRV_DEFAULT_IDX1	card.c	/^#define SNDRV_DEFAULT_IDX1 /;"	d	file:
SNDRV_DEFAULT_STR1	card.c	/^#define SNDRV_DEFAULT_STR1 /;"	d	file:
SND_CORE_DBG	vxSoundCore.c	/^#define SND_CORE_DBG(/;"	d	file:
SND_CORE_ERR	vxSoundCore.c	/^#define SND_CORE_ERR(/;"	d	file:
SND_CORE_INFO	vxSoundCore.c	/^#define SND_CORE_INFO(/;"	d	file:
SND_CORE_MODE_INFO	vxSoundCore.c	/^#define SND_CORE_MODE_INFO(/;"	d	file:
SND_CTRL_DBG	control.c	/^#define SND_CTRL_DBG(/;"	d	file:
SND_CTRL_ERR	control.c	/^#define SND_CTRL_ERR(/;"	d	file:
SND_CTRL_INFO	control.c	/^#define SND_CTRL_INFO(/;"	d	file:
SND_CTRL_MODE_INFO	control.c	/^#define SND_CTRL_MODE_INFO(/;"	d	file:
SND_INTERVAL_EMPTY	pcm.c	/^#define SND_INTERVAL_EMPTY(/;"	d	file:
SND_PCM_DBG	pcm.c	/^#define SND_PCM_DBG(/;"	d	file:
SND_PCM_ERR	pcm.c	/^#define SND_PCM_ERR(/;"	d	file:
SND_PCM_INFO	pcm.c	/^#define SND_PCM_INFO(/;"	d	file:
SND_PCM_MODE_INFO	pcm.c	/^#define SND_PCM_MODE_INFO(/;"	d	file:
SND_PCM_TIMEOUT	pcm.c	/^#define SND_PCM_TIMEOUT /;"	d	file:
SND_SOC_DBG	card.c	/^#define SND_SOC_DBG(/;"	d	file:
SND_SOC_DBG	soc.c	/^#define SND_SOC_DBG(/;"	d	file:
SND_SOC_ERR	card.c	/^#define SND_SOC_ERR(/;"	d	file:
SND_SOC_ERR	soc.c	/^#define SND_SOC_ERR(/;"	d	file:
SND_SOC_INFO	card.c	/^#define SND_SOC_INFO(/;"	d	file:
SND_SOC_INFO	soc.c	/^#define SND_SOC_INFO(/;"	d	file:
SND_SOC_MODE_INFO	card.c	/^#define SND_SOC_MODE_INFO(/;"	d	file:
SND_SOC_MODE_INFO	soc.c	/^#define SND_SOC_MODE_INFO(/;"	d	file:
STREAM_DIRECTION	pcm.c	/^#define STREAM_DIRECTION(/;"	d	file:
STUB_FORMATS	vxSoundUtils.c	/^#define STUB_FORMATS	/;"	d	file:
STUB_RATES	vxSoundUtils.c	/^#define STUB_RATES	/;"	d	file:
SUBSTREAM_IS_RUNNING	pcm.c	/^#define SUBSTREAM_IS_RUNNING(/;"	d	file:
SUBSTREAM_RUNTIME_CHECK	pcm.c	/^#define SUBSTREAM_RUNTIME_CHECK(/;"	d	file:
SetBitCountGet	soc.c	/^LOCAL uint32_t SetBitCountGet$/;"	f	typeref:typename:LOCAL uint32_t
SndDummyMethodList	vxSoundUtils.c	/^LOCAL VXB_DRV_METHOD SndDummyMethodList[] =$/;"	v	typeref:typename:LOCAL VXB_DRV_METHOD[]
VX_SND_CORE_DBG_ALL	vxSoundCore.c	/^#define VX_SND_CORE_DBG_ALL /;"	d	file:
VX_SND_CORE_DBG_ERR	vxSoundCore.c	/^#define VX_SND_CORE_DBG_ERR /;"	d	file:
VX_SND_CORE_DBG_INFO	vxSoundCore.c	/^#define VX_SND_CORE_DBG_INFO /;"	d	file:
VX_SND_CORE_DBG_OFF	vxSoundCore.c	/^#define VX_SND_CORE_DBG_OFF /;"	d	file:
VX_SND_CORE_DBG_VERBOSE	vxSoundCore.c	/^#define VX_SND_CORE_DBG_VERBOSE /;"	d	file:
VX_SND_CORE_MSG	vxSoundCore.c	/^#define VX_SND_CORE_MSG(/;"	d	file:
VX_SND_CTRL_DBG_ALL	control.c	/^#define VX_SND_CTRL_DBG_ALL /;"	d	file:
VX_SND_CTRL_DBG_ERR	control.c	/^#define VX_SND_CTRL_DBG_ERR /;"	d	file:
VX_SND_CTRL_DBG_INFO	control.c	/^#define VX_SND_CTRL_DBG_INFO /;"	d	file:
VX_SND_CTRL_DBG_OFF	control.c	/^#define VX_SND_CTRL_DBG_OFF /;"	d	file:
VX_SND_CTRL_DBG_VERBOSE	control.c	/^#define VX_SND_CTRL_DBG_VERBOSE /;"	d	file:
VX_SND_CTRL_MSG	control.c	/^#define VX_SND_CTRL_MSG(/;"	d	file:
VX_SND_PCM_DBG_ALL	pcm.c	/^#define VX_SND_PCM_DBG_ALL /;"	d	file:
VX_SND_PCM_DBG_ERR	pcm.c	/^#define VX_SND_PCM_DBG_ERR /;"	d	file:
VX_SND_PCM_DBG_INFO	pcm.c	/^#define VX_SND_PCM_DBG_INFO /;"	d	file:
VX_SND_PCM_DBG_OFF	pcm.c	/^#define VX_SND_PCM_DBG_OFF /;"	d	file:
VX_SND_PCM_DBG_VERBOSE	pcm.c	/^#define VX_SND_PCM_DBG_VERBOSE /;"	d	file:
VX_SND_PCM_MSG	pcm.c	/^#define VX_SND_PCM_MSG(/;"	d	file:
VX_SND_SOC_DBG_ALL	card.c	/^#define VX_SND_SOC_DBG_ALL /;"	d	file:
VX_SND_SOC_DBG_ALL	soc.c	/^#define VX_SND_SOC_DBG_ALL /;"	d	file:
VX_SND_SOC_DBG_ERR	card.c	/^#define VX_SND_SOC_DBG_ERR /;"	d	file:
VX_SND_SOC_DBG_ERR	soc.c	/^#define VX_SND_SOC_DBG_ERR /;"	d	file:
VX_SND_SOC_DBG_INFO	card.c	/^#define VX_SND_SOC_DBG_INFO /;"	d	file:
VX_SND_SOC_DBG_INFO	soc.c	/^#define VX_SND_SOC_DBG_INFO /;"	d	file:
VX_SND_SOC_DBG_OFF	card.c	/^#define VX_SND_SOC_DBG_OFF /;"	d	file:
VX_SND_SOC_DBG_OFF	soc.c	/^#define VX_SND_SOC_DBG_OFF /;"	d	file:
VX_SND_SOC_DBG_VERBOSE	card.c	/^#define VX_SND_SOC_DBG_VERBOSE /;"	d	file:
VX_SND_SOC_DBG_VERBOSE	soc.c	/^#define VX_SND_SOC_DBG_VERBOSE /;"	d	file:
VX_SND_SOC_MSG	card.c	/^#define VX_SND_SOC_MSG(/;"	d	file:
VX_SND_SOC_MSG	soc.c	/^#define VX_SND_SOC_MSG(/;"	d	file:
WAVE_FORMAT_EXTENSIBLE	audioLibWav.c	/^#define WAVE_FORMAT_EXTENSIBLE /;"	d	file:
WAVE_FORMAT_PCM	audioLibWav.c	/^#define WAVE_FORMAT_PCM /;"	d	file:
audioBufferInfo	audioLibCore.c	/^typedef struct audioBufferInfo$/;"	s	file:
audioChanInfo	audioLibCore.c	/^typedef struct audioChanInfo$/;"	s	file:
audioCodecList	audioLibCore.c	/^LOCAL DL_LIST               audioCodecList = {NULL, NULL};$/;"	v	typeref:typename:LOCAL DL_LIST
audioCoreAllocBuffer	audioLibCore.c	/^LOCAL STATUS audioCoreAllocBuffer$/;"	f	typeref:typename:LOCAL STATUS
audioCoreChanStart	audioLibCore.c	/^LOCAL STATUS audioCoreChanStart$/;"	f	typeref:typename:LOCAL STATUS
audioCoreChanStop	audioLibCore.c	/^LOCAL void audioCoreChanStop$/;"	f	typeref:typename:LOCAL void
audioCoreClose	audioLibCore.c	/^LOCAL int audioCoreClose$/;"	f	typeref:typename:LOCAL int
audioCoreClrMsgQ	audioLibCore.c	/^LOCAL void audioCoreClrMsgQ$/;"	f	typeref:typename:LOCAL void
audioCoreConvert	audioLibCore.c	/^LOCAL void audioCoreConvert$/;"	f	typeref:typename:LOCAL void
audioCoreConvert24to24	audioLibCore.c	/^LOCAL void audioCoreConvert24to24$/;"	f	typeref:typename:LOCAL void
audioCoreConvert24to32	audioLibCore.c	/^LOCAL void audioCoreConvert24to32$/;"	f	typeref:typename:LOCAL void
audioCoreConvert32to24	audioLibCore.c	/^LOCAL void audioCoreConvert32to24$/;"	f	typeref:typename:LOCAL void
audioCoreDebugLevel	audioLibCore.c	/^LOCAL int audioCoreDebugLevel = 500;$/;"	v	typeref:typename:LOCAL int
audioCoreDevIdxAlloc	audioLibCore.c	/^LOCAL STATUS audioCoreDevIdxAlloc$/;"	f	typeref:typename:LOCAL STATUS
audioCoreDevIdxFree	audioLibCore.c	/^LOCAL void audioCoreDevIdxFree$/;"	f	typeref:typename:LOCAL void
audioCoreFreeBuffer	audioLibCore.c	/^LOCAL void audioCoreFreeBuffer$/;"	f	typeref:typename:LOCAL void
audioCoreInit	audioLibCore.c	/^void audioCoreInit$/;"	f	typeref:typename:void
audioCoreInitMsgQ	audioLibCore.c	/^LOCAL void audioCoreInitMsgQ$/;"	f	typeref:typename:LOCAL void
audioCoreIoctl	audioLibCore.c	/^LOCAL STATUS audioCoreIoctl$/;"	f	typeref:typename:LOCAL STATUS
audioCoreIoctlChan	audioLibCore.c	/^LOCAL STATUS audioCoreIoctlChan$/;"	f	typeref:typename:LOCAL STATUS
audioCoreIoctlDev	audioLibCore.c	/^LOCAL STATUS audioCoreIoctlDev$/;"	f	typeref:typename:LOCAL STATUS
audioCoreOpen	audioLibCore.c	/^LOCAL void * audioCoreOpen$/;"	f	typeref:typename:LOCAL void *
audioCoreRead	audioLibCore.c	/^LOCAL ssize_t audioCoreRead$/;"	f	typeref:typename:LOCAL ssize_t
audioCoreRecvTask	audioLibCore.c	/^LOCAL void audioCoreRecvTask$/;"	f	typeref:typename:LOCAL void
audioCoreRegCodec	audioLibCore.c	/^STATUS audioCoreRegCodec$/;"	f	typeref:typename:STATUS
audioCoreRegTransceiver	audioLibCore.c	/^STATUS audioCoreRegTransceiver$/;"	f	typeref:typename:STATUS
audioCoreSendTask	audioLibCore.c	/^LOCAL void audioCoreSendTask$/;"	f	typeref:typename:LOCAL void
audioCoreShow	audioLibCore.c	/^void audioCoreShow (void)$/;"	f	typeref:typename:void
audioCoreUnregCodec	audioLibCore.c	/^STATUS audioCoreUnregCodec$/;"	f	typeref:typename:STATUS
audioCoreUnregTransceiver	audioLibCore.c	/^STATUS audioCoreUnregTransceiver$/;"	f	typeref:typename:STATUS
audioCoreWrite	audioLibCore.c	/^LOCAL ssize_t audioCoreWrite$/;"	f	typeref:typename:LOCAL ssize_t
audioData	audioLibCore.c	/^typedef struct audioData$/;"	s	file:
audioDevIdx	audioLibCore.c	/^LOCAL UINT32                audioDevIdx = 0;$/;"	v	typeref:typename:LOCAL UINT32
audioFlag	audioLibCore.c	/^typedef enum audioFlag$/;"	g	file:
audioIoctl	audioLibCore.c	/^LOCAL STATUS audioIoctl$/;"	f	typeref:typename:LOCAL STATUS
audioLibCoreData	audioLibCore.c	/^typedef struct audioLibCoreData$/;"	s	file:
audioScInit	audioLibCore.c	/^LOCAL STATUS audioScInit (void)$/;"	f	typeref:typename:LOCAL STATUS
audioScIoctl	audioLibCore.c	/^LOCAL STATUS audioScIoctl$/;"	f	typeref:typename:LOCAL STATUS
audioScMemValidate	audioLibCore.c	/^LOCAL STATUS audioScMemValidate$/;"	f	typeref:typename:LOCAL STATUS
audioState	audioLibCore.c	/^typedef enum audioState$/;"	g	file:
audioWavHeaderRead	audioLibWav.c	/^STATUS audioWavHeaderRead$/;"	f	typeref:typename:STATUS
audioWavHeaderReadBuf	audioLibWav.c	/^STATUS audioWavHeaderReadBuf$/;"	f	typeref:typename:STATUS
audioWavHeaderWrite	audioLibWav.c	/^STATUS audioWavHeaderWrite$/;"	f	typeref:typename:STATUS
audioWavHeaderWriteBuf	audioLibWav.c	/^STATUS audioWavHeaderWriteBuf$/;"	f	typeref:typename:STATUS
avgBytesPerSec	audioLibWav.c	/^    UINT32  avgBytesPerSec;     \/* average transfer rate *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT32	file:
avgBytesPerSec	audioLibWav.c	/^    UINT32  avgBytesPerSec;     \/* average transfer rate *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT32	file:
bitsPerSample	audioLibWav.c	/^    UINT16  bitsPerSample;      \/* bits per sample *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
bitsPerSample	audioLibWav.c	/^    UINT16  bitsPerSample;      \/* bits per sample *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT16	file:
blockAlign	audioLibWav.c	/^    UINT16  blockAlign;         \/* bytes required for a single sample *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
blockAlign	audioLibWav.c	/^    UINT16  blockAlign;         \/* bytes required for a single sample *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT16	file:
bufNum	audioLibCore.c	/^    UINT32      bufNum;$/;"	m	struct:audioLibCoreData	typeref:typename:UINT32	file:
bufTime	audioLibCore.c	/^    UINT32          bufTime;$/;"	m	struct:audioData	typeref:typename:UINT32	file:
bufTime	audioLibCore.c	/^    UINT32      bufTime;$/;"	m	struct:audioLibCoreData	typeref:typename:UINT32	file:
chanState	audioLibCore.c	/^    AUDIO_STATE         chanState;$/;"	m	struct:audioChanInfo	typeref:typename:AUDIO_STATE	file:
channelMask	audioLibWav.c	/^    UINT32  channelMask;$/;"	m	struct:extWaveFormat	typeref:typename:UINT32	file:
channels	audioLibWav.c	/^    UINT16  channels;           \/* number of audio channels *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
channels	audioLibWav.c	/^    UINT16  channels;           \/* number of audio channels *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT16	file:
clearBitsFromLsb32	pcm.c	/^LOCAL uint32_t clearBitsFromLsb32$/;"	f	typeref:typename:LOCAL uint32_t
clearBitsFromLsb64	pcm.c	/^LOCAL uint64_t clearBitsFromLsb64$/;"	f	typeref:typename:LOCAL uint64_t
client_mutex	card.c	/^LOCAL SEM_ID  client_mutex = SEM_ID_NULL;$/;"	v	typeref:typename:LOCAL SEM_ID
component_list	card.c	/^LOCAL DL_LIST component_list =$/;"	v	typeref:typename:LOCAL DL_LIST
ctrlDrvNum	control.c	/^LOCAL int     ctrlDrvNum = -1;$/;"	v	typeref:typename:LOCAL int
ctrlScInit	control.c	/^LOCAL STATUS ctrlScInit (void)$/;"	f	typeref:typename:LOCAL STATUS
ctrlScIoctl	control.c	/^LOCAL STATUS ctrlScIoctl$/;"	f	typeref:typename:LOCAL STATUS
curPaths	audioLibCore.c	/^    UINT32          curPaths;$/;"	m	struct:audioData	typeref:typename:UINT32	file:
dataInfo	audioLibCore.c	/^    AUDIO_DATA_INFO dataInfo;$/;"	m	struct:audioBufferInfo	typeref:typename:AUDIO_DATA_INFO	file:
dataInfo	audioLibCore.c	/^    AUDIO_DATA_INFO dataInfo;$/;"	m	struct:audioData	typeref:typename:AUDIO_DATA_INFO	file:
devFlag	audioLibCore.c	/^    AUDIO_FLAG      devFlag;$/;"	m	struct:audioData	typeref:typename:AUDIO_FLAG	file:
devHdr	audioLibCore.c	/^    DEV_HDR         devHdr;$/;"	m	struct:audioData	typeref:typename:DEV_HDR	file:
devState	audioLibCore.c	/^    AUDIO_STATE     devState;$/;"	m	struct:audioData	typeref:typename:AUDIO_STATE	file:
downStreamMsg	audioLibCore.c	/^    MSG_Q_ID            downStreamMsg;  \/* empty buffer from IO to device *\/$/;"	m	struct:audioChanInfo	typeref:typename:MSG_Q_ID	file:
dpcm_be_dai_hw_free	soc.c	/^LOCAL void dpcm_be_dai_hw_free$/;"	f	typeref:typename:LOCAL void
dpcm_be_dai_trigger	soc.c	/^LOCAL STATUS dpcm_be_dai_trigger$/;"	f	typeref:typename:LOCAL STATUS
dpcm_dai_trigger_fe_be	soc.c	/^LOCAL STATUS dpcm_dai_trigger_fe_be$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_close	soc.c	/^LOCAL STATUS dpcm_fe_dai_close$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_hw_free	soc.c	/^LOCAL STATUS dpcm_fe_dai_hw_free$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_hw_params	soc.c	/^LOCAL STATUS dpcm_fe_dai_hw_params$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_open	soc.c	/^LOCAL STATUS dpcm_fe_dai_open$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_prepare	soc.c	/^LOCAL STATUS dpcm_fe_dai_prepare$/;"	f	typeref:typename:LOCAL STATUS
dpcm_fe_dai_trigger	soc.c	/^LOCAL STATUS dpcm_fe_dai_trigger$/;"	f	typeref:typename:LOCAL STATUS
drvNum	audioLibCore.c	/^    int         drvNum;$/;"	m	struct:audioLibCoreData	typeref:typename:int	file:
dummyCodec	vxSoundUtils.c	/^LOCAL const VX_SND_SOC_CMPT_DRV dummyCodec = {$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_CMPT_DRV
dummyDai	vxSoundUtils.c	/^LOCAL VX_SND_SOC_DAI_DRIVER dummyDai = {$/;"	v	typeref:typename:LOCAL VX_SND_SOC_DAI_DRIVER
dummyDaiFormats	vxSoundUtils.c	/^LOCAL UINT64 dummyDaiFormats =$/;"	v	typeref:typename:LOCAL UINT64
dummyDaiOps	vxSoundUtils.c	/^LOCAL const VX_SND_SOC_DAI_OPS dummyDaiOps = {$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_DAI_OPS
dummyDmaHardware	vxSoundUtils.c	/^LOCAL const VX_SND_PCM_HARDWARE dummyDmaHardware = {$/;"	v	typeref:typename:LOCAL const VX_SND_PCM_HARDWARE
dummyDmaOpen	vxSoundUtils.c	/^LOCAL int dummyDmaOpen$/;"	f	typeref:typename:LOCAL int
dummyPlatform	vxSoundUtils.c	/^LOCAL const VX_SND_SOC_CMPT_DRV dummyPlatform = {$/;"	v	typeref:typename:LOCAL const VX_SND_SOC_CMPT_DRV
extFileHeader	audioLibWav.c	/^typedef struct extFileHeader$/;"	s	file:
extFormat	audioLibWav.c	/^    EXT_WAVE_FORMAT extFormat;$/;"	m	struct:extFileHeader	typeref:typename:EXT_WAVE_FORMAT	file:
extSize	audioLibWav.c	/^    UINT16  extSize;$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
extWaveFormat	audioLibWav.c	/^typedef struct extWaveFormat$/;"	s	file:
formatTag	audioLibWav.c	/^    UINT16  formatTag;          \/* type of wave form data *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
formatTag	audioLibWav.c	/^    UINT16  formatTag;          \/* type of wave form data *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT16	file:
gCardNumber	vxSoundCore.c	/^LOCAL int gCardNumber = 0;$/;"	v	typeref:typename:LOCAL int
gDebugCard	card.c	/^LOCAL VX_SND_SOC_CARD * gDebugCard = NULL;$/;"	v	typeref:typename:LOCAL VX_SND_SOC_CARD *
inChanInfo	audioLibCore.c	/^    AUDIO_CHAN_INFO inChanInfo;$/;"	m	struct:audioData	typeref:typename:AUDIO_CHAN_INFO	file:
intervalOverlapCalculate	pcm.c	/^LOCAL BOOL intervalOverlapCalculate$/;"	f	typeref:typename:LOCAL BOOL
ioSem	audioLibCore.c	/^    SEM_ID          ioSem;$/;"	m	struct:audioData	typeref:typename:SEM_ID	file:
ioSem	audioLibCore.c	/^    SEM_ID      ioSem;$/;"	m	struct:audioLibCoreData	typeref:typename:SEM_ID	file:
ioctlAudioTbl	audioLibCore.c	/^LOCAL const SC_IOCTL_TBL_ENTRY  ioctlAudioTbl[] =$/;"	v	typeref:typename:LOCAL const SC_IOCTL_TBL_ENTRY[]
ioctlCtrlTbl	control.c	/^LOCAL const SC_IOCTL_TBL_ENTRY  ioctlCtrlTbl[] =$/;"	v	typeref:typename:LOCAL const SC_IOCTL_TBL_ENTRY[]
ioctlPcmTbl	pcm.c	/^LOCAL const SC_IOCTL_TBL_ENTRY  ioctlPcmTbl[] =$/;"	v	typeref:typename:LOCAL const SC_IOCTL_TBL_ENTRY[]
isDaiSupportStream	soc.c	/^LOCAL BOOL isDaiSupportStream$/;"	f	typeref:typename:LOCAL BOOL
isOpened	audioLibCore.c	/^    BOOL            isOpened;$/;"	m	struct:audioData	typeref:typename:BOOL	file:
lenDATA	audioLibWav.c	/^    UINT32          lenDATA;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
lenDATA	audioLibWav.c	/^    UINT32          lenDATA;$/;"	m	struct:pcmFileHeader	typeref:typename:UINT32	file:
lenFACT	audioLibWav.c	/^    UINT32          lenFACT;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
lenFMT	audioLibWav.c	/^    UINT32          lenFMT;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
lenFMT	audioLibWav.c	/^    UINT32          lenFMT;$/;"	m	struct:pcmFileHeader	typeref:typename:UINT32	file:
lenRIFF	audioLibWav.c	/^    UINT32          lenRIFF;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
lenRIFF	audioLibWav.c	/^    UINT32          lenRIFF;$/;"	m	struct:pcmFileHeader	typeref:typename:UINT32	file:
max	soc.c	/^# define max(/;"	d	file:
outChanInfo	audioLibCore.c	/^    AUDIO_CHAN_INFO outChanInfo;$/;"	m	struct:audioData	typeref:typename:AUDIO_CHAN_INFO	file:
pAudioHd	audioLibCore.c	/^LOCAL AUDIO_LIB_CORE_DATA * pAudioHd    = NULL;$/;"	v	typeref:typename:LOCAL AUDIO_LIB_CORE_DATA *
pBuf	audioLibCore.c	/^    UINT8 *         pBuf;       \/* start address of the buffer *\/$/;"	m	struct:audioBufferInfo	typeref:typename:UINT8 *	file:
pBufInfo	audioLibCore.c	/^    AUDIO_BUFFER_INFO * pBufInfo;       \/* buffer header array *\/$/;"	m	struct:audioChanInfo	typeref:typename:AUDIO_BUFFER_INFO *	file:
pCodec	audioLibCore.c	/^    AUDIO_DEV *     pCodec;$/;"	m	struct:audioData	typeref:typename:AUDIO_DEV *	file:
pCodecList	audioLibCore.c	/^    DL_LIST *   pCodecList;$/;"	m	struct:audioLibCoreData	typeref:typename:DL_LIST *	file:
pTrans	audioLibCore.c	/^    AUDIO_DEV *     pTrans;$/;"	m	struct:audioData	typeref:typename:AUDIO_DEV *	file:
pTransList	audioLibCore.c	/^    DL_LIST *   pTransList;$/;"	m	struct:audioLibCoreData	typeref:typename:DL_LIST *	file:
pcmDrvNum	pcm.c	/^LOCAL int     pcmDrvNum = -1;$/;"	v	typeref:typename:LOCAL int
pcmFileHeader	audioLibWav.c	/^typedef struct pcmFileHeader$/;"	s	file:
pcmFormat	audioLibWav.c	/^    PCM_WAVE_FORMAT pcmFormat;$/;"	m	struct:pcmFileHeader	typeref:typename:PCM_WAVE_FORMAT	file:
pcmScInit	pcm.c	/^LOCAL STATUS pcmScInit (void)$/;"	f	typeref:typename:LOCAL STATUS
pcmScIoctl	pcm.c	/^LOCAL STATUS pcmScIoctl$/;"	f	typeref:typename:LOCAL STATUS
pcmWaveFormat	audioLibWav.c	/^typedef struct pcmWaveFormat$/;"	s	file:
printHwParams	pcm.c	/^LOCAL void printHwParams$/;"	f	typeref:typename:LOCAL void
recvTaskId	audioLibCore.c	/^    TASK_ID         recvTaskId;$/;"	m	struct:audioData	typeref:typename:TASK_ID	file:
roundupPowerOfTwoPri	vxSoundCore.c	/^uint32_t roundupPowerOfTwoPri$/;"	f	typeref:typename:uint32_t
sampleLen	audioLibWav.c	/^    UINT32          sampleLen;$/;"	m	struct:extFileHeader	typeref:typename:UINT32	file:
samplesPerSec	audioLibWav.c	/^    UINT32  samplesPerSec;      \/* audio samples per second *\/$/;"	m	struct:extWaveFormat	typeref:typename:UINT32	file:
samplesPerSec	audioLibWav.c	/^    UINT32  samplesPerSec;      \/* audio samples per second *\/$/;"	m	struct:pcmWaveFormat	typeref:typename:UINT32	file:
sendTaskId	audioLibCore.c	/^    TASK_ID         sendTaskId;$/;"	m	struct:audioData	typeref:typename:TASK_ID	file:
size	audioLibCore.c	/^    ssize_t         size;       \/* capacity of this buffer *\/$/;"	m	struct:audioBufferInfo	typeref:typename:ssize_t	file:
sndCtrlClose	control.c	/^LOCAL int sndCtrlClose$/;"	f	typeref:typename:LOCAL int
sndCtrlDevRegister	control.c	/^STATUS sndCtrlDevRegister$/;"	f	typeref:typename:STATUS
sndCtrlDevUnregister	control.c	/^STATUS sndCtrlDevUnregister$/;"	f	typeref:typename:STATUS
sndCtrlInit	control.c	/^void sndCtrlInit (void)$/;"	f	typeref:typename:void
sndCtrlIoctl	control.c	/^LOCAL STATUS sndCtrlIoctl$/;"	f	typeref:typename:LOCAL STATUS
sndCtrlKernelIoctl	control.c	/^LOCAL STATUS sndCtrlKernelIoctl$/;"	f	typeref:typename:LOCAL STATUS
sndCtrlOpen	control.c	/^LOCAL void * sndCtrlOpen$/;"	f	typeref:typename:LOCAL void *
sndCtrlRead	control.c	/^LOCAL ssize_t sndCtrlRead$/;"	f	typeref:typename:LOCAL ssize_t
sndCtrlWrite	control.c	/^LOCAL ssize_t sndCtrlWrite$/;"	f	typeref:typename:LOCAL ssize_t
sndDevRegister	vxSoundCore.c	/^STATUS sndDevRegister$/;"	f	typeref:typename:STATUS
sndDummyAttach	vxSoundUtils.c	/^LOCAL STATUS sndDummyAttach$/;"	f	typeref:typename:LOCAL STATUS
sndDummyDevRegister	vxSoundCore.c	/^STATUS sndDummyDevRegister$/;"	f	typeref:typename:STATUS
sndDummyMatch	vxSoundUtils.c	/^LOCAL VXB_FDT_DEV_MATCH_ENTRY sndDummyMatch[] =$/;"	v	typeref:typename:LOCAL VXB_FDT_DEV_MATCH_ENTRY[]
sndDummyProbe	vxSoundUtils.c	/^LOCAL STATUS sndDummyProbe$/;"	f	typeref:typename:LOCAL STATUS
sndPcmBufDataCopy	pcm.c	/^LOCAL void sndPcmBufDataCopy$/;"	f	typeref:typename:LOCAL void
sndPcmCaptureBufReadableSizeGet	pcm.c	/^LOCAL SND_FRAMES_T sndPcmCaptureBufReadableSizeGet$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
sndPcmClose	pcm.c	/^LOCAL int sndPcmClose$/;"	f	typeref:typename:LOCAL int
sndPcmDefaultIoctl	pcm.c	/^STATUS sndPcmDefaultIoctl$/;"	f	typeref:typename:STATUS
sndPcmDevRegister	pcm.c	/^STATUS sndPcmDevRegister$/;"	f	typeref:typename:STATUS
sndPcmDevUnregister	pcm.c	/^STATUS sndPcmDevUnregister$/;"	f	typeref:typename:STATUS
sndPcmDeviceList	pcm.c	/^LOCAL DL_LIST sndPcmDeviceList;$/;"	v	typeref:typename:LOCAL DL_LIST
sndPcmDmaBufferPtrUpdate	pcm.c	/^LOCAL STATUS sndPcmDmaBufferPtrUpdate$/;"	f	typeref:typename:LOCAL STATUS
sndPcmInit	pcm.c	/^void sndPcmInit (void)$/;"	f	typeref:typename:void
sndPcmIoctl	pcm.c	/^LOCAL STATUS sndPcmIoctl$/;"	f	typeref:typename:LOCAL STATUS
sndPcmKernelIoctl	pcm.c	/^LOCAL STATUS sndPcmKernelIoctl$/;"	f	typeref:typename:LOCAL STATUS
sndPcmListSem	pcm.c	/^LOCAL SEM_ID  sndPcmListSem;    \/* protect sndPcmDeviceList access *\/$/;"	v	typeref:typename:LOCAL SEM_ID
sndPcmOpen	pcm.c	/^LOCAL void * sndPcmOpen$/;"	f	typeref:typename:LOCAL void *
sndPcmPlaybackBufDataSizeGet	pcm.c	/^LOCAL SND_FRAMES_T sndPcmPlaybackBufDataSizeGet$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
sndPcmPlaybackBufWritableSizeGet	pcm.c	/^LOCAL SND_FRAMES_T sndPcmPlaybackBufWritableSizeGet$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
sndPcmSubstreamOpen	pcm.c	/^LOCAL STATUS sndPcmSubstreamOpen$/;"	f	typeref:typename:LOCAL STATUS
sndPcmSubstreamRelease	pcm.c	/^LOCAL STATUS sndPcmSubstreamRelease$/;"	f	typeref:typename:LOCAL STATUS
sndPcmSubstreamStateUpdate	pcm.c	/^LOCAL STATUS sndPcmSubstreamStateUpdate$/;"	f	typeref:typename:LOCAL STATUS
sndPcmSubstreamXfer	pcm.c	/^LOCAL SND_FRAMES_T sndPcmSubstreamXfer$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
sndPcmTransfer	pcm.c	/^LOCAL ssize_t sndPcmTransfer$/;"	f	typeref:typename:LOCAL ssize_t
sndPcmWaitTime	pcm.c	/^LOCAL uint64_t sndPcmWaitTime$/;"	f	typeref:typename:LOCAL uint64_t
sndSocBeConnectByName	soc.c	/^STATUS sndSocBeConnectByName$/;"	f	typeref:typename:STATUS
sndSocCardrtdFindByName	soc.c	/^VX_SND_SOC_PCM_RUNTIME * sndSocCardrtdFindByName$/;"	f	typeref:typename:VX_SND_SOC_PCM_RUNTIME *
sndSocGetDaiName	card.c	/^STATUS sndSocGetDaiName$/;"	f	typeref:typename:STATUS
sndSocLinkBeHwParamsFixup	soc.c	/^STATUS sndSocLinkBeHwParamsFixup$/;"	f	typeref:typename:STATUS
sndSubstreamAppPtrUpdate	pcm.c	/^LOCAL STATUS sndSubstreamAppPtrUpdate$/;"	f	typeref:typename:LOCAL STATUS
snd_card_free	vxSoundCore.c	/^void snd_card_free$/;"	f	typeref:typename:void
snd_card_new	vxSoundCore.c	/^STATUS snd_card_new$/;"	f	typeref:typename:STATUS
snd_card_register	vxSoundCore.c	/^STATUS snd_card_register$/;"	f	typeref:typename:STATUS
snd_device_register_all	vxSoundCore.c	/^STATUS snd_device_register_all$/;"	f	typeref:typename:STATUS
snd_pcm_lib_free_pages	pcm.c	/^STATUS snd_pcm_lib_free_pages$/;"	f	typeref:typename:STATUS
snd_pcm_lib_malloc_pages	pcm.c	/^STATUS snd_pcm_lib_malloc_pages$/;"	f	typeref:typename:STATUS
snd_pcm_period_elapsed	pcm.c	/^void snd_pcm_period_elapsed$/;"	f	typeref:typename:void
snd_soc_add_component	card.c	/^STATUS snd_soc_add_component$/;"	f	typeref:typename:STATUS
snd_soc_add_pcm_runtime_unlock	card.c	/^LOCAL STATUS snd_soc_add_pcm_runtime_unlock$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_bind_card	card.c	/^LOCAL STATUS snd_soc_bind_card$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_card_late_probe	card.c	/^LOCAL STATUS snd_soc_card_late_probe$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_card_probe	card.c	/^LOCAL STATUS snd_soc_card_probe$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_component_init	card.c	/^LOCAL STATUS snd_soc_component_init$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_component_is_dummy	vxSoundUtils.c	/^BOOL snd_soc_component_is_dummy$/;"	f	typeref:typename:BOOL
snd_soc_component_probe	card.c	/^LOCAL STATUS snd_soc_component_probe$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_dai_set_tdm_slot	soc.c	/^STATUS snd_soc_dai_set_tdm_slot$/;"	f	typeref:typename:STATUS
snd_soc_dai_set_tristate	soc.c	/^STATUS snd_soc_dai_set_tristate$/;"	f	typeref:typename:STATUS
snd_soc_find_dai	card.c	/^VX_SND_SOC_DAI * snd_soc_find_dai$/;"	f	typeref:typename:VX_SND_SOC_DAI *
snd_soc_get_enum_double	soc.c	/^STATUS snd_soc_get_enum_double$/;"	f	typeref:typename:STATUS
snd_soc_info_enum_double	soc.c	/^STATUS snd_soc_info_enum_double$/;"	f	typeref:typename:STATUS
snd_soc_is_matching_component	card.c	/^LOCAL BOOL snd_soc_is_matching_component$/;"	f	typeref:typename:LOCAL BOOL
snd_soc_link_init	card.c	/^LOCAL STATUS snd_soc_link_init$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_pcm_dai_new	card.c	/^LOCAL STATUS snd_soc_pcm_dai_new$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_pcm_dai_probe	card.c	/^LOCAL STATUS snd_soc_pcm_dai_probe$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_put_enum_double	soc.c	/^STATUS snd_soc_put_enum_double$/;"	f	typeref:typename:STATUS
snd_soc_register_dai	card.c	/^LOCAL VX_SND_SOC_DAI * snd_soc_register_dai$/;"	f	typeref:typename:LOCAL VX_SND_SOC_DAI *
snd_soc_register_dais	card.c	/^LOCAL STATUS snd_soc_register_dais$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_remove_pcm_runtime	card.c	/^LOCAL void snd_soc_remove_pcm_runtime$/;"	f	typeref:typename:LOCAL void
snd_soc_rtd_add_component	card.c	/^LOCAL void snd_soc_rtd_add_component$/;"	f	typeref:typename:LOCAL void
snd_soc_runtime_set_dai_fmt	card.c	/^LOCAL STATUS snd_soc_runtime_set_dai_fmt$/;"	f	typeref:typename:LOCAL STATUS
snd_soc_unregister_card	card.c	/^STATUS snd_soc_unregister_card$/;"	f	typeref:typename:STATUS
snd_soc_unregister_component	card.c	/^void snd_soc_unregister_component$/;"	f	typeref:typename:void
snd_soc_unregister_dais	card.c	/^LOCAL void snd_soc_unregister_dais$/;"	f	typeref:typename:LOCAL void
soc_cleanup_card_resources	card.c	/^LOCAL void soc_cleanup_card_resources$/;"	f	typeref:typename:LOCAL void
soc_init_pcm_runtime	card.c	/^LOCAL STATUS soc_init_pcm_runtime$/;"	f	typeref:typename:LOCAL STATUS
soc_new_pcm_runtime	card.c	/^LOCAL VX_SND_SOC_PCM_RUNTIME * soc_new_pcm_runtime$/;"	f	typeref:typename:LOCAL VX_SND_SOC_PCM_RUNTIME *
soc_probe_component	card.c	/^LOCAL STATUS soc_probe_component$/;"	f	typeref:typename:LOCAL STATUS
soc_probe_link_components	card.c	/^LOCAL STATUS soc_probe_link_components$/;"	f	typeref:typename:LOCAL STATUS
soc_probe_link_dais	card.c	/^LOCAL STATUS soc_probe_link_dais$/;"	f	typeref:typename:LOCAL STATUS
soc_remove_component	card.c	/^LOCAL void soc_remove_component$/;"	f	typeref:typename:LOCAL void
soc_remove_link_components	card.c	/^LOCAL void soc_remove_link_components$/;"	f	typeref:typename:LOCAL void
soc_remove_link_dais	card.c	/^LOCAL void soc_remove_link_dais$/;"	f	typeref:typename:LOCAL void
soc_set_name_prefix	card.c	/^LOCAL void soc_set_name_prefix$/;"	f	typeref:typename:LOCAL void
subFormat	audioLibWav.c	/^    UINT8   subFormat [16];$/;"	m	struct:extWaveFormat	typeref:typename:UINT8[16]	file:
tagDATA	audioLibWav.c	/^    UINT8           tagDATA [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagDATA	audioLibWav.c	/^    UINT8           tagDATA [4];$/;"	m	struct:pcmFileHeader	typeref:typename:UINT8[4]	file:
tagFACT	audioLibWav.c	/^    UINT8           tagFACT [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagFMT	audioLibWav.c	/^    UINT8           tagFMT [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagFMT	audioLibWav.c	/^    UINT8           tagFMT [4];$/;"	m	struct:pcmFileHeader	typeref:typename:UINT8[4]	file:
tagRIFF	audioLibWav.c	/^    UINT8           tagRIFF [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagRIFF	audioLibWav.c	/^    UINT8           tagRIFF [4];$/;"	m	struct:pcmFileHeader	typeref:typename:UINT8[4]	file:
tagWAVE	audioLibWav.c	/^    UINT8           tagWAVE [4];$/;"	m	struct:extFileHeader	typeref:typename:UINT8[4]	file:
tagWAVE	audioLibWav.c	/^    UINT8           tagWAVE [4];$/;"	m	struct:pcmFileHeader	typeref:typename:UINT8[4]	file:
upStreamMsg	audioLibCore.c	/^    MSG_Q_ID            upStreamMsg;    \/* sampling from device to IO *\/$/;"	m	struct:audioChanInfo	typeref:typename:MSG_Q_ID	file:
usedSize	audioLibCore.c	/^    ssize_t         usedSize;   \/* valid data size of this buffer*\/$/;"	m	struct:audioBufferInfo	typeref:typename:ssize_t	file:
validBitsPerSample	audioLibWav.c	/^    UINT16  validBitsPerSample;$/;"	m	struct:extWaveFormat	typeref:typename:UINT16	file:
validXferFramesGet	pcm.c	/^LOCAL SND_FRAMES_T validXferFramesGet$/;"	f	typeref:typename:LOCAL SND_FRAMES_T
volume	audioLibCore.c	/^    AUDIO_VOLUME        volume;$/;"	m	struct:audioChanInfo	typeref:typename:AUDIO_VOLUME	file:
vxPcmFormats	pcm.c	/^LOCAL const VX_SND_PCM_FMT_INFO vxPcmFormats[VX_SND_FMT_MAX+1] =$/;"	v	typeref:typename:LOCAL const VX_SND_PCM_FMT_INFO[]
vxSndCardCtrlFindNoLock	control.c	/^LOCAL VX_SND_CONTROL * vxSndCardCtrlFindNoLock$/;"	f	typeref:typename:LOCAL VX_SND_CONTROL *
vxSndCardDbgMask	card.c	/^uint32_t vxSndCardDbgMask = VX_SND_SOC_DBG_ALL;$/;"	v	typeref:typename:uint32_t
vxSndCardGet	card.c	/^VX_SND_SOC_CARD * vxSndCardGet (void)$/;"	f	typeref:typename:VX_SND_SOC_CARD *
vxSndCardRegister	card.c	/^STATUS vxSndCardRegister$/;"	f	typeref:typename:STATUS
vxSndCmpGet	card.c	/^DL_LIST * vxSndCmpGet (void)$/;"	f	typeref:typename:DL_LIST *
vxSndControlsAdd	control.c	/^STATUS vxSndControlsAdd$/;"	f	typeref:typename:STATUS
vxSndCoreDbgMask	vxSoundCore.c	/^UINT32 vxSndCoreDbgMask = VX_SND_CORE_DBG_ALL;$/;"	v	typeref:typename:UINT32
vxSndCpntRegister	card.c	/^STATUS vxSndCpntRegister$/;"	f	typeref:typename:STATUS
vxSndCtlAdd	control.c	/^LOCAL STATUS vxSndCtlAdd$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlCreate	control.c	/^STATUS vxSndCtrlCreate$/;"	f	typeref:typename:STATUS
vxSndCtrlDbgMask	control.c	/^UINT32 vxSndCtrlDbgMask = VX_SND_CTRL_DBG_ALL;$/;"	v	typeref:typename:UINT32
vxSndCtrlEnumValToItem	soc.c	/^uint32_t vxSndCtrlEnumValToItem$/;"	f	typeref:typename:uint32_t
vxSndCtrlGet	control.c	/^LOCAL STATUS vxSndCtrlGet$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlInfo	control.c	/^LOCAL STATUS vxSndCtrlInfo$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlItemToEnumVal	soc.c	/^uint32_t vxSndCtrlItemToEnumVal$/;"	f	typeref:typename:uint32_t
vxSndCtrlListGet	control.c	/^LOCAL STATUS vxSndCtrlListGet$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlPut	control.c	/^LOCAL STATUS vxSndCtrlPut$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlTlvRead	control.c	/^LOCAL STATUS vxSndCtrlTlvRead$/;"	f	typeref:typename:LOCAL STATUS
vxSndCtrlVolumeGet	soc.c	/^STATUS vxSndCtrlVolumeGet$/;"	f	typeref:typename:STATUS
vxSndCtrlVolumeInfo	soc.c	/^STATUS vxSndCtrlVolumeInfo$/;"	f	typeref:typename:STATUS
vxSndCtrlVolumePut	soc.c	/^STATUS vxSndCtrlVolumePut$/;"	f	typeref:typename:STATUS
vxSndDevCreate	vxSoundCore.c	/^STATUS vxSndDevCreate$/;"	f	typeref:typename:STATUS
vxSndDevScMemValidate	vxSoundCore.c	/^STATUS vxSndDevScMemValidate$/;"	f	typeref:typename:STATUS
vxSndGetRateFromBitmap	pcm.c	/^uint32_t vxSndGetRateFromBitmap$/;"	f	typeref:typename:uint32_t
vxSndPcmContructSupportHwParams	pcm.c	/^LOCAL void vxSndPcmContructSupportHwParams$/;"	f	typeref:typename:LOCAL void
vxSndPcmCreate	pcm.c	/^STATUS vxSndPcmCreate$/;"	f	typeref:typename:STATUS
vxSndPcmDbgMask	pcm.c	/^UINT32 vxSndPcmDbgMask = VX_SND_PCM_DBG_ERR;$/;"	v	typeref:typename:UINT32
vxSndPcmDrain	pcm.c	/^LOCAL STATUS vxSndPcmDrain$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmDrop	pcm.c	/^LOCAL STATUS vxSndPcmDrop$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmFmtPhyWidthGet	pcm.c	/^uint32_t vxSndPcmFmtPhyWidthGet$/;"	f	typeref:typename:uint32_t
vxSndPcmFmtValidWidthGet	pcm.c	/^uint32_t vxSndPcmFmtValidWidthGet$/;"	f	typeref:typename:uint32_t
vxSndPcmHwFree	pcm.c	/^LOCAL STATUS vxSndPcmHwFree$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmHwParams	pcm.c	/^LOCAL STATUS vxSndPcmHwParams$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmHwParamsRefine	pcm.c	/^LOCAL STATUS vxSndPcmHwParamsRefine$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmHwRateToBitmap	pcm.c	/^STATUS vxSndPcmHwRateToBitmap$/;"	f	typeref:typename:STATUS
vxSndPcmOpsIoctl	pcm.c	/^LOCAL STATUS vxSndPcmOpsIoctl$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmOpsReset	pcm.c	/^LOCAL STATUS vxSndPcmOpsReset$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmPause	pcm.c	/^LOCAL STATUS vxSndPcmPause$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmPrepare	pcm.c	/^LOCAL STATUS vxSndPcmPrepare$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmReset	pcm.c	/^LOCAL STATUS vxSndPcmReset$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmStart	pcm.c	/^LOCAL STATUS vxSndPcmStart$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmStop	pcm.c	/^LOCAL STATUS vxSndPcmStop$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmStopSync	pcm.c	/^LOCAL STATUS vxSndPcmStopSync$/;"	f	typeref:typename:LOCAL STATUS
vxSndPcmSupportedHwParamsGet	pcm.c	/^LOCAL void vxSndPcmSupportedHwParamsGet$/;"	f	typeref:typename:LOCAL void
vxSndPcmSupportedHwParamsInit	pcm.c	/^LOCAL void vxSndPcmSupportedHwParamsInit$/;"	f	typeref:typename:LOCAL void
vxSndPcmXrun	pcm.c	/^LOCAL void vxSndPcmXrun$/;"	f	typeref:typename:LOCAL void
vxSndSocCardCtrlsAdd	soc.c	/^STATUS vxSndSocCardCtrlsAdd$/;"	f	typeref:typename:STATUS
vxSndSocComponentActiveCntGet	soc.c	/^uint32_t vxSndSocComponentActiveCntGet$/;"	f	typeref:typename:uint32_t
vxSndSocComponentCtrlsAdd	soc.c	/^STATUS vxSndSocComponentCtrlsAdd$/;"	f	typeref:typename:STATUS
vxSndSocComponentRead	soc.c	/^uint32_t vxSndSocComponentRead$/;"	f	typeref:typename:uint32_t
vxSndSocComponentReadUnlock	soc.c	/^uint32_t vxSndSocComponentReadUnlock$/;"	f	typeref:typename:uint32_t
vxSndSocComponentUpdate	soc.c	/^STATUS vxSndSocComponentUpdate$/;"	f	typeref:typename:STATUS
vxSndSocComponentWrite	soc.c	/^STATUS vxSndSocComponentWrite$/;"	f	typeref:typename:STATUS
vxSndSocComponentWriteUnlock	soc.c	/^STATUS vxSndSocComponentWriteUnlock$/;"	f	typeref:typename:STATUS
vxSndSocDaiActiveAllCntGet	soc.c	/^uint32_t vxSndSocDaiActiveAllCntGet$/;"	f	typeref:typename:uint32_t
vxSndSocDaiActiveCntAdd	soc.c	/^LOCAL void vxSndSocDaiActiveCntAdd$/;"	f	typeref:typename:LOCAL void
vxSndSocDaiActiveStreamCntGet	soc.c	/^uint32_t vxSndSocDaiActiveStreamCntGet$/;"	f	typeref:typename:uint32_t
vxSndSocDaiCtrlsAdd	soc.c	/^STATUS vxSndSocDaiCtrlsAdd$/;"	f	typeref:typename:STATUS
vxSndSocDaiDigitalMute	soc.c	/^STATUS vxSndSocDaiDigitalMute$/;"	f	typeref:typename:STATUS
vxSndSocDaiFmtSet	soc.c	/^int32_t vxSndSocDaiFmtSet$/;"	f	typeref:typename:int32_t
vxSndSocDaiHwFree	soc.c	/^void vxSndSocDaiHwFree$/;"	f	typeref:typename:void
vxSndSocDaiShutdown	soc.c	/^void vxSndSocDaiShutdown$/;"	f	typeref:typename:void
vxSndSocDaiStartup	soc.c	/^STATUS vxSndSocDaiStartup$/;"	f	typeref:typename:STATUS
vxSndSocDbgMask	soc.c	/^UINT32 vxSndSocDbgMask = VX_SND_SOC_DBG_ALL;$/;"	v	typeref:typename:UINT32
vxSndSocPcmComponentIoctl	soc.c	/^LOCAL STATUS vxSndSocPcmComponentIoctl$/;"	f	typeref:typename:LOCAL STATUS
vxSndSocPcmCreate	soc.c	/^STATUS vxSndSocPcmCreate$/;"	f	typeref:typename:STATUS
vxSndSocRuntimeActive	soc.c	/^LOCAL void vxSndSocRuntimeActive$/;"	f	typeref:typename:LOCAL void
vxSndSocRuntimeDeactive	soc.c	/^ LOCAL void vxSndSocRuntimeDeactive$/;"	f	typeref:typename:LOCAL void
vxSndSocRuntimeHwCalculate	soc.c	/^LOCAL STATUS vxSndSocRuntimeHwCalculate$/;"	f	typeref:typename:LOCAL STATUS
vxSndSocRuntimeHwparamsSet	soc.c	/^void vxSndSocRuntimeHwparamsSet$/;"	f	typeref:typename:void
vxSndSubstreamCreate	pcm.c	/^LOCAL STATUS vxSndSubstreamCreate$/;"	f	typeref:typename:LOCAL STATUS
vxSndValidRates	pcm.c	/^LOCAL const uint32_t vxSndValidRates[] =$/;"	v	typeref:typename:LOCAL const uint32_t[]
vxSocPcmClean	soc.c	/^LOCAL void vxSocPcmClean$/;"	f	typeref:typename:LOCAL void
vxSocPcmClose	soc.c	/^LOCAL STATUS vxSocPcmClose$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmComponentAck	soc.c	/^STATUS vxSocPcmComponentAck$/;"	f	typeref:typename:STATUS
vxSocPcmComponentCopy	soc.c	/^LOCAL STATUS vxSocPcmComponentCopy$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmComponentSyncStop	soc.c	/^LOCAL STATUS vxSocPcmComponentSyncStop$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmHwChannelUpdate	soc.c	/^LOCAL void vxSocPcmHwChannelUpdate$/;"	f	typeref:typename:LOCAL void
vxSocPcmHwClean	soc.c	/^LOCAL void vxSocPcmHwClean$/;"	f	typeref:typename:LOCAL void
vxSocPcmHwDefInit	soc.c	/^LOCAL void vxSocPcmHwDefInit$/;"	f	typeref:typename:LOCAL void
vxSocPcmHwFormateUpdate	soc.c	/^LOCAL void vxSocPcmHwFormateUpdate$/;"	f	typeref:typename:LOCAL void
vxSocPcmHwFree	soc.c	/^LOCAL STATUS vxSocPcmHwFree$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmHwParams	soc.c	/^LOCAL STATUS vxSocPcmHwParams$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmHwRateUpdate	soc.c	/^LOCAL void vxSocPcmHwRateUpdate$/;"	f	typeref:typename:LOCAL void
vxSocPcmOpen	soc.c	/^LOCAL STATUS vxSocPcmOpen$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmPointer	soc.c	/^LOCAL SND_FRAMES_U_T vxSocPcmPointer$/;"	f	typeref:typename:LOCAL SND_FRAMES_U_T
vxSocPcmPrepare	soc.c	/^LOCAL STATUS vxSocPcmPrepare$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmRuntimeHwInit	soc.c	/^LOCAL STATUS vxSocPcmRuntimeHwInit$/;"	f	typeref:typename:LOCAL STATUS
vxSocPcmTrigger	soc.c	/^LOCAL STATUS vxSocPcmTrigger$/;"	f	typeref:typename:LOCAL STATUS
vxSoundCoreInit	vxSoundCore.c	/^void vxSoundCoreInit (void)$/;"	f	typeref:typename:void
vxbFdtSndDummyDrv	vxSoundUtils.c	/^VXB_DRV vxbFdtSndDummyDrv =$/;"	v	typeref:typename:VXB_DRV
